{"remainingRequest":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/babel-loader/lib/index.js!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/ts-loader/index.js??ref--15-2!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--14-0!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/store/server/history/getters.ts","dependencies":[{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/store/server/history/getters.ts","mtime":1644874918000},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js","mtime":1645990064605},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/babel-loader/lib/index.js","mtime":1645990067759},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/ts-loader/index.js","mtime":1645990068168},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1645990065243}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2guanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maWx0ZXIuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maW5kLWluZGV4LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmluY2x1ZGVzLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmluY2x1ZGVzLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc29ydC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbmQuanMiOwovLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUKZXhwb3J0IHZhciBnZXR0ZXJzID0gewogIGdldFRvdGFsUHJpbnRUaW1lOiBmdW5jdGlvbiBnZXRUb3RhbFByaW50VGltZShzdGF0ZSkgewogICAgdmFyIG91dHB1dCA9IDA7CiAgICBzdGF0ZS5qb2JzLmZvckVhY2goZnVuY3Rpb24gKGN1cnJlbnQpIHsKICAgICAgb3V0cHV0ICs9IGN1cnJlbnQucHJpbnRfZHVyYXRpb247CiAgICB9KTsKICAgIHJldHVybiBvdXRwdXQ7CiAgfSwKICBnZXRUb3RhbENvbXBsZXRlZFByaW50VGltZTogZnVuY3Rpb24gZ2V0VG90YWxDb21wbGV0ZWRQcmludFRpbWUoc3RhdGUpIHsKICAgIHZhciBvdXRwdXQgPSAwOwogICAgc3RhdGUuam9icy5mb3JFYWNoKGZ1bmN0aW9uIChjdXJyZW50KSB7CiAgICAgIGlmIChjdXJyZW50LnN0YXR1cyA9PT0gJ2NvbXBsZXRlZCcpIG91dHB1dCArPSBjdXJyZW50LnByaW50X2R1cmF0aW9uOwogICAgfSk7CiAgICByZXR1cm4gb3V0cHV0OwogIH0sCiAgZ2V0TG9uZ2VzdFByaW50VGltZTogZnVuY3Rpb24gZ2V0TG9uZ2VzdFByaW50VGltZShzdGF0ZSkgewogICAgdmFyIG91dHB1dCA9IDA7CiAgICBzdGF0ZS5qb2JzLmZvckVhY2goZnVuY3Rpb24gKGN1cnJlbnQpIHsKICAgICAgaWYgKGN1cnJlbnQucHJpbnRfZHVyYXRpb24gPiBvdXRwdXQpIG91dHB1dCA9IGN1cnJlbnQucHJpbnRfZHVyYXRpb247CiAgICB9KTsKICAgIHJldHVybiBvdXRwdXQ7CiAgfSwKICBnZXRUb3RhbEZpbGFtZW50VXNlZDogZnVuY3Rpb24gZ2V0VG90YWxGaWxhbWVudFVzZWQoc3RhdGUpIHsKICAgIHZhciBvdXRwdXQgPSAwOwogICAgc3RhdGUuam9icy5mb3JFYWNoKGZ1bmN0aW9uIChjdXJyZW50KSB7CiAgICAgIG91dHB1dCArPSBjdXJyZW50LmZpbGFtZW50X3VzZWQ7CiAgICB9KTsKICAgIHJldHVybiBvdXRwdXQ7CiAgfSwKICBnZXRUb3RhbEpvYnNDb3VudDogZnVuY3Rpb24gZ2V0VG90YWxKb2JzQ291bnQoc3RhdGUpIHsKICAgIHJldHVybiBzdGF0ZS5qb2JzLmxlbmd0aDsKICB9LAogIGdldFRvdGFsQ29tcGxldGVkSm9ic0NvdW50OiBmdW5jdGlvbiBnZXRUb3RhbENvbXBsZXRlZEpvYnNDb3VudChzdGF0ZSkgewogICAgcmV0dXJuIHN0YXRlLmpvYnMuZmlsdGVyKGZ1bmN0aW9uIChqb2IpIHsKICAgICAgcmV0dXJuIGpvYi5zdGF0dXMgPT09ICdjb21wbGV0ZWQnOwogICAgfSkubGVuZ3RoOwogIH0sCiAgZ2V0QXZnUHJpbnRUaW1lOiBmdW5jdGlvbiBnZXRBdmdQcmludFRpbWUoc3RhdGUsIGdldHRlcnMpIHsKICAgIHZhciB0b3RhbENvbXBsZXRlZFByaW50VGltZSA9IGdldHRlcnMuZ2V0VG90YWxDb21wbGV0ZWRQcmludFRpbWU7CiAgICB2YXIgdG90YWxDb21wbGV0ZWRKb2JzQ291bnQgPSBnZXR0ZXJzLmdldFRvdGFsQ29tcGxldGVkSm9ic0NvdW50OwogICAgcmV0dXJuIHRvdGFsQ29tcGxldGVkUHJpbnRUaW1lID4gMCAmJiB0b3RhbENvbXBsZXRlZEpvYnNDb3VudCA+IDAgPyBNYXRoLnJvdW5kKHRvdGFsQ29tcGxldGVkUHJpbnRUaW1lIC8gdG90YWxDb21wbGV0ZWRKb2JzQ291bnQpIDogMDsKICB9LAogIGdldEFsbFByaW50U3RhdHVzQXJyYXk6IGZ1bmN0aW9uIGdldEFsbFByaW50U3RhdHVzQXJyYXkoc3RhdGUsIGdldHRlcnMsIHJvb3RTdGF0ZSkgewogICAgdmFyIG91dHB1dCA9IFtdOwogICAgc3RhdGUuam9icy5mb3JFYWNoKGZ1bmN0aW9uIChjdXJyZW50KSB7CiAgICAgIHZhciBpbmRleCA9IG91dHB1dC5maW5kSW5kZXgoZnVuY3Rpb24gKGVsZW1lbnQpIHsKICAgICAgICByZXR1cm4gZWxlbWVudC5uYW1lID09PSBjdXJyZW50LnN0YXR1czsKICAgICAgfSk7CiAgICAgIGlmIChpbmRleCAhPT0gLTEpIG91dHB1dFtpbmRleF0udmFsdWUgKz0gMTtlbHNlIHsKICAgICAgICB2YXIgX3Jvb3RTdGF0ZSRndWk7CgogICAgICAgIHZhciBpdGVtU3R5bGUgPSB7CiAgICAgICAgICBvcGFjaXR5OiAwLjksCiAgICAgICAgICBjb2xvcjogJyM0MjQyNDInLAogICAgICAgICAgYm9yZGVyQ29sb3I6ICcjMUUxRTFFJywKICAgICAgICAgIGJvcmRlcldpZHRoOiAyLAogICAgICAgICAgYm9yZGVyUmFkaXVzOiAzCiAgICAgICAgfTsKCiAgICAgICAgc3dpdGNoIChjdXJyZW50LnN0YXR1cykgewogICAgICAgICAgY2FzZSAnY29tcGxldGVkJzoKICAgICAgICAgICAgaXRlbVN0eWxlWydjb2xvciddID0gJyNCREJEQkQnOwogICAgICAgICAgICBicmVhazsKCiAgICAgICAgICBjYXNlICdpbl9wcm9ncmVzcyc6CiAgICAgICAgICAgIGl0ZW1TdHlsZVsnY29sb3InXSA9ICcjRUVFRUVFJzsKICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgY2FzZSAnY2FuY2VsbGVkJzoKICAgICAgICAgICAgaXRlbVN0eWxlWydjb2xvciddID0gJyM2MTYxNjEnOwogICAgICAgICAgICBicmVhazsKICAgICAgICB9CgogICAgICAgIG91dHB1dC5wdXNoKHsKICAgICAgICAgIG5hbWU6IGN1cnJlbnQuc3RhdHVzLAogICAgICAgICAgdmFsdWU6IDEsCiAgICAgICAgICBpdGVtU3R5bGU6IGl0ZW1TdHlsZSwKICAgICAgICAgIHNob3dJblRhYmxlOiAhKChfcm9vdFN0YXRlJGd1aSA9IHJvb3RTdGF0ZS5ndWkpICE9PSBudWxsICYmIF9yb290U3RhdGUkZ3VpICE9PSB2b2lkIDAgJiYgX3Jvb3RTdGF0ZSRndWkudmlldy5oaXN0b3J5LmhpZGVQcmludFN0YXR1cy5pbmNsdWRlcyhjdXJyZW50LnN0YXR1cykpLAogICAgICAgICAgbGFiZWw6IHsKICAgICAgICAgICAgY29sb3I6ICcjZmZmJwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9CiAgICB9KTsKICAgIHJldHVybiBvdXRwdXQ7CiAgfSwKICBnZXRGaWxhbWVudFVzYWdlQXJyYXk6IGZ1bmN0aW9uIGdldEZpbGFtZW50VXNhZ2VBcnJheShzdGF0ZSkgewogICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lCiAgICB2YXIgb3V0cHV0ID0gW107CiAgICB2YXIgc3RhcnREYXRlID0gbmV3IERhdGUoKTsKICAgIHN0YXJ0RGF0ZS5zZXRUaW1lKHN0YXJ0RGF0ZS5nZXRUaW1lKCkgLSA2MCAqIDYwICogMjQgKiAxNCAqIDEwMDApOwogICAgc3RhcnREYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApOwogICAgdmFyIGpvYnNGaWx0ZXJlZCA9IHN0YXRlLmpvYnMuZmlsdGVyKGZ1bmN0aW9uIChqb2IpIHsKICAgICAgcmV0dXJuIG5ldyBEYXRlKGpvYi5zdGFydF90aW1lICogMTAwMCkgPj0gc3RhcnREYXRlICYmIGpvYi5maWxhbWVudF91c2VkID4gMDsKICAgIH0pOwoKICAgIGZvciAodmFyIGkgPSAwOyBpIDw9IDE0OyBpKyspIHsKICAgICAgdmFyIHRtcERhdGUgPSBuZXcgRGF0ZSgpOwogICAgICB0bXBEYXRlLnNldFRpbWUoc3RhcnREYXRlLmdldFRpbWUoKSArIDYwICogNjAgKiAyNCAqIGkgKiAxMDAwKTsKICAgICAgb3V0cHV0LnB1c2goW25ldyBEYXRlKHRtcERhdGUpLnNldEhvdXJzKDAsIDAsIDAsIDApLCAwXSk7CiAgICB9CgogICAgaWYgKGpvYnNGaWx0ZXJlZC5sZW5ndGgpIHsKICAgICAgam9ic0ZpbHRlcmVkLmZvckVhY2goZnVuY3Rpb24gKGN1cnJlbnQpIHsKICAgICAgICB2YXIgY3VycmVudFN0YXJ0RGF0ZSA9IG5ldyBEYXRlKGN1cnJlbnQuc3RhcnRfdGltZSAqIDEwMDApLnNldEhvdXJzKDAsIDAsIDAsIDApOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUKCiAgICAgICAgdmFyIGluZGV4ID0gb3V0cHV0LmZpbmRJbmRleChmdW5jdGlvbiAoZWxlbWVudCkgewogICAgICAgICAgcmV0dXJuIGVsZW1lbnRbMF0gPT09IGN1cnJlbnRTdGFydERhdGU7CiAgICAgICAgfSk7CiAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkgb3V0cHV0W2luZGV4XVsxXSArPSBNYXRoLnJvdW5kKGN1cnJlbnQuZmlsYW1lbnRfdXNlZCkgLyAxMDAwOwogICAgICB9KTsKICAgIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lCgoKICAgIHJldHVybiBvdXRwdXQuc29ydChmdW5jdGlvbiAoYSwgYikgewogICAgICByZXR1cm4gYlswXSAtIGFbMF07CiAgICB9KTsKICB9LAogIGdldFByaW50dGltZUF2Z0FycmF5OiBmdW5jdGlvbiBnZXRQcmludHRpbWVBdmdBcnJheShzdGF0ZSkgewogICAgdmFyIG91dHB1dCA9IFswLCAwLCAwLCAwLCAwXTsKICAgIHZhciBzdGFydERhdGUgPSBuZXcgRGF0ZShuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIDYwICogNjAgKiAyNCAqIDE0ICogMTAwMCk7CiAgICB2YXIgam9ic0ZpbHRlcmVkID0gc3RhdGUuam9icy5maWx0ZXIoZnVuY3Rpb24gKGpvYikgewogICAgICByZXR1cm4gbmV3IERhdGUoam9iLnN0YXJ0X3RpbWUgKiAxMDAwKSA+PSBzdGFydERhdGUgJiYgam9iLnN0YXR1cyA9PT0gJ2NvbXBsZXRlZCc7CiAgICB9KTsKCiAgICBpZiAoam9ic0ZpbHRlcmVkLmxlbmd0aCkgewogICAgICBqb2JzRmlsdGVyZWQuZm9yRWFjaChmdW5jdGlvbiAoY3VycmVudCkgewogICAgICAgIGlmIChjdXJyZW50LnByaW50X2R1cmF0aW9uID4gMCAmJiBjdXJyZW50LnByaW50X2R1cmF0aW9uIDw9IDYwICogNjAgKiAyKSBvdXRwdXRbMF0rKztlbHNlIGlmIChjdXJyZW50LnByaW50X2R1cmF0aW9uID4gNjAgKiA2MCAqIDIgJiYgY3VycmVudC5wcmludF9kdXJhdGlvbiA8PSA2MCAqIDYwICogNikgb3V0cHV0WzFdKys7ZWxzZSBpZiAoY3VycmVudC5wcmludF9kdXJhdGlvbiA+IDYwICogNjAgKiA2ICYmIGN1cnJlbnQucHJpbnRfZHVyYXRpb24gPD0gNjAgKiA2MCAqIDEyKSBvdXRwdXRbMl0rKztlbHNlIGlmIChjdXJyZW50LnByaW50X2R1cmF0aW9uID4gNjAgKiA2MCAqIDEyICYmIGN1cnJlbnQucHJpbnRfZHVyYXRpb24gPD0gNjAgKiA2MCAqIDI0KSBvdXRwdXRbM10rKztlbHNlIGlmIChjdXJyZW50LnByaW50X2R1cmF0aW9uID4gNjAgKiA2MCAqIDI0KSBvdXRwdXRbNF0rKzsKICAgICAgfSk7CiAgICB9CgogICAgcmV0dXJuIG91dHB1dDsKICB9LAogIGdldFByaW50U3RhdHVzOiBmdW5jdGlvbiBnZXRQcmludFN0YXR1cyhzdGF0ZSkgewogICAgcmV0dXJuIGZ1bmN0aW9uIChqb2JJZCkgewogICAgICBpZiAoc3RhdGUuam9icy5sZW5ndGgpIHsKICAgICAgICB2YXIgX2pvYiRzdGF0dXM7CgogICAgICAgIHZhciBqb2IgPSBzdGF0ZS5qb2JzLmZpbmQoZnVuY3Rpb24gKGpvYikgewogICAgICAgICAgcmV0dXJuIGpvYi5qb2JfaWQgPT09IGpvYklkOwogICAgICAgIH0pOwogICAgICAgIHJldHVybiAoX2pvYiRzdGF0dXMgPSBqb2IgPT09IG51bGwgfHwgam9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBqb2Iuc3RhdHVzKSAhPT0gbnVsbCAmJiBfam9iJHN0YXR1cyAhPT0gdm9pZCAwID8gX2pvYiRzdGF0dXMgOiAnJzsKICAgICAgfQoKICAgICAgcmV0dXJuICcnOwogICAgfTsKICB9LAogIGdldFByaW50U3RhdHVzQnlGaWxlbmFtZTogZnVuY3Rpb24gZ2V0UHJpbnRTdGF0dXNCeUZpbGVuYW1lKHN0YXRlKSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKGZpbGVuYW1lLCBtb2RpZmllZCkgewogICAgICBpZiAoc3RhdGUuam9icy5sZW5ndGgpIHsKICAgICAgICB2YXIgX2pvYiRzdGF0dXMyOwoKICAgICAgICB2YXIgam9iID0gc3RhdGUuam9icy5maW5kKGZ1bmN0aW9uIChqb2IpIHsKICAgICAgICAgIHZhciBfam9iJG1ldGFkYXRhOwoKICAgICAgICAgIHJldHVybiBqb2IuZmlsZW5hbWUgPT09IGZpbGVuYW1lICYmIE1hdGgucm91bmQoKChfam9iJG1ldGFkYXRhID0gam9iLm1ldGFkYXRhKSA9PT0gbnVsbCB8fCBfam9iJG1ldGFkYXRhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfam9iJG1ldGFkYXRhLm1vZGlmaWVkKSAqIDEwMDApID09PSBtb2RpZmllZDsKICAgICAgICB9KTsKICAgICAgICByZXR1cm4gKF9qb2Ikc3RhdHVzMiA9IGpvYiA9PT0gbnVsbCB8fCBqb2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGpvYi5zdGF0dXMpICE9PSBudWxsICYmIF9qb2Ikc3RhdHVzMiAhPT0gdm9pZCAwID8gX2pvYiRzdGF0dXMyIDogJyc7CiAgICAgIH0KCiAgICAgIHJldHVybiAnJzsKICAgIH07CiAgfSwKICBnZXRQcmludFN0YXR1c0NoaXBDb2xvcjogZnVuY3Rpb24gZ2V0UHJpbnRTdGF0dXNDaGlwQ29sb3IoKSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKHN0YXR1cykgewogICAgICBzd2l0Y2ggKHN0YXR1cykgewogICAgICAgIGNhc2UgJ2luX3Byb2dyZXNzJzoKICAgICAgICAgIHJldHVybiAnYmx1ZSBhY2NlbnQtMyc7CiAgICAgICAgLy8nYmx1ZS1ncmV5IGRhcmtlbi0xJwoKICAgICAgICBjYXNlICdjb21wbGV0ZWQnOgogICAgICAgICAgcmV0dXJuICdncmVlbic7CiAgICAgICAgLy8nZ3JlZW4nCgogICAgICAgIGNhc2UgJ2NhbmNlbGxlZCc6CiAgICAgICAgICByZXR1cm4gJ3JlZCc7CgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICByZXR1cm4gJ29yYW5nZSc7CiAgICAgIH0KICAgIH07CiAgfSwKICBnZXRQcmludFN0YXR1c0NoaXBJY29uOiBmdW5jdGlvbiBnZXRQcmludFN0YXR1c0NoaXBJY29uKCkgewogICAgcmV0dXJuIGZ1bmN0aW9uIChzdGF0dXMpIHsKICAgICAgc3dpdGNoIChzdGF0dXMpIHsKICAgICAgICBjYXNlICdpbl9wcm9ncmVzcyc6CiAgICAgICAgICByZXR1cm4gJ21kaS1wcm9ncmVzcy1jbG9jayc7CgogICAgICAgIGNhc2UgJ2NvbXBsZXRlZCc6CiAgICAgICAgICByZXR1cm4gJ21kaS1jaGVja2JveC1tYXJrZWQtY2lyY2xlLW91dGxpbmUnOwoKICAgICAgICBjYXNlICdjYW5jZWxsZWQnOgogICAgICAgICAgcmV0dXJuICdtZGktY2xvc2UtY2lyY2xlLW91dGxpbmUnOwoKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgcmV0dXJuICdtZGktYWxlcnQtb3V0bGluZSc7CiAgICAgIH0KICAgIH07CiAgfSwKICBnZXRGaWx0ZXJkSm9iTGlzdDogZnVuY3Rpb24gZ2V0RmlsdGVyZEpvYkxpc3Qoc3RhdGUsIGdldHRlcnMsIHJvb3RTdGF0ZSkgewogICAgdmFyIGhpZGVTdGF0dXMgPSByb290U3RhdGUuZ3VpLnZpZXcuaGlzdG9yeS5oaWRlUHJpbnRTdGF0dXM7CiAgICByZXR1cm4gc3RhdGUuam9icy5maWx0ZXIoZnVuY3Rpb24gKGpvYikgewogICAgICByZXR1cm4gIWhpZGVTdGF0dXMuaW5jbHVkZXMoam9iLnN0YXR1cyk7CiAgICB9KTsKICB9Cn07"},{"version":3,"sources":["/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--14-0!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/store/server/history/getters.ts"],"names":[],"mappings":"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","sourcesContent":["import {GetterTree} from 'vuex'\nimport {ServerHistoryState, ServerHistoryStateJob} from '@/store/server/history/types'\n\n// eslint-disable-next-line\nexport const getters: GetterTree<ServerHistoryState, any> = {\n\n    getTotalPrintTime(state) {\n        let output = 0\n\n        state.jobs.forEach(current => {\n            output += current.print_duration\n        })\n\n        return output\n    },\n\n    getTotalCompletedPrintTime(state) {\n        let output = 0\n\n        state.jobs.forEach(current => {\n            if (current.status === 'completed') output += current.print_duration\n        })\n\n        return output\n    },\n\n    getLongestPrintTime(state) {\n        let output = 0\n\n        state.jobs.forEach(current => {\n            if (current.print_duration > output) output = current.print_duration\n        })\n\n        return output\n    },\n\n    getTotalFilamentUsed(state) {\n        let output = 0\n\n        state.jobs.forEach(current => {\n            output += current.filament_used\n        })\n\n        return output\n    },\n\n    getTotalJobsCount(state) {\n        return state.jobs.length\n    },\n\n    getTotalCompletedJobsCount(state) {\n        return state.jobs.filter(job => job.status === 'completed').length\n    },\n\n    getAvgPrintTime(state, getters) {\n        const totalCompletedPrintTime = getters.getTotalCompletedPrintTime\n        const totalCompletedJobsCount = getters.getTotalCompletedJobsCount\n\n        return totalCompletedPrintTime > 0 && totalCompletedJobsCount > 0 ? Math.round(totalCompletedPrintTime / totalCompletedJobsCount) : 0\n    },\n\n    getAllPrintStatusArray(state, getters, rootState) {\n        interface allPrintStatusEntryItemStyle {\n            opacity: number\n            color: string\n            borderColor: string\n            borderWidth: number\n            borderRadius: number\n        }\n        interface allPrintStatusEntryLabel {\n            color: string\n        }\n\n        interface allPrintStatusEntry {\n            name: string\n            value: number\n            showInTable: boolean\n            itemStyle: allPrintStatusEntryItemStyle\n            label: allPrintStatusEntryLabel\n        }\n\n        const output: allPrintStatusEntry[] = []\n\n        state.jobs.forEach((current) => {\n            const index = output.findIndex(element => element.name === current.status)\n            if (index !== -1) output[index].value +=1\n            else {\n                const itemStyle = {\n                    opacity: 0.9,\n                    color: '#424242',\n                    borderColor: '#1E1E1E',\n                    borderWidth: 2,\n                    borderRadius: 3,\n                }\n\n                switch (current.status) {\n                case 'completed':\n                    itemStyle['color'] = '#BDBDBD'\n                    break\n\n                case 'in_progress':\n                    itemStyle['color'] = '#EEEEEE'\n                    break\n\n                case 'cancelled':\n                    itemStyle['color'] = '#616161'\n                    break\n                }\n\n                output.push({\n                    name: current.status,\n                    value: 1,\n                    itemStyle: itemStyle,\n                    showInTable: !rootState.gui?.view.history.hidePrintStatus.includes(current.status),\n                    label: {\n                        color: '#fff'\n                    }\n                })\n            }\n        })\n\n        return output\n    },\n\n    getFilamentUsageArray(state) {\n        // eslint-disable-next-line\n        const output: any = []\n        const startDate = new Date()\n        startDate.setTime(startDate.getTime() - 60*60*24*14*1000)\n        startDate.setHours(0,0,0,0)\n        const jobsFiltered = state.jobs.filter(job => new Date(job.start_time * 1000) >= startDate && job.filament_used > 0)\n\n        for (let i = 0; i <= 14; i++) {\n            const tmpDate = new Date()\n            tmpDate.setTime(startDate.getTime() + 60*60*24*i*1000)\n\n            output.push([\n                new Date(tmpDate).setHours(0,0,0,0),\n                0\n            ])\n        }\n\n        if (jobsFiltered.length) {\n            jobsFiltered.forEach(current => {\n                const currentStartDate = new Date(current.start_time * 1000).setHours(0,0,0,0)\n                // eslint-disable-next-line\n                const index = output.findIndex((element: any) => element[0] === currentStartDate)\n                if (index !== -1) output[index][1] += Math.round(current.filament_used) / 1000\n            })\n        }\n\n        // eslint-disable-next-line\n        return output.sort((a: any, b: any) => {\n            return b[0] - a[0]\n        })\n    },\n\n    getPrinttimeAvgArray(state) {\n        const output = [0,0,0,0,0]\n        const startDate = new Date(new Date().getTime() - 60*60*24*14*1000)\n        const jobsFiltered = state.jobs.filter(job => new Date(job.start_time * 1000) >= startDate && job.status === 'completed')\n\n        if (jobsFiltered.length) {\n            jobsFiltered.forEach(current => {\n                if \t\t(current.print_duration > 0 \t\t&& current.print_duration <= 60*60*2) \toutput[0]++\n                else if (current.print_duration > 60*60*2 \t&& current.print_duration <= 60*60*6) \toutput[1]++\n                else if (current.print_duration > 60*60*6 \t&& current.print_duration <= 60*60*12) \toutput[2]++\n                else if (current.print_duration > 60*60*12 \t&& current.print_duration <= 60*60*24) \toutput[3]++\n                else if (current.print_duration > 60*60*24) \t\t\t\t\t\t\t\t\t\toutput[4]++\n            })\n        }\n\n        return output\n    },\n\n    getPrintStatus: (state) => (jobId: string) => {\n        if (state.jobs.length) {\n            const job = state.jobs.find(job => job.job_id === jobId)\n\n            return job?.status ?? ''\n        }\n\n        return ''\n    },\n\n    getPrintStatusByFilename: (state) => (filename: string, modified: number) => {\n        if (state.jobs.length) {\n            const job = state.jobs.find((job) => {\n                return job.filename === filename && Math.round(job.metadata?.modified*1000) === modified\n            })\n\n            return job?.status ?? ''\n        }\n\n        return ''\n    },\n\n    getPrintStatusChipColor: () => (status: string) => {\n        switch(status) {\n        case 'in_progress': return 'blue accent-3' //'blue-grey darken-1'\n        case 'completed': return 'green' //'green'\n        case 'cancelled': return 'red'\n\n        default: return 'orange'\n        }\n    },\n\n    getPrintStatusChipIcon: () => (status: string) => {\n        switch(status) {\n        case 'in_progress': return 'mdi-progress-clock'\n        case 'completed': return 'mdi-checkbox-marked-circle-outline'\n        case 'cancelled': return 'mdi-close-circle-outline'\n\n        default: return 'mdi-alert-outline'\n        }\n    },\n\n    getFilterdJobList: (state, getters, rootState) => {\n        const hideStatus = rootState.gui.view.history.hidePrintStatus\n\n        return state.jobs.filter((job: ServerHistoryStateJob) => {\n            return !hideStatus.includes(job.status)\n        })\n    }\n}"],"sourceRoot":""}]}