{"remainingRequest":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/thread-loader/dist/cjs.js!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/babel-loader/lib/index.js!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/ts-loader/index.js??ref--15-3!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--14-0!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/store/gui/remoteprinters/actions.ts","dependencies":[{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/store/gui/remoteprinters/actions.ts","mtime":1644874918000},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js","mtime":1645990064605},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/thread-loader/dist/cjs.js","mtime":1645990064416},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/babel-loader/lib/index.js","mtime":1645990067759},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/ts-loader/index.js","mtime":1645990068168},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1645990065243}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9Vc2Vycy9hbm5lLXNvcGhpZXJveS9Eb3dubG9hZHMvTWFpbnNhaWwvbWFpbnNhaWwtbWFpbnRlbmFuY2Uvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IuanMiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmtleXMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5qc29uLnN0cmluZ2lmeS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3IuanMiOwppbXBvcnQgeyB2NCBhcyB1dWlkdjQgfSBmcm9tICd1dWlkJzsKaW1wb3J0IFZ1ZSBmcm9tICd2dWUnOwpleHBvcnQgdmFyIGFjdGlvbnMgPSB7CiAgcmVzZXQ6IGZ1bmN0aW9uIHJlc2V0KF9yZWYpIHsKICAgIHZhciBjb21taXQgPSBfcmVmLmNvbW1pdCwKICAgICAgICBkaXNwYXRjaCA9IF9yZWYuZGlzcGF0Y2gsCiAgICAgICAgc3RhdGUgPSBfcmVmLnN0YXRlOwogICAgT2JqZWN0LmtleXMoc3RhdGUucHJpbnRlcnMpLmZvckVhY2goZnVuY3Rpb24gKHByaW50ZXJJZCkgewogICAgICBkaXNwYXRjaCgnZmFybS91bnJlZ2lzdGVyUHJpbnRlcicsIHByaW50ZXJJZCwgewogICAgICAgIHJvb3Q6IHRydWUKICAgICAgfSk7CiAgICB9KTsKICAgIGNvbW1pdCgncmVzZXQnKTsKICB9LAogIGluaXRGcm9tTG9jYWxzdG9yYWdlOiBmdW5jdGlvbiBpbml0RnJvbUxvY2Fsc3RvcmFnZShfcmVmMikgewogICAgdmFyIF9sb2NhbFN0b3JhZ2UkZ2V0SXRlbTsKCiAgICB2YXIgZGlzcGF0Y2ggPSBfcmVmMi5kaXNwYXRjaDsKICAgIHZhciB2YWx1ZSA9IEpTT04ucGFyc2UoKF9sb2NhbFN0b3JhZ2UkZ2V0SXRlbSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdwcmludGVycycpKSAhPT0gbnVsbCAmJiBfbG9jYWxTdG9yYWdlJGdldEl0ZW0gIT09IHZvaWQgMCA/IF9sb2NhbFN0b3JhZ2UkZ2V0SXRlbSA6ICd7fScpOwoKICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkgewogICAgICB2YXIgcHJpbnRlcnMgPSB7fTsKICAgICAgdmFsdWUuZm9yRWFjaChmdW5jdGlvbiAocHJpbnRlcikgewogICAgICAgIHZhciBpZCA9IHV1aWR2NCgpOwogICAgICAgIHByaW50ZXJzW2lkXSA9IHByaW50ZXI7CiAgICAgIH0pOwogICAgICBkaXNwYXRjaCgnaW5pdFN0b3JlJywgcHJpbnRlcnMpOwogICAgfQogIH0sCiAgaW5pdFN0b3JlOiBmdW5jdGlvbiBpbml0U3RvcmUoX3JlZjMsIHBheWxvYWQpIHsKICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgIHZhciBjb21taXQsIGRpc3BhdGNoLCBzdGF0ZTsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWYzLmNvbW1pdCwgZGlzcGF0Y2ggPSBfcmVmMy5kaXNwYXRjaCwgc3RhdGUgPSBfcmVmMy5zdGF0ZTsKICAgICAgICAgICAgICBkaXNwYXRjaCgncmVzZXQnKTsKICAgICAgICAgICAgICBPYmplY3Qua2V5cyhwYXlsb2FkKS5mb3JFYWNoKGZ1bmN0aW9uIChwcmludGVySWQpIHsKICAgICAgICAgICAgICAgIHZhciBfcHJpbnRlciRob3N0bmFtZSwgX3ByaW50ZXIkcG9ydCwgX3ByaW50ZXIkc2V0dGluZ3M7CgogICAgICAgICAgICAgICAgdmFyIHByaW50ZXIgPSBwYXlsb2FkW3ByaW50ZXJJZF07CiAgICAgICAgICAgICAgICBjb21taXQoJ3N0b3JlJywgewogICAgICAgICAgICAgICAgICBpZDogcHJpbnRlcklkLAogICAgICAgICAgICAgICAgICB2YWx1ZXM6IHByaW50ZXIKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgZGlzcGF0Y2goJ2Zhcm0vcmVnaXN0ZXJQcmludGVyJywgewogICAgICAgICAgICAgICAgICBpZDogcHJpbnRlcklkLAogICAgICAgICAgICAgICAgICBob3N0bmFtZTogKF9wcmludGVyJGhvc3RuYW1lID0gcHJpbnRlci5ob3N0bmFtZSkgIT09IG51bGwgJiYgX3ByaW50ZXIkaG9zdG5hbWUgIT09IHZvaWQgMCA/IF9wcmludGVyJGhvc3RuYW1lIDogJycsCiAgICAgICAgICAgICAgICAgIHBvcnQ6IChfcHJpbnRlciRwb3J0ID0gcHJpbnRlci5wb3J0KSAhPT0gbnVsbCAmJiBfcHJpbnRlciRwb3J0ICE9PSB2b2lkIDAgPyBfcHJpbnRlciRwb3J0IDogNzEyNSwKICAgICAgICAgICAgICAgICAgc2V0dGluZ3M6IChfcHJpbnRlciRzZXR0aW5ncyA9IHByaW50ZXIuc2V0dGluZ3MpICE9PSBudWxsICYmIF9wcmludGVyJHNldHRpbmdzICE9PSB2b2lkIDAgPyBfcHJpbnRlciRzZXR0aW5ncyA6IHt9CiAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgIHJvb3Q6IHRydWUKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlKTsKICAgIH0pKSgpOwogIH0sCiAgdXBsb2FkOiBmdW5jdGlvbiB1cGxvYWQoX3JlZjQsIGlkKSB7CiAgICB2YXIgX3Jvb3RTdGF0ZSRzb2NrZXQ7CgogICAgdmFyIHN0YXRlID0gX3JlZjQuc3RhdGUsCiAgICAgICAgcm9vdFN0YXRlID0gX3JlZjQucm9vdFN0YXRlOwoKICAgIGlmICgoX3Jvb3RTdGF0ZSRzb2NrZXQgPSByb290U3RhdGUuc29ja2V0KSAhPT0gbnVsbCAmJiBfcm9vdFN0YXRlJHNvY2tldCAhPT0gdm9pZCAwICYmIF9yb290U3RhdGUkc29ja2V0LnJlbW90ZU1vZGUpIHsKICAgICAgdmFyIHByaW50ZXJzID0gW107CiAgICAgIE9iamVjdC5rZXlzKHN0YXRlLnByaW50ZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChpZCkgewogICAgICAgIHByaW50ZXJzLnB1c2goewogICAgICAgICAgaG9zdG5hbWU6IHN0YXRlLnByaW50ZXJzW2lkXS5ob3N0bmFtZSwKICAgICAgICAgIHBvcnQ6IHN0YXRlLnByaW50ZXJzW2lkXS5wb3J0LAogICAgICAgICAgc2V0dGluZ3M6IHN0YXRlLnByaW50ZXJzW2lkXS5zZXR0aW5ncwogICAgICAgIH0pOwogICAgICB9KTsKICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3ByaW50ZXJzJywgSlNPTi5zdHJpbmdpZnkocHJpbnRlcnMpKTsKICAgIH0gZWxzZSBpZiAoaWQgaW4gc3RhdGUucHJpbnRlcnMpIHsKICAgICAgdmFyIF9zdGF0ZSRwcmludGVycyRpZCRzZTsKCiAgICAgIHZhciB2YWx1ZSA9IHsKICAgICAgICBob3N0bmFtZTogc3RhdGUucHJpbnRlcnNbaWRdLmhvc3RuYW1lLAogICAgICAgIHBvcnQ6IHN0YXRlLnByaW50ZXJzW2lkXS5wb3J0LAogICAgICAgIHNldHRpbmdzOiAoX3N0YXRlJHByaW50ZXJzJGlkJHNlID0gc3RhdGUucHJpbnRlcnNbaWRdLnNldHRpbmdzKSAhPT0gbnVsbCAmJiBfc3RhdGUkcHJpbnRlcnMkaWQkc2UgIT09IHZvaWQgMCA/IF9zdGF0ZSRwcmludGVycyRpZCRzZSA6IHt9CiAgICAgIH07CiAgICAgIFZ1ZS4kc29ja2V0LmVtaXQoJ3NlcnZlci5kYXRhYmFzZS5wb3N0X2l0ZW0nLCB7CiAgICAgICAgbmFtZXNwYWNlOiAnbWFpbnNhaWwnLAogICAgICAgIGtleTogJ3JlbW90ZXByaW50ZXJzLnByaW50ZXJzLicgKyBpZCwKICAgICAgICB2YWx1ZTogdmFsdWUKICAgICAgfSk7CiAgICB9CiAgfSwKICBzdG9yZTogZnVuY3Rpb24gc3RvcmUoX3JlZjUsIHBheWxvYWQpIHsKICAgIHZhciBfcGF5bG9hZCR2YWx1ZXMkaG9zdG4sIF9wYXlsb2FkJHZhbHVlcyRwb3J0OwoKICAgIHZhciBjb21taXQgPSBfcmVmNS5jb21taXQsCiAgICAgICAgZGlzcGF0Y2ggPSBfcmVmNS5kaXNwYXRjaCwKICAgICAgICBzdGF0ZSA9IF9yZWY1LnN0YXRlOwogICAgdmFyIGlkID0gdXVpZHY0KCk7CiAgICBjb21taXQoJ3N0b3JlJywgewogICAgICBpZDogaWQsCiAgICAgIHZhbHVlczogcGF5bG9hZC52YWx1ZXMKICAgIH0pOwogICAgZGlzcGF0Y2goJ2Zhcm0vcmVnaXN0ZXJQcmludGVyJywgewogICAgICBpZDogaWQsCiAgICAgIGhvc3RuYW1lOiAoX3BheWxvYWQkdmFsdWVzJGhvc3RuID0gcGF5bG9hZC52YWx1ZXMuaG9zdG5hbWUpICE9PSBudWxsICYmIF9wYXlsb2FkJHZhbHVlcyRob3N0biAhPT0gdm9pZCAwID8gX3BheWxvYWQkdmFsdWVzJGhvc3RuIDogJycsCiAgICAgIHBvcnQ6IChfcGF5bG9hZCR2YWx1ZXMkcG9ydCA9IHBheWxvYWQudmFsdWVzLnBvcnQpICE9PSBudWxsICYmIF9wYXlsb2FkJHZhbHVlcyRwb3J0ICE9PSB2b2lkIDAgPyBfcGF5bG9hZCR2YWx1ZXMkcG9ydCA6IDcxMjUKICAgIH0sIHsKICAgICAgcm9vdDogdHJ1ZQogICAgfSk7CiAgICBkaXNwYXRjaCgndXBsb2FkJywgaWQpOwogIH0sCiAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoX3JlZjYsIHBheWxvYWQpIHsKICAgIHZhciBjb21taXQgPSBfcmVmNi5jb21taXQsCiAgICAgICAgZGlzcGF0Y2ggPSBfcmVmNi5kaXNwYXRjaCwKICAgICAgICBzdGF0ZSA9IF9yZWY2LnN0YXRlOwogICAgY29tbWl0KCd1cGRhdGUnLCBwYXlsb2FkKTsKICAgIGRpc3BhdGNoKCdmYXJtL3VwZGF0ZVByaW50ZXInLCBwYXlsb2FkLCB7CiAgICAgIHJvb3Q6IHRydWUKICAgIH0pOwogICAgZGlzcGF0Y2goJ3VwbG9hZCcsIHBheWxvYWQuaWQpOwogIH0sCiAgdXBkYXRlU2V0dGluZ3M6IGZ1bmN0aW9uIHVwZGF0ZVNldHRpbmdzKF9yZWY3LCBwYXlsb2FkKSB7CiAgICB2YXIgY29tbWl0ID0gX3JlZjcuY29tbWl0LAogICAgICAgIGRpc3BhdGNoID0gX3JlZjcuZGlzcGF0Y2g7CiAgICBjb21taXQoJ3VwZGF0ZScsIHsKICAgICAgaWQ6IHBheWxvYWQuaWQsCiAgICAgIHZhbHVlczogewogICAgICAgIHNldHRpbmdzOiBwYXlsb2FkLnZhbHVlcwogICAgICB9CiAgICB9KTsKICAgIGRpc3BhdGNoKCd1cGxvYWQnLCBwYXlsb2FkLmlkKTsKICB9LAogIGRlbGV0ZTogZnVuY3Rpb24gX2RlbGV0ZShfcmVmOCwgaWQpIHsKICAgIHZhciBjb21taXQgPSBfcmVmOC5jb21taXQsCiAgICAgICAgZGlzcGF0Y2ggPSBfcmVmOC5kaXNwYXRjaDsKICAgIGNvbW1pdCgnZGVsZXRlJywgaWQpOwogICAgZGlzcGF0Y2goJ2Zhcm0vdW5yZWdpc3RlclByaW50ZXInLCBpZCwgewogICAgICByb290OiB0cnVlCiAgICB9KTsKICAgIFZ1ZS4kc29ja2V0LmVtaXQoJ3NlcnZlci5kYXRhYmFzZS5kZWxldGVfaXRlbScsIHsKICAgICAgbmFtZXNwYWNlOiAnbWFpbnNhaWwnLAogICAgICBrZXk6ICdyZW1vdGVwcmludGVycy5wcmludGVycy4nICsgaWQKICAgIH0pOwogIH0KfTs="},null]}