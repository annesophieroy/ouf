{"remainingRequest":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/thread-loader/dist/cjs.js!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/babel-loader/lib/index.js!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/ts-loader/index.js??ref--15-3!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/components/settings/SettingsControlTab.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/components/settings/SettingsControlTab.vue","mtime":1644874918000},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js","mtime":1645990064605},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/thread-loader/dist/cjs.js","mtime":1645990064416},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/babel-loader/lib/index.js","mtime":1645990067759},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/ts-loader/index.js","mtime":1645990068168},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js","mtime":1645990064605},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1645990069130}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIGZyb20gIi9Vc2Vycy9hbm5lLXNvcGhpZXJveS9Eb3dubG9hZHMvTWFpbnNhaWwvbWFpbnNhaWwtbWFpbnRlbmFuY2Uvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIuanMiOwppbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gIi9Vc2Vycy9hbm5lLXNvcGhpZXJveS9Eb3dubG9hZHMvTWFpbnNhaWwvbWFpbnNhaWwtbWFpbnRlbmFuY2Uvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrLmpzIjsKaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICIvVXNlcnMvYW5uZS1zb3BoaWVyb3kvRG93bmxvYWRzL01haW5zYWlsL21haW5zYWlsLW1haW50ZW5hbmNlL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcy5qcyI7CmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gIi9Vc2Vycy9hbm5lLXNvcGhpZXJveS9Eb3dubG9hZHMvTWFpbnNhaWwvbWFpbnNhaWwtbWFpbnRlbmFuY2Uvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qcyI7CmltcG9ydCBfaW5oZXJpdHMgZnJvbSAiL1VzZXJzL2FubmUtc29waGllcm95L0Rvd25sb2Fkcy9NYWluc2FpbC9tYWluc2FpbC1tYWludGVuYW5jZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHMuanMiOwppbXBvcnQgX2NyZWF0ZVN1cGVyIGZyb20gIi9Vc2Vycy9hbm5lLXNvcGhpZXJveS9Eb3dubG9hZHMvTWFpbnNhaWwvbWFpbnNhaWwtbWFpbnRlbmFuY2Uvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZVN1cGVyLmpzIjsKaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tICIvVXNlcnMvYW5uZS1zb3BoaWVyb3kvRG93bmxvYWRzL01haW5zYWlsL21haW5zYWlsLW1haW50ZW5hbmNlL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmNvbmNhdC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNvcnQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maWx0ZXIuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0IHsgX19kZWNvcmF0ZSB9IGZyb20gInRzbGliIjsKaW1wb3J0IHsgQ29tcG9uZW50LCBNaXhpbnMgfSBmcm9tICd2dWUtcHJvcGVydHktZGVjb3JhdG9yJzsKaW1wb3J0IEJhc2VNaXhpbiBmcm9tICdAL2NvbXBvbmVudHMvbWl4aW5zL2Jhc2UnOwppbXBvcnQgU2V0dGluZ3NSb3cgZnJvbSAnQC9jb21wb25lbnRzL3NldHRpbmdzL1NldHRpbmdzUm93LnZ1ZSc7Cgp2YXIgU2V0dGluZ3NDb250cm9sVGFiID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfTWl4aW5zKSB7CiAgX2luaGVyaXRzKFNldHRpbmdzQ29udHJvbFRhYiwgX01peGlucyk7CgogIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoU2V0dGluZ3NDb250cm9sVGFiKTsKCiAgZnVuY3Rpb24gU2V0dGluZ3NDb250cm9sVGFiKCkgewogICAgdmFyIF90aGlzOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTZXR0aW5nc0NvbnRyb2xUYWIpOwoKICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykgewogICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldOwogICAgfQoKICAgIF90aGlzID0gX3N1cGVyLmNhbGwuYXBwbHkoX3N1cGVyLCBbdGhpc10uY29uY2F0KGFyZ3MpKTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICIkcmVmcyIsIHZvaWQgMCk7CgogICAgcmV0dXJuIF90aGlzOwogIH0KCiAgX2NyZWF0ZUNsYXNzKFNldHRpbmdzQ29udHJvbFRhYiwgW3sKICAgIGtleTogImNvbnRyb2xTdHlsZXMiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiBbewogICAgICAgIHRleHQ6IHRoaXMuJHQoJ1NldHRpbmdzLkNvbnRyb2xUYWIuQmFycycpLAogICAgICAgIHZhbHVlOiAnYmFycycKICAgICAgfSwgewogICAgICAgIHRleHQ6IHRoaXMuJHQoJ1NldHRpbmdzLkNvbnRyb2xUYWIuQ2lyY2xlJyksCiAgICAgICAgdmFsdWU6ICdjaXJjbGUnCiAgICAgIH0sIHsKICAgICAgICB0ZXh0OiB0aGlzLiR0KCdTZXR0aW5ncy5Db250cm9sVGFiLkNyb3NzJyksCiAgICAgICAgdmFsdWU6ICdjcm9zcycKICAgICAgfV07CiAgICB9CiAgfSwgewogICAga2V5OiAiY29udHJvbFN0eWxlIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB2YXIgX3RoaXMkJHN0b3JlJHN0YXRlJGd1OwoKICAgICAgcmV0dXJuIChfdGhpcyQkc3RvcmUkc3RhdGUkZ3UgPSB0aGlzLiRzdG9yZS5zdGF0ZS5ndWkuY29udHJvbC5zdHlsZSkgIT09IG51bGwgJiYgX3RoaXMkJHN0b3JlJHN0YXRlJGd1ICE9PSB2b2lkIDAgPyBfdGhpcyQkc3RvcmUkc3RhdGUkZ3UgOiAnYmFyJzsKICAgIH0sCiAgICBzZXQ6IGZ1bmN0aW9uIHNldChuZXdWYWwpIHsKICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2d1aS9zYXZlU2V0dGluZycsIHsKICAgICAgICBuYW1lOiAnY29udHJvbC5zdHlsZScsCiAgICAgICAgdmFsdWU6IG5ld1ZhbAogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZXZlcnNlWCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLmd1aS5jb250cm9sLnJldmVyc2VYOwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KG5ld1ZhbCkgewogICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgnZ3VpL3NhdmVTZXR0aW5nJywgewogICAgICAgIG5hbWU6ICdjb250cm9sLnJldmVyc2VYJywKICAgICAgICB2YWx1ZTogbmV3VmFsCiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogInJldmVyc2VZIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUuZ3VpLmNvbnRyb2wucmV2ZXJzZVk7CiAgICB9LAogICAgc2V0OiBmdW5jdGlvbiBzZXQobmV3VmFsKSB7CiAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdndWkvc2F2ZVNldHRpbmcnLCB7CiAgICAgICAgbmFtZTogJ2NvbnRyb2wucmV2ZXJzZVknLAogICAgICAgIHZhbHVlOiBuZXdWYWwKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAicmV2ZXJzZVoiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS5ndWkuY29udHJvbC5yZXZlcnNlWjsKICAgIH0sCiAgICBzZXQ6IGZ1bmN0aW9uIHNldChuZXdWYWwpIHsKICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2d1aS9zYXZlU2V0dGluZycsIHsKICAgICAgICBuYW1lOiAnY29udHJvbC5yZXZlcnNlWicsCiAgICAgICAgdmFsdWU6IG5ld1ZhbAogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJmZWVkcmF0ZVhZIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUuZ3VpLmNvbnRyb2wuZmVlZHJhdGVYWTsKICAgIH0sCiAgICBzZXQ6IGZ1bmN0aW9uIHNldChuZXdWYWwpIHsKICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2d1aS9zYXZlU2V0dGluZycsIHsKICAgICAgICBuYW1lOiAnY29udHJvbC5mZWVkcmF0ZVhZJywKICAgICAgICB2YWx1ZTogbmV3VmFsCiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogImZlZWRyYXRlWiIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLmd1aS5jb250cm9sLmZlZWRyYXRlWjsKICAgIH0sCiAgICBzZXQ6IGZ1bmN0aW9uIHNldChuZXdWYWwpIHsKICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2d1aS9zYXZlU2V0dGluZycsIHsKICAgICAgICBuYW1lOiAnY29udHJvbC5mZWVkcmF0ZVonLAogICAgICAgIHZhbHVlOiBuZXdWYWwKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAic3RlcHNBbGwiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHZhciBzdGVwcyA9IHRoaXMuJHN0b3JlLnN0YXRlLmd1aS5jb250cm9sLnN0ZXBzQWxsOwogICAgICByZXR1cm4gKHN0ZXBzICE9PSBudWxsICYmIHN0ZXBzICE9PSB2b2lkIDAgPyBzdGVwcyA6IFtdKS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7CiAgICAgICAgcmV0dXJuIGIgLSBhOwogICAgICB9KTsKICAgIH0sCiAgICBzZXQ6IGZ1bmN0aW9uIHNldChuZXdWYWwpIHsKICAgICAgdmFyIGFic1N0ZXBzID0gW107CgogICAgICB2YXIgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIobmV3VmFsKSwKICAgICAgICAgIF9zdGVwOwoKICAgICAgdHJ5IHsKICAgICAgICBmb3IgKF9pdGVyYXRvci5zKCk7ICEoX3N0ZXAgPSBfaXRlcmF0b3IubigpKS5kb25lOykgewogICAgICAgICAgdmFyIHZhbHVlID0gX3N0ZXAudmFsdWU7CiAgICAgICAgICBhYnNTdGVwcy5wdXNoKE1hdGguYWJzKHZhbHVlKSk7CiAgICAgICAgfQogICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICBfaXRlcmF0b3IuZShlcnIpOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIF9pdGVyYXRvci5mKCk7CiAgICAgIH0KCiAgICAgIHZhciBzdGVwcyA9IGFic1N0ZXBzLmZpbHRlcih0aGlzLm9ubHlVbmlxdWUpOwogICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgnZ3VpL3NhdmVTZXR0aW5nJywgewogICAgICAgIG5hbWU6ICdjb250cm9sLnN0ZXBzQWxsJywKICAgICAgICB2YWx1ZTogc3RlcHMKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAic3RlcHNYWSIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgdmFyIHN0ZXBzID0gdGhpcy4kc3RvcmUuc3RhdGUuZ3VpLmNvbnRyb2wuc3RlcHNYWTsKICAgICAgcmV0dXJuIHN0ZXBzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsKICAgICAgICByZXR1cm4gYiAtIGE7CiAgICAgIH0pOwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KG5ld1ZhbCkgewogICAgICB2YXIgYWJzU3RlcHMgPSBbXTsKCiAgICAgIHZhciBfaXRlcmF0b3IyID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIobmV3VmFsKSwKICAgICAgICAgIF9zdGVwMjsKCiAgICAgIHRyeSB7CiAgICAgICAgZm9yIChfaXRlcmF0b3IyLnMoKTsgIShfc3RlcDIgPSBfaXRlcmF0b3IyLm4oKSkuZG9uZTspIHsKICAgICAgICAgIHZhciB2YWx1ZSA9IF9zdGVwMi52YWx1ZTsKICAgICAgICAgIGFic1N0ZXBzLnB1c2goTWF0aC5hYnModmFsdWUpKTsKICAgICAgICB9CiAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgIF9pdGVyYXRvcjIuZShlcnIpOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIF9pdGVyYXRvcjIuZigpOwogICAgICB9CgogICAgICB2YXIgc3RlcHMgPSBhYnNTdGVwcy5maWx0ZXIodGhpcy5vbmx5VW5pcXVlKTsKICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2d1aS9zYXZlU2V0dGluZycsIHsKICAgICAgICBuYW1lOiAnY29udHJvbC5zdGVwc1hZJywKICAgICAgICB2YWx1ZTogc3RlcHMKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAic3RlcHNaIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB2YXIgc3RlcHMgPSB0aGlzLiRzdG9yZS5zdGF0ZS5ndWkuY29udHJvbC5zdGVwc1o7CiAgICAgIHJldHVybiBzdGVwcy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7CiAgICAgICAgcmV0dXJuIGIgLSBhOwogICAgICB9KTsKICAgIH0sCiAgICBzZXQ6IGZ1bmN0aW9uIHNldChuZXdWYWwpIHsKICAgICAgdmFyIGFic1N0ZXBzID0gW107CgogICAgICB2YXIgX2l0ZXJhdG9yMyA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKG5ld1ZhbCksCiAgICAgICAgICBfc3RlcDM7CgogICAgICB0cnkgewogICAgICAgIGZvciAoX2l0ZXJhdG9yMy5zKCk7ICEoX3N0ZXAzID0gX2l0ZXJhdG9yMy5uKCkpLmRvbmU7KSB7CiAgICAgICAgICB2YXIgdmFsdWUgPSBfc3RlcDMudmFsdWU7CiAgICAgICAgICBhYnNTdGVwcy5wdXNoKE1hdGguYWJzKHZhbHVlKSk7CiAgICAgICAgfQogICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICBfaXRlcmF0b3IzLmUoZXJyKTsKICAgICAgfSBmaW5hbGx5IHsKICAgICAgICBfaXRlcmF0b3IzLmYoKTsKICAgICAgfQoKICAgICAgdmFyIHN0ZXBzID0gYWJzU3RlcHMuZmlsdGVyKHRoaXMub25seVVuaXF1ZSk7CiAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdndWkvc2F2ZVNldHRpbmcnLCB7CiAgICAgICAgbmFtZTogJ2NvbnRyb2wuc3RlcHNaJywKICAgICAgICB2YWx1ZTogc3RlcHMKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAic3RlcHNDaXJjbGVYWSIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgdmFyIHN0ZXBzID0gdGhpcy4kc3RvcmUuc3RhdGUuZ3VpLmNvbnRyb2wuc3RlcHNDaXJjbGVYWTsKICAgICAgcmV0dXJuIHN0ZXBzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsKICAgICAgICByZXR1cm4gYiAtIGE7CiAgICAgIH0pOwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KG5ld1ZhbCkgewogICAgICB2YXIgYWJzU3RlcHMgPSBbXTsKCiAgICAgIHZhciBfaXRlcmF0b3I0ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIobmV3VmFsKSwKICAgICAgICAgIF9zdGVwNDsKCiAgICAgIHRyeSB7CiAgICAgICAgZm9yIChfaXRlcmF0b3I0LnMoKTsgIShfc3RlcDQgPSBfaXRlcmF0b3I0Lm4oKSkuZG9uZTspIHsKICAgICAgICAgIHZhciB2YWx1ZSA9IF9zdGVwNC52YWx1ZTsKICAgICAgICAgIGFic1N0ZXBzLnB1c2goTWF0aC5hYnModmFsdWUpKTsKICAgICAgICB9CiAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgIF9pdGVyYXRvcjQuZShlcnIpOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIF9pdGVyYXRvcjQuZigpOwogICAgICB9CgogICAgICB2YXIgc3RlcHMgPSBhYnNTdGVwcy5maWx0ZXIodGhpcy5vbmx5VW5pcXVlKTsKICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2d1aS9zYXZlU2V0dGluZycsIHsKICAgICAgICBuYW1lOiAnY29udHJvbC5zdGVwc0NpcmNsZVhZJywKICAgICAgICB2YWx1ZTogc3RlcHMKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAic3RlcHNDaXJjbGVaIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB2YXIgc3RlcHMgPSB0aGlzLiRzdG9yZS5zdGF0ZS5ndWkuY29udHJvbC5zdGVwc0NpcmNsZVo7CiAgICAgIHJldHVybiBzdGVwcy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7CiAgICAgICAgcmV0dXJuIGIgLSBhOwogICAgICB9KTsKICAgIH0sCiAgICBzZXQ6IGZ1bmN0aW9uIHNldChuZXdWYWwpIHsKICAgICAgdmFyIGFic1N0ZXBzID0gW107CgogICAgICB2YXIgX2l0ZXJhdG9yNSA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKG5ld1ZhbCksCiAgICAgICAgICBfc3RlcDU7CgogICAgICB0cnkgewogICAgICAgIGZvciAoX2l0ZXJhdG9yNS5zKCk7ICEoX3N0ZXA1ID0gX2l0ZXJhdG9yNS5uKCkpLmRvbmU7KSB7CiAgICAgICAgICB2YXIgdmFsdWUgPSBfc3RlcDUudmFsdWU7CiAgICAgICAgICBhYnNTdGVwcy5wdXNoKE1hdGguYWJzKHZhbHVlKSk7CiAgICAgICAgfQogICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICBfaXRlcmF0b3I1LmUoZXJyKTsKICAgICAgfSBmaW5hbGx5IHsKICAgICAgICBfaXRlcmF0b3I1LmYoKTsKICAgICAgfQoKICAgICAgdmFyIHN0ZXBzID0gYWJzU3RlcHMuZmlsdGVyKHRoaXMub25seVVuaXF1ZSk7CiAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdndWkvc2F2ZVNldHRpbmcnLCB7CiAgICAgICAgbmFtZTogJ2NvbnRyb2wuc3RlcHNDaXJjbGVaJywKICAgICAgICB2YWx1ZTogc3RlcHMKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZmVlZGFtb3VudHNFIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB2YXIgc3RlcHMgPSB0aGlzLiRzdG9yZS5zdGF0ZS5ndWkuY29udHJvbC5leHRydWRlci5mZWVkYW1vdW50czsKICAgICAgcmV0dXJuIHN0ZXBzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsKICAgICAgICByZXR1cm4gYiAtIGE7CiAgICAgIH0pOwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KG5ld1ZhbCkgewogICAgICB2YXIgYWJzQW1vdW50cyA9IFtdOwoKICAgICAgdmFyIF9pdGVyYXRvcjYgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihuZXdWYWwpLAogICAgICAgICAgX3N0ZXA2OwoKICAgICAgdHJ5IHsKICAgICAgICBmb3IgKF9pdGVyYXRvcjYucygpOyAhKF9zdGVwNiA9IF9pdGVyYXRvcjYubigpKS5kb25lOykgewogICAgICAgICAgdmFyIHZhbHVlID0gX3N0ZXA2LnZhbHVlOwogICAgICAgICAgYWJzQW1vdW50cy5wdXNoKE1hdGguYWJzKHZhbHVlKSk7CiAgICAgICAgfQogICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICBfaXRlcmF0b3I2LmUoZXJyKTsKICAgICAgfSBmaW5hbGx5IHsKICAgICAgICBfaXRlcmF0b3I2LmYoKTsKICAgICAgfQoKICAgICAgdmFyIGFtb3VudHMgPSBhYnNBbW91bnRzLmZpbHRlcih0aGlzLm9ubHlVbmlxdWUpOwogICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgnZ3VpL3NhdmVTZXR0aW5nJywgewogICAgICAgIG5hbWU6ICdjb250cm9sLmV4dHJ1ZGVyLmZlZWRhbW91bnRzJywKICAgICAgICB2YWx1ZTogYW1vdW50cwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJmZWVkcmF0ZXNFIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB2YXIgc3RlcHMgPSB0aGlzLiRzdG9yZS5zdGF0ZS5ndWkuY29udHJvbC5leHRydWRlci5mZWVkcmF0ZXM7CiAgICAgIHJldHVybiBzdGVwcy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7CiAgICAgICAgcmV0dXJuIGIgLSBhOwogICAgICB9KTsKICAgIH0sCiAgICBzZXQ6IGZ1bmN0aW9uIHNldChuZXdWYWwpIHsKICAgICAgdmFyIGFic1JhdGVzID0gW107CgogICAgICB2YXIgX2l0ZXJhdG9yNyA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKG5ld1ZhbCksCiAgICAgICAgICBfc3RlcDc7CgogICAgICB0cnkgewogICAgICAgIGZvciAoX2l0ZXJhdG9yNy5zKCk7ICEoX3N0ZXA3ID0gX2l0ZXJhdG9yNy5uKCkpLmRvbmU7KSB7CiAgICAgICAgICB2YXIgdmFsdWUgPSBfc3RlcDcudmFsdWU7CiAgICAgICAgICBhYnNSYXRlcy5wdXNoKE1hdGguYWJzKHZhbHVlKSk7CiAgICAgICAgfQogICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICBfaXRlcmF0b3I3LmUoZXJyKTsKICAgICAgfSBmaW5hbGx5IHsKICAgICAgICBfaXRlcmF0b3I3LmYoKTsKICAgICAgfQoKICAgICAgdmFyIHJhdGVzID0gYWJzUmF0ZXMuZmlsdGVyKHRoaXMub25seVVuaXF1ZSk7CiAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdndWkvc2F2ZVNldHRpbmcnLCB7CiAgICAgICAgbmFtZTogJ2NvbnRyb2wuZXh0cnVkZXIuZmVlZHJhdGVzJywKICAgICAgICB2YWx1ZTogcmF0ZXMKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiYmx1ckZlZWRyYXRlWFkiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGJsdXJGZWVkcmF0ZVhZKCkgewogICAgICBpZiAoISh0aGlzLmZlZWRyYXRlWFkgPiAwKSkgdGhpcy5mZWVkcmF0ZVhZID0gMTAwOwogICAgfQogIH0sIHsKICAgIGtleTogImJsdXJGZWVkcmF0ZVoiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGJsdXJGZWVkcmF0ZVooKSB7CiAgICAgIGlmICghKHRoaXMuZmVlZHJhdGVaID4gMCkpIHRoaXMuZmVlZHJhdGVaID0gMjU7CiAgICB9CiAgfSwgewogICAga2V5OiAib25seVVuaXF1ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gb25seVVuaXF1ZSh2YWx1ZSwgaW5kZXgsIHNlbGYpIHsKICAgICAgcmV0dXJuIHNlbGYuaW5kZXhPZih2YWx1ZSkgPT09IGluZGV4OwogICAgfQogIH0sIHsKICAgIGtleTogIm1vdW50ZWQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7CiAgICAgIHRoaXMuJHJlZnMuZm9ybUNvbnRyb2xFeHRydWRlci52YWxpZGF0ZSgpOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFNldHRpbmdzQ29udHJvbFRhYjsKfShNaXhpbnMoQmFzZU1peGluKSk7CgpTZXR0aW5nc0NvbnRyb2xUYWIgPSBfX2RlY29yYXRlKFtDb21wb25lbnQoewogIGNvbXBvbmVudHM6IHsKICAgIFNldHRpbmdzUm93OiBTZXR0aW5nc1JvdwogIH0KfSldLCBTZXR0aW5nc0NvbnRyb2xUYWIpOwpleHBvcnQgZGVmYXVsdCBTZXR0aW5nc0NvbnRyb2xUYWI7"},null]}