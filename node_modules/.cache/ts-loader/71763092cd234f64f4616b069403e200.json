{"remainingRequest":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/babel-loader/lib/index.js!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/ts-loader/index.js??ref--15-2!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--14-0!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/store/printer/tempHistory/actions.ts","dependencies":[{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/store/printer/tempHistory/actions.ts","mtime":1644874918000},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js","mtime":1645990064605},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/babel-loader/lib/index.js","mtime":1645990067759},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/ts-loader/index.js","mtime":1645990068168},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1645990065243}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--14-0!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/store/printer/tempHistory/actions.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    colorArray,\n    colorChamber,\n    colorHeaterBed,\n    datasetInterval,\n    datasetTypes,\n    datasetTypesInPercents\n} from '@/store/variables'\nimport {ActionTree} from 'vuex'\nimport {\n    PrinterTempHistoryState,\n    PrinterTempHistoryStateSerie,\n    PrinterTempHistoryStateSourceEntry\n} from '@/store/printer/tempHistory/types'\nimport {RootState} from '@/store/types'\n\nexport const actions: ActionTree<PrinterTempHistoryState, RootState> = {\n    reset({ commit, state }) {\n        if (state.updateSourceInterval !== null)\n            clearInterval(state.updateSourceInterval)\n\n        commit('reset')\n    },\n\n    init({ commit, rootGetters, dispatch }, payload) {\n        window.console.debug('init printer/tempHistory')\n        dispatch('reset')\n\n        const now = new Date()\n        const allSensors = rootGetters['printer/getAvailableSensors'] ?? []\n        const maxHistory = rootGetters['server/getConfig']('server', 'temperature_store_size') || 1200\n\n        if (payload !== undefined) {\n            if ('requestParams' in payload) delete payload.requestParams\n\n            const objectKeys = Object.keys(payload)\n            // eslint-disable-next-line\n\t\t\tconst importData: any = {}\n\n            objectKeys.forEach((key: string) => {\n                if (allSensors.includes(key)) {\n                    const datasetValues = payload[key]\n                    datasetTypes.forEach((datasetKey) => {\n                        if (datasetKey+'s' in datasetValues) {\n                            const length = maxHistory - datasetValues[datasetKey+'s'].length\n                            datasetValues[datasetKey+'s'] = [...Array.from({ length }, () => 0), ...datasetValues[datasetKey+'s']]\n                        }\n                    })\n\n                    importData[key] = {...datasetValues}\n                } else delete payload[key]\n            })\n\n            //add missing heaters/sensors\n            allSensors.forEach((key: string) => {\n                if (!(key in payload)) {\n                    const keySplits = key.split(' ')\n                    const sensorType = keySplits[0]\n\n                    const addValues: { temperatures: number[], targets?: number[], power?: number[], speed?: number[] } = {\n                        temperatures: Array(maxHistory).fill(0)\n                    }\n\n                    if (['heater_bed', 'heater_generic'].includes(sensorType) || sensorType.startsWith('extruder')) {\n                        addValues.targets = Array(maxHistory).fill(0)\n                        addValues.power = Array(maxHistory).fill(0)\n                    } else if (['temperature_fan'].includes(sensorType)) {\n                        addValues.targets = Array(maxHistory).fill(0)\n                        addValues.speed = Array(maxHistory).fill(0)\n                    }\n\n                    importData[key] = {...addValues}\n                }\n            })\n\n            const tempDataset = []\n            for (let i = 0; i < maxHistory; i++) {\n                const tmpDataset: PrinterTempHistoryStateSourceEntry = {\n                    date: new Date(now.getTime() - (1000 * (maxHistory - i)))\n                }\n\n                Object.keys(importData).forEach((key) => {\n                    let name = key\n                    if (key.includes(' ')) name = key.split(' ')[1]\n\n                    datasetTypes.forEach((attrKey) => {\n                        if (attrKey === 'temperature') tmpDataset[name] = importData[key]['temperatures'][i]\n                        else if (attrKey+'s' in importData[key]) tmpDataset[name+'-'+attrKey] = importData[key][attrKey+'s'][i]\n                    })\n                })\n\n                tempDataset.push(tmpDataset)\n            }\n\n            commit('setInitSource', tempDataset)\n\n            const tempDatasetKeys = Object.keys(tempDataset[0]).filter((tmp) => tmp !== 'date')\n            const masterDatasetKeys = tempDatasetKeys.filter((tmp) => {\n                if (tmp.startsWith('_')) return false\n                if (tmp.lastIndexOf('-') > -1) {\n                    const suffix = tmp.slice(tmp.lastIndexOf('-') + 1)\n                    return !['target', 'power'].includes(suffix)\n                }\n\n                return true\n            }).sort()\n            const series: PrinterTempHistoryStateSerie[] = []\n            let colorNumber = 0\n\n            masterDatasetKeys.forEach((name: string) => {\n                let color = rootGetters['gui/getDatasetValue']({ name: name, type: 'color' })\n\n                if (!color) {\n                    switch (name) {\n                    case 'heater_bed':\n                        color = colorHeaterBed\n                        break\n\n                    case 'chamber':\n                        color = colorChamber\n                        break\n\n                    default:\n                        color = colorArray[colorNumber]\n                        colorNumber++\n                        break\n                    }\n                }\n\n                const serie: PrinterTempHistoryStateSerie = {\n                    id: series.length + 1,\n                    color: color,\n                    type: 'line',\n                    name: name,\n                    encode: { x: 'date', y: name },\n                    animation: false,\n                    yAxisIndex: 0,\n                    lineStyle: {\n                        color: color,\n                        width: 2,\n                        opacity: 0.9,\n                    },\n                    showSymbol: false,\n                    emphasis: {\n                        lineStyle: {\n                            color: color,\n                            width: 2,\n                            opacity: 0.9\n                        }\n                    },\n                }\n\n                series.push(serie)\n\n                datasetTypes.forEach((attrKey) => {\n                    const subName = name+'-'+attrKey\n\n                    if (tempDatasetKeys.includes(subName)) {\n                        const subSerie: PrinterTempHistoryStateSerie = {\n                            id: series.length + 1,\n                            color: color,\n                            type: 'line',\n                            name: subName,\n                            encode: { x: 'date', y: subName },\n                            animation: false,\n                            yAxisIndex: 0,\n                            lineStyle: {\n                                color: color,\n                                width: 2,\n                                opacity: 0.1,\n                            },\n                            showSymbol: false,\n                            emphasis: {\n                                lineStyle: {\n                                    color: color,\n                                    width: 2,\n                                    opacity: 0.1\n                                }\n                            },\n                        }\n\n                        if (attrKey === 'target') {\n                            subSerie.lineStyle.width = 0\n                            subSerie.emphasis.lineStyle.width = 0\n\n                            subSerie.areaStyle = {\n                                color: color,\n                                opacity: 0.1\n                            }\n\n                            subSerie.emphasis.areaStyle = {\n                                color: color,\n                                opacity: 0.1\n                            }\n                        } else if (datasetTypesInPercents.includes(attrKey)) {\n                            subSerie.yAxisIndex = 1\n\n                            subSerie.lineStyle.width = 1.5\n                            subSerie.lineStyle.opacity = 0.75\n                            subSerie.lineStyle.type = 'dotted'\n                            subSerie.emphasis.lineStyle.width = 1.5\n                            subSerie.emphasis.lineStyle.opacity = 0.75\n                            subSerie.emphasis.lineStyle.type = 'dotted'\n                        }\n\n                        series.push(subSerie)\n                    }\n                })\n            })\n\n            commit('setInitSeries', series)\n\n            const updateSourceInterval = setInterval(() => {\n                dispatch('updateSource')\n            }, datasetInterval)\n\n            commit('setUpdateSourceInterval', updateSourceInterval)\n        }\n    },\n\n    async updateSource({ commit, rootState, rootGetters, state }) {\n        /*if (state.timeLastUpdate !== null) {\n            const t0 = performance.now()\n            window.console.debug('update Source', t0-state.timeLastUpdate)\n        }*/\n\n\n        if (rootState?.printer?.heaters?.available_sensors?.length) {\n            const now = new Date()\n\n            if (state.source.length) {\n                const lastEntry = state.source[state.source.length - 1]\n                const secondsBefore = lastEntry.date.getSeconds()\n                const secondsAfter = now.getSeconds()\n                const diff = now.getTime() - lastEntry.date.getTime()\n\n                if (secondsBefore === secondsAfter && diff < 1000) return\n            }\n\n            const data: PrinterTempHistoryStateSourceEntry = {\n                date: now\n            }\n\n            rootState.printer.heaters.available_sensors.forEach((key: string) => {\n                let name = key\n                if (key.includes(' ')) name = key.split(' ')[1]\n\n                if (rootState.printer && rootState.printer[key]) {\n                    if ('temperature' in rootState.printer[key]) data[name] = rootState.printer[key].temperature\n                    if ('target' in rootState.printer[key]) data[name+'-target'] = Math.round(rootState.printer[key].target * 10) / 10\n                    if ('power' in rootState.printer[key]) data[name+'-power'] = Math.round(rootState.printer[key].power * 1000) / 1000\n                    if ('speed' in rootState.printer[key]) data[name+'-speed'] = Math.round(rootState.printer[key].speed * 1000) / 1000\n                }\n            })\n\n            await commit('addToSource', {\n                data: data,\n                maxHistory: rootGetters['server/getConfig']('server', 'temperature_store_size') || 1200\n            })\n        }\n\n        //commit('saveLastDate', performance.now())\n    },\n}"],"sourceRoot":""}]}