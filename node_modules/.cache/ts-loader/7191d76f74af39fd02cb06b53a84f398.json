{"remainingRequest":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/thread-loader/dist/cjs.js!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/babel-loader/lib/index.js!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/ts-loader/index.js??ref--15-3!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/components/settings/SettingsPresetsTab.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/components/settings/SettingsPresetsTab.vue","mtime":1644874918000},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js","mtime":1645990064605},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/thread-loader/dist/cjs.js","mtime":1645990064416},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/babel-loader/lib/index.js","mtime":1645990067759},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/ts-loader/index.js","mtime":1645990068168},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js","mtime":1645990064605},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1645990069130}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSAiL1VzZXJzL2FubmUtc29waGllcm95L0Rvd25sb2Fkcy9NYWluc2FpbC9tYWluc2FpbC1tYWludGVuYW5jZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMi5qcyI7CmltcG9ydCBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlciBmcm9tICIvVXNlcnMvYW5uZS1zb3BoaWVyb3kvRG93bmxvYWRzL01haW5zYWlsL21haW5zYWlsLW1haW50ZW5hbmNlL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyLmpzIjsKaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICIvVXNlcnMvYW5uZS1zb3BoaWVyb3kvRG93bmxvYWRzL01haW5zYWlsL21haW5zYWlsLW1haW50ZW5hbmNlL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjay5qcyI7CmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAiL1VzZXJzL2FubmUtc29waGllcm95L0Rvd25sb2Fkcy9NYWluc2FpbC9tYWluc2FpbC1tYWludGVuYW5jZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3MuanMiOwppbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tICIvVXNlcnMvYW5uZS1zb3BoaWVyb3kvRG93bmxvYWRzL01haW5zYWlsL21haW5zYWlsLW1haW50ZW5hbmNlL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanMiOwppbXBvcnQgX2luaGVyaXRzIGZyb20gIi9Vc2Vycy9hbm5lLXNvcGhpZXJveS9Eb3dubG9hZHMvTWFpbnNhaWwvbWFpbnNhaWwtbWFpbnRlbmFuY2Uvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzLmpzIjsKaW1wb3J0IF9jcmVhdGVTdXBlciBmcm9tICIvVXNlcnMvYW5uZS1zb3BoaWVyb3kvRG93bmxvYWRzL01haW5zYWlsL21haW5zYWlsLW1haW50ZW5hbmNlL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVTdXBlci5qcyI7CmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSAiL1VzZXJzL2FubmUtc29waGllcm95L0Rvd25sb2Fkcy9NYWluc2FpbC9tYWluc2FpbC1tYWludGVuYW5jZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHkuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5jb25jYXQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maW5kLWluZGV4LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmtleXMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLml0ZXJhdG9yLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc2xpY2UuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuam9pbi5qcyI7CmltcG9ydCB7IF9fZGVjb3JhdGUgfSBmcm9tICJ0c2xpYiI7CmltcG9ydCB7IGNvbnZlcnROYW1lIH0gZnJvbSAnQC9wbHVnaW5zL2hlbHBlcnMnOwppbXBvcnQgeyBDb21wb25lbnQsIE1peGlucyB9IGZyb20gJ3Z1ZS1wcm9wZXJ0eS1kZWNvcmF0b3InOwppbXBvcnQgQmFzZU1peGluIGZyb20gJy4uL21peGlucy9iYXNlJzsKaW1wb3J0IFNldHRpbmdzUm93IGZyb20gJ0AvY29tcG9uZW50cy9zZXR0aW5ncy9TZXR0aW5nc1Jvdy52dWUnOwoKdmFyIFNldHRpbmdzUHJlc2V0c1RhYiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX01peGlucykgewogIF9pbmhlcml0cyhTZXR0aW5nc1ByZXNldHNUYWIsIF9NaXhpbnMpOwoKICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKFNldHRpbmdzUHJlc2V0c1RhYik7CgogIGZ1bmN0aW9uIFNldHRpbmdzUHJlc2V0c1RhYigpIHsKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2V0dGluZ3NQcmVzZXRzVGFiKTsKCiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHsKICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTsKICAgIH0KCiAgICBfdGhpcyA9IF9zdXBlci5jYWxsLmFwcGx5KF9zdXBlciwgW3RoaXNdLmNvbmNhdChhcmdzKSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAiY29udmVydE5hbWUiLCBjb252ZXJ0TmFtZSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAiZm9ybSIsIHsKICAgICAgYm9vbDogZmFsc2UsCiAgICAgIHZhbGlkOiBmYWxzZSwKICAgICAgbmFtZTogJycsCiAgICAgIGdjb2RlOiAnJywKICAgICAgaWQ6IG51bGwsCiAgICAgIGJvb2xJbnZhbGlkTWluOiBmYWxzZSwKICAgICAgdmFsdWVzOiB7fQogICAgfSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAiY29vbGRvd25Gb3JtIiwgewogICAgICBib29sOiBmYWxzZSwKICAgICAgdmFsaWQ6IGZhbHNlLAogICAgICBnY29kZTogJycKICAgIH0pOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgInJ1bGVzIiwgewogICAgICByZXF1aXJlZDogZnVuY3Rpb24gcmVxdWlyZWQodmFsdWUpIHsKICAgICAgICByZXR1cm4gdmFsdWUgIT09ICcnIHx8ICdyZXF1aXJlZCc7CiAgICAgIH0sCiAgICAgIHVuaXF1ZTogZnVuY3Rpb24gdW5pcXVlKHZhbHVlKSB7CiAgICAgICAgcmV0dXJuICFfdGhpcy5leGlzdHNQcmVzZXROYW1lKHZhbHVlKSB8fCAnTmFtZSBhbHJlYWR5IGV4aXN0cyc7CiAgICAgIH0KICAgIH0pOwoKICAgIHJldHVybiBfdGhpczsKICB9CgogIF9jcmVhdGVDbGFzcyhTZXR0aW5nc1ByZXNldHNUYWIsIFt7CiAgICBrZXk6ICJwcmVzZXRzIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB2YXIgX3RoaXMkJHN0b3JlJGdldHRlcnMkOwoKICAgICAgcmV0dXJuIChfdGhpcyQkc3RvcmUkZ2V0dGVycyQgPSB0aGlzLiRzdG9yZS5nZXR0ZXJzWydndWkvcHJlc2V0cy9nZXRQcmVzZXRzJ10pICE9PSBudWxsICYmIF90aGlzJCRzdG9yZSRnZXR0ZXJzJCAhPT0gdm9pZCAwID8gX3RoaXMkJHN0b3JlJGdldHRlcnMkIDogW107CiAgICB9CiAgfSwgewogICAga2V5OiAiaGVhdGVycyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgdmFyIF90aGlzJCRzdG9yZSRnZXR0ZXJzJDI7CgogICAgICByZXR1cm4gKF90aGlzJCRzdG9yZSRnZXR0ZXJzJDIgPSB0aGlzLiRzdG9yZS5nZXR0ZXJzWydwcmludGVyL2dldEhlYXRlcnMnXSkgIT09IG51bGwgJiYgX3RoaXMkJHN0b3JlJGdldHRlcnMkMiAhPT0gdm9pZCAwID8gX3RoaXMkJHN0b3JlJGdldHRlcnMkMiA6IFtdOwogICAgfQogIH0sIHsKICAgIGtleTogInRlbXBlcmF0dXJlRmFucyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgdmFyIF90aGlzJCRzdG9yZSRnZXR0ZXJzJDM7CgogICAgICByZXR1cm4gKF90aGlzJCRzdG9yZSRnZXR0ZXJzJDMgPSB0aGlzLiRzdG9yZS5nZXR0ZXJzWydwcmludGVyL2dldFRlbXBlcmF0dXJlRmFucyddKSAhPT0gbnVsbCAmJiBfdGhpcyQkc3RvcmUkZ2V0dGVycyQzICE9PSB2b2lkIDAgPyBfdGhpcyQkc3RvcmUkZ2V0dGVycyQzIDogW107CiAgICB9CiAgfSwgewogICAga2V5OiAiY29vbGRvd25HY29kZSIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLmdldHRlcnNbJ2d1aS9wcmVzZXRzL2dldENvb2xkb3duR2NvZGUnXTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJleGlzdHNQcmVzZXROYW1lIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBleGlzdHNQcmVzZXROYW1lKG5hbWUpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICByZXR1cm4gdGhpcy5wcmVzZXRzLmZpbmRJbmRleChmdW5jdGlvbiAocHJlc2V0KSB7CiAgICAgICAgcmV0dXJuIHByZXNldC5uYW1lID09PSBuYW1lICYmIHByZXNldC5pZCAhPT0gX3RoaXMyLmZvcm0uaWQ7CiAgICAgIH0pICE9PSAtMTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRTdWJUaXRsZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U3ViVGl0bGUocHJlc2V0KSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwoKICAgICAgdmFyIG91dHB1dCA9IFtdOwogICAgICBPYmplY3Qua2V5cyhwcmVzZXQudmFsdWVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICB2YXIgdmFsdWVzID0gcHJlc2V0LnZhbHVlc1trZXldOwoKICAgICAgICBpZiAodmFsdWVzLmJvb2wpIHsKICAgICAgICAgIHZhciBuYW1lID0ga2V5LmluZGV4T2YoJyAnKSA/IGtleS5zbGljZShrZXkuaW5kZXhPZignICcpICsgMSkgOiBrZXk7CiAgICAgICAgICBvdXRwdXQucHVzaChfdGhpczMuY29udmVydE5hbWUobmFtZSkgKyAnOiAnICsgdmFsdWVzLnZhbHVlICsgJ8KwQycpOwogICAgICAgIH0KICAgICAgfSk7CiAgICAgIGlmIChwcmVzZXQuZ2NvZGUpIG91dHB1dC5wdXNoKHRoaXMuJHQoJ1NldHRpbmdzLlByZXNldHNUYWIuQ3VzdG9tR0NvZGUnKS50b1N0cmluZygpKTsKICAgICAgcmV0dXJuIG91dHB1dC5qb2luKCcsICcpOwogICAgfQogIH0sIHsKICAgIGtleTogImNyZWF0ZVByZXNldCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlUHJlc2V0KCkgewogICAgICB0aGlzLmNsZWFyRm9ybSgpOwogICAgICB0aGlzLmZvcm0uYm9vbCA9IHRydWU7CiAgICB9CiAgfSwgewogICAga2V5OiAiY2xlYXJGb3JtIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjbGVhckZvcm0oKSB7CiAgICAgIHRoaXMuZm9ybS5ib29sID0gZmFsc2U7CiAgICAgIHRoaXMuZm9ybS5pZCA9IG51bGw7CiAgICAgIHRoaXMuZm9ybS5uYW1lID0gJyc7CiAgICAgIHRoaXMuZm9ybS5nY29kZSA9ICcnOwogICAgICB0aGlzLmZvcm0uYm9vbEludmFsaWRNaW4gPSBmYWxzZTsKICAgICAgdGhpcy5mb3JtLnZhbHVlcyA9IHt9OwoKICAgICAgdmFyIF9pdGVyYXRvciA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHRoaXMuaGVhdGVycyksCiAgICAgICAgICBfc3RlcDsKCiAgICAgIHRyeSB7CiAgICAgICAgZm9yIChfaXRlcmF0b3IucygpOyAhKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZTspIHsKICAgICAgICAgIHZhciBoZWF0ZXIgPSBfc3RlcC52YWx1ZTsKICAgICAgICAgIHRoaXMuZm9ybS52YWx1ZXNbaGVhdGVyLm5hbWVdID0gewogICAgICAgICAgICBib29sOiB0cnVlLAogICAgICAgICAgICB2YWx1ZTogMCwKICAgICAgICAgICAgdHlwZTogJ2hlYXRlcicKICAgICAgICAgIH07CiAgICAgICAgfQogICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICBfaXRlcmF0b3IuZShlcnIpOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIF9pdGVyYXRvci5mKCk7CiAgICAgIH0KCiAgICAgIHZhciBfaXRlcmF0b3IyID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIodGhpcy50ZW1wZXJhdHVyZUZhbnMpLAogICAgICAgICAgX3N0ZXAyOwoKICAgICAgdHJ5IHsKICAgICAgICBmb3IgKF9pdGVyYXRvcjIucygpOyAhKF9zdGVwMiA9IF9pdGVyYXRvcjIubigpKS5kb25lOykgewogICAgICAgICAgdmFyIGZhbiA9IF9zdGVwMi52YWx1ZTsKICAgICAgICAgIHRoaXMuZm9ybS52YWx1ZXNbJ3RlbXBlcmF0dXJlX2ZhbiAnICsgZmFuLm5hbWVdID0gewogICAgICAgICAgICBib29sOiB0cnVlLAogICAgICAgICAgICB2YWx1ZTogMCwKICAgICAgICAgICAgdHlwZTogJ3RlbXBlcmF0dXJlX2ZhbicKICAgICAgICAgIH07CiAgICAgICAgfQogICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICBfaXRlcmF0b3IyLmUoZXJyKTsKICAgICAgfSBmaW5hbGx5IHsKICAgICAgICBfaXRlcmF0b3IyLmYoKTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogImVkaXRQcmVzZXQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGVkaXRQcmVzZXQocHJlc2V0KSB7CiAgICAgIHZhciBfcHJlc2V0JGlkOwoKICAgICAgdGhpcy5mb3JtLm5hbWUgPSBwcmVzZXQubmFtZTsKICAgICAgdGhpcy5mb3JtLmlkID0gKF9wcmVzZXQkaWQgPSBwcmVzZXQuaWQpICE9PSBudWxsICYmIF9wcmVzZXQkaWQgIT09IHZvaWQgMCA/IF9wcmVzZXQkaWQgOiBudWxsOwogICAgICB0aGlzLmZvcm0uZ2NvZGUgPSBwcmVzZXQuZ2NvZGU7CiAgICAgIHRoaXMuZm9ybS52YWx1ZXMgPSB7fTsKCiAgICAgIHZhciBfaXRlcmF0b3IzID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIodGhpcy5oZWF0ZXJzKSwKICAgICAgICAgIF9zdGVwMzsKCiAgICAgIHRyeSB7CiAgICAgICAgZm9yIChfaXRlcmF0b3IzLnMoKTsgIShfc3RlcDMgPSBfaXRlcmF0b3IzLm4oKSkuZG9uZTspIHsKICAgICAgICAgIHZhciBoZWF0ZXIgPSBfc3RlcDMudmFsdWU7CiAgICAgICAgICBpZiAoaGVhdGVyLm5hbWUgaW4gcHJlc2V0LnZhbHVlcykgdGhpcy5mb3JtLnZhbHVlc1toZWF0ZXIubmFtZV0gPSBfb2JqZWN0U3ByZWFkKHt9LCBwcmVzZXQudmFsdWVzW2hlYXRlci5uYW1lXSk7ZWxzZSB0aGlzLmZvcm0udmFsdWVzW2hlYXRlci5uYW1lXSA9IHsKICAgICAgICAgICAgYm9vbDogZmFsc2UsCiAgICAgICAgICAgIHZhbHVlOiAwLAogICAgICAgICAgICB0eXBlOiAnaGVhdGVyJwogICAgICAgICAgfTsKICAgICAgICB9CiAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgIF9pdGVyYXRvcjMuZShlcnIpOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIF9pdGVyYXRvcjMuZigpOwogICAgICB9CgogICAgICB2YXIgX2l0ZXJhdG9yNCA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHRoaXMudGVtcGVyYXR1cmVGYW5zKSwKICAgICAgICAgIF9zdGVwNDsKCiAgICAgIHRyeSB7CiAgICAgICAgZm9yIChfaXRlcmF0b3I0LnMoKTsgIShfc3RlcDQgPSBfaXRlcmF0b3I0Lm4oKSkuZG9uZTspIHsKICAgICAgICAgIHZhciBmYW4gPSBfc3RlcDQudmFsdWU7CiAgICAgICAgICBpZiAoJ3RlbXBlcmF0dXJlX2ZhbiAnICsgZmFuLm5hbWUgaW4gcHJlc2V0LnZhbHVlcykgdGhpcy5mb3JtLnZhbHVlc1sndGVtcGVyYXR1cmVfZmFuICcgKyBmYW4ubmFtZV0gPSBfb2JqZWN0U3ByZWFkKHt9LCBwcmVzZXQudmFsdWVzWyd0ZW1wZXJhdHVyZV9mYW4gJyArIGZhbi5uYW1lXSk7ZWxzZSB0aGlzLmZvcm0udmFsdWVzWyd0ZW1wZXJhdHVyZV9mYW4gJyArIGZhbi5uYW1lXSA9IHsKICAgICAgICAgICAgYm9vbDogZmFsc2UsCiAgICAgICAgICAgIHZhbHVlOiAwLAogICAgICAgICAgICB0eXBlOiAndGVtcGVyYXR1cmVfZmFuJwogICAgICAgICAgfTsKICAgICAgICB9CiAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgIF9pdGVyYXRvcjQuZShlcnIpOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIF9pdGVyYXRvcjQuZigpOwogICAgICB9CgogICAgICB0aGlzLmZvcm0uYm9vbCA9IHRydWU7CiAgICB9CiAgfSwgewogICAga2V5OiAic2F2ZVByZXNldCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc2F2ZVByZXNldCgpIHsKICAgICAgdmFyIHNldFZhbHVlcyA9IDA7CgogICAgICBmb3IgKHZhciBfaSA9IDAsIF9PYmplY3Qka2V5cyA9IE9iamVjdC5rZXlzKHRoaXMuZm9ybS52YWx1ZXMpOyBfaSA8IF9PYmplY3Qka2V5cy5sZW5ndGg7IF9pKyspIHsKICAgICAgICB2YXIga2V5ID0gX09iamVjdCRrZXlzW19pXTsKICAgICAgICBpZiAodGhpcy5mb3JtLnZhbHVlc1trZXldLmJvb2wpIHNldFZhbHVlcysrOwogICAgICB9CgogICAgICBpZiAodGhpcy5mb3JtLmdjb2RlLmxlbmd0aCkgc2V0VmFsdWVzKys7CiAgICAgIGlmIChzZXRWYWx1ZXMgPT09IDApIHRoaXMuZm9ybS5ib29sSW52YWxpZE1pbiA9IHRydWU7ZWxzZSBpZiAodGhpcy5mb3JtLnZhbGlkKSB7CiAgICAgICAgdmFyIHByZXNldCA9IHsKICAgICAgICAgIG5hbWU6IHRoaXMuZm9ybS5uYW1lLAogICAgICAgICAgZ2NvZGU6IHRoaXMuZm9ybS5nY29kZSwKICAgICAgICAgIHZhbHVlczogdGhpcy5mb3JtLnZhbHVlcwogICAgICAgIH07CgogICAgICAgIGlmICh0aGlzLmZvcm0uaWQgIT09IG51bGwpIHsKICAgICAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdndWkvcHJlc2V0cy91cGRhdGUnLCB7CiAgICAgICAgICAgIGlkOiB0aGlzLmZvcm0uaWQsCiAgICAgICAgICAgIHZhbHVlczogcHJlc2V0CiAgICAgICAgICB9KTsKICAgICAgICB9IGVsc2UgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2d1aS9wcmVzZXRzL3N0b3JlJywgewogICAgICAgICAgdmFsdWVzOiBwcmVzZXQKICAgICAgICB9KTsKCiAgICAgICAgdGhpcy5jbGVhckZvcm0oKTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogImVkaXRDb29sZG93biIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZWRpdENvb2xkb3duKCkgewogICAgICB0aGlzLmNvb2xkb3duRm9ybS5nY29kZSA9IHRoaXMuY29vbGRvd25HY29kZTsKICAgICAgdGhpcy5jb29sZG93bkZvcm0uYm9vbCA9IHRydWU7CiAgICB9CiAgfSwgewogICAga2V5OiAic2F2ZUNvb2xkb3duIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzYXZlQ29vbGRvd24oKSB7CiAgICAgIGlmICh0aGlzLmNvb2xkb3duRm9ybS52YWxpZCkgewogICAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdndWkvcHJlc2V0cy9zYXZlU2V0dGluZycsIHsKICAgICAgICAgIG5hbWU6ICdjb29sZG93bkdjb2RlJywKICAgICAgICAgIHZhbHVlOiB0aGlzLmNvb2xkb3duRm9ybS5nY29kZQogICAgICAgIH0pOwogICAgICAgIHRoaXMuY29vbGRvd25Gb3JtLmJvb2wgPSBmYWxzZTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogImRlbGV0ZVByZXNldCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZGVsZXRlUHJlc2V0KGlkKSB7CiAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdndWkvcHJlc2V0cy9kZWxldGUnLCBpZCk7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gU2V0dGluZ3NQcmVzZXRzVGFiOwp9KE1peGlucyhCYXNlTWl4aW4pKTsKClNldHRpbmdzUHJlc2V0c1RhYiA9IF9fZGVjb3JhdGUoW0NvbXBvbmVudCh7CiAgY29tcG9uZW50czogewogICAgU2V0dGluZ3NSb3c6IFNldHRpbmdzUm93CiAgfQp9KV0sIFNldHRpbmdzUHJlc2V0c1RhYik7CmV4cG9ydCBkZWZhdWx0IFNldHRpbmdzUHJlc2V0c1RhYjs="},null]}