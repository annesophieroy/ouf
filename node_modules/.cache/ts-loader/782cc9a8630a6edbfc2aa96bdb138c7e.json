{"remainingRequest":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/thread-loader/dist/cjs.js!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/babel-loader/lib/index.js!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/ts-loader/index.js??ref--15-3!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/App.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/App.vue","mtime":1644874918000},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js","mtime":1645990064605},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/thread-loader/dist/cjs.js","mtime":1645990064416},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/babel-loader/lib/index.js","mtime":1645990067759},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/ts-loader/index.js","mtime":1645990068168},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js","mtime":1645990064605},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1645990069130}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gIi9Vc2Vycy9hbm5lLXNvcGhpZXJveS9Eb3dubG9hZHMvTWFpbnNhaWwvbWFpbnNhaWwtbWFpbnRlbmFuY2Uvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXkuanMiOwppbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gIi9Vc2Vycy9hbm5lLXNvcGhpZXJveS9Eb3dubG9hZHMvTWFpbnNhaWwvbWFpbnNhaWwtbWFpbnRlbmFuY2Uvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrLmpzIjsKaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICIvVXNlcnMvYW5uZS1zb3BoaWVyb3kvRG93bmxvYWRzL01haW5zYWlsL21haW5zYWlsLW1haW50ZW5hbmNlL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcy5qcyI7CmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gIi9Vc2Vycy9hbm5lLXNvcGhpZXJveS9Eb3dubG9hZHMvTWFpbnNhaWwvbWFpbnNhaWwtbWFpbnRlbmFuY2Uvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qcyI7CmltcG9ydCBfaW5oZXJpdHMgZnJvbSAiL1VzZXJzL2FubmUtc29waGllcm95L0Rvd25sb2Fkcy9NYWluc2FpbC9tYWluc2FpbC1tYWludGVuYW5jZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHMuanMiOwppbXBvcnQgX2NyZWF0ZVN1cGVyIGZyb20gIi9Vc2Vycy9hbm5lLXNvcGhpZXJveS9Eb3dubG9hZHMvTWFpbnNhaWwvbWFpbnNhaWwtbWFpbnRlbmFuY2Uvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZVN1cGVyLmpzIjsKaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tICIvVXNlcnMvYW5uZS1zb3BoaWVyb3kvRG93bmxvYWRzL01haW5zYWlsL21haW5zYWlsLW1haW50ZW5hbmNlL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmNvbmNhdC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maWxsLmpzIjsKaW1wb3J0IHsgX19kZWNvcmF0ZSB9IGZyb20gInRzbGliIjsKaW1wb3J0IENvbXBvbmVudCBmcm9tICd2dWUtY2xhc3MtY29tcG9uZW50JzsKaW1wb3J0IFRoZVNpZGViYXIgZnJvbSAnQC9jb21wb25lbnRzL1RoZVNpZGViYXIudnVlJzsKaW1wb3J0IEJhc2VNaXhpbiBmcm9tICdAL2NvbXBvbmVudHMvbWl4aW5zL2Jhc2UnOwppbXBvcnQgVGhlVG9wYmFyIGZyb20gJ0AvY29tcG9uZW50cy9UaGVUb3BiYXIudnVlJzsKaW1wb3J0IHsgTWl4aW5zLCBXYXRjaCB9IGZyb20gJ3Z1ZS1wcm9wZXJ0eS1kZWNvcmF0b3InOwppbXBvcnQgVGhlVXBkYXRlRGlhbG9nIGZyb20gJ0AvY29tcG9uZW50cy9UaGVVcGRhdGVEaWFsb2cudnVlJzsKaW1wb3J0IFRoZUNvbm5lY3RpbmdEaWFsb2cgZnJvbSAnQC9jb21wb25lbnRzL1RoZUNvbm5lY3RpbmdEaWFsb2cudnVlJzsKaW1wb3J0IFRoZVNlbGVjdFByaW50ZXJEaWFsb2cgZnJvbSAnQC9jb21wb25lbnRzL1RoZVNlbGVjdFByaW50ZXJEaWFsb2cudnVlJzsKaW1wb3J0IFRoZUVkaXRvciBmcm9tICdAL2NvbXBvbmVudHMvVGhlRWRpdG9yLnZ1ZSc7CmltcG9ydCB7IHBhbmVsVG9vbGJhckhlaWdodCwgdG9wYmFySGVpZ2h0LCBuYXZpZ2F0aW9uSXRlbUhlaWdodCB9IGZyb20gJ0Avc3RvcmUvdmFyaWFibGVzJzsKaW1wb3J0IFRoZVRpbWVsYXBzZVJlbmRlcmluZ1NuYWNrYmFyIGZyb20gJ0AvY29tcG9uZW50cy9UaGVUaW1lbGFwc2VSZW5kZXJpbmdTbmFja2Jhci52dWUnOwoKdmFyIEFwcCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX01peGlucykgewogIF9pbmhlcml0cyhBcHAsIF9NaXhpbnMpOwoKICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKEFwcCk7CgogIGZ1bmN0aW9uIEFwcCgpIHsKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQXBwKTsKCiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHsKICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTsKICAgIH0KCiAgICBfdGhpcyA9IF9zdXBlci5jYWxsLmFwcGx5KF9zdXBlciwgW3RoaXNdLmNvbmNhdChhcmdzKSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAicGFuZWxUb29sYmFySGVpZ2h0IiwgcGFuZWxUb29sYmFySGVpZ2h0KTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJ0b3BiYXJIZWlnaHQiLCB0b3BiYXJIZWlnaHQpOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgIm5hdmlnYXRpb25JdGVtSGVpZ2h0IiwgbmF2aWdhdGlvbkl0ZW1IZWlnaHQpOwoKICAgIHJldHVybiBfdGhpczsKICB9CgogIF9jcmVhdGVDbGFzcyhBcHAsIFt7CiAgICBrZXk6ICJ0aXRsZSIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLmdldHRlcnNbJ2dldFRpdGxlJ107CiAgICB9CiAgfSwgewogICAga2V5OiAicmVtb3RlTW9kZSIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgdmFyIF90aGlzJCRzdG9yZSRzdGF0ZSRzbzsKCiAgICAgIHJldHVybiAoX3RoaXMkJHN0b3JlJHN0YXRlJHNvID0gdGhpcy4kc3RvcmUuc3RhdGUuc29ja2V0LnJlbW90ZU1vZGUpICE9PSBudWxsICYmIF90aGlzJCRzdG9yZSRzdGF0ZSRzbyAhPT0gdm9pZCAwID8gX3RoaXMkJHN0b3JlJHN0YXRlJHNvIDogZmFsc2U7CiAgICB9CiAgfSwgewogICAga2V5OiAibWFpbkJhY2tncm91bmQiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5nZXR0ZXJzWydmaWxlcy9nZXRNYWluQmFja2dyb3VuZCddOwogICAgfQogIH0sIHsKICAgIGtleTogIm1haW5TdHlsZSIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgdmFyIHN0eWxlID0gJyc7CgogICAgICBpZiAodGhpcy5tYWluQmFja2dyb3VuZCAhPT0gbnVsbCkgewogICAgICAgIHN0eWxlID0gJ2JhY2tncm91bmQtaW1hZ2U6IHVybCgnICsgdGhpcy5tYWluQmFja2dyb3VuZCArICcpOyc7CiAgICAgIH0KCiAgICAgIHJldHVybiBzdHlsZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJjdXN0b21TdHlsZXNoZWV0IiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy4kc3RvcmUuZ2V0dGVyc1snZmlsZXMvZ2V0Q3VzdG9tU3R5bGVzaGVldCddOwogICAgfQogIH0sIHsKICAgIGtleTogImN1c3RvbUZhdmljb25zIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB2YXIgX3RoaXMkJHN0b3JlJGdldHRlcnMkOwoKICAgICAgcmV0dXJuIChfdGhpcyQkc3RvcmUkZ2V0dGVycyQgPSB0aGlzLiRzdG9yZS5nZXR0ZXJzWydmaWxlcy9nZXRDdXN0b21GYXZpY29ucyddKSAhPT0gbnVsbCAmJiBfdGhpcyQkc3RvcmUkZ2V0dGVycyQgIT09IHZvaWQgMCA/IF90aGlzJCRzdG9yZSRnZXR0ZXJzJCA6IG51bGw7CiAgICB9CiAgfSwgewogICAga2V5OiAibGFuZ3VhZ2UiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS5ndWkuZ2VuZXJhbC5sYW5ndWFnZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJjdXJyZW50X2ZpbGUiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHZhciBfdGhpcyQkc3RvcmUkc3RhdGUkcHIsIF90aGlzJCRzdG9yZSRzdGF0ZSRwcjI7CgogICAgICByZXR1cm4gKF90aGlzJCRzdG9yZSRzdGF0ZSRwciA9IChfdGhpcyQkc3RvcmUkc3RhdGUkcHIyID0gdGhpcy4kc3RvcmUuc3RhdGUucHJpbnRlci5wcmludF9zdGF0cykgPT09IG51bGwgfHwgX3RoaXMkJHN0b3JlJHN0YXRlJHByMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXMkJHN0b3JlJHN0YXRlJHByMi5maWxlbmFtZSkgIT09IG51bGwgJiYgX3RoaXMkJHN0b3JlJHN0YXRlJHByICE9PSB2b2lkIDAgPyBfdGhpcyQkc3RvcmUkc3RhdGUkcHIgOiAnJzsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJsb2dvQ29sb3IiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS5ndWkudWlTZXR0aW5ncy5sb2dvOwogICAgfQogIH0sIHsKICAgIGtleTogInByaW1hcnlDb2xvciIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLmd1aS51aVNldHRpbmdzLnByaW1hcnk7CiAgICB9CiAgfSwgewogICAga2V5OiAid2FybmluZ0NvbG9yIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB2YXIgX3RoaXMkJHZ1ZXRpZnkkdGhlbWUkLCBfdGhpcyQkdnVldGlmeSwgX3RoaXMkJHZ1ZXRpZnkkdGhlbWUsIF90aGlzJCR2dWV0aWZ5JHRoZW1lJDIsIF90aGlzJCR2dWV0aWZ5JHRoZW1lJDM7CgogICAgICByZXR1cm4gKF90aGlzJCR2dWV0aWZ5JHRoZW1lJCA9IChfdGhpcyQkdnVldGlmeSA9IHRoaXMuJHZ1ZXRpZnkpID09PSBudWxsIHx8IF90aGlzJCR2dWV0aWZ5ID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX3RoaXMkJHZ1ZXRpZnkkdGhlbWUgPSBfdGhpcyQkdnVldGlmeS50aGVtZSkgPT09IG51bGwgfHwgX3RoaXMkJHZ1ZXRpZnkkdGhlbWUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfdGhpcyQkdnVldGlmeSR0aGVtZSQyID0gX3RoaXMkJHZ1ZXRpZnkkdGhlbWUuY3VycmVudFRoZW1lKSA9PT0gbnVsbCB8fCBfdGhpcyQkdnVldGlmeSR0aGVtZSQyID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX3RoaXMkJHZ1ZXRpZnkkdGhlbWUkMyA9IF90aGlzJCR2dWV0aWZ5JHRoZW1lJDIud2FybmluZykgPT09IG51bGwgfHwgX3RoaXMkJHZ1ZXRpZnkkdGhlbWUkMyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXMkJHZ1ZXRpZnkkdGhlbWUkMy50b1N0cmluZygpKSAhPT0gbnVsbCAmJiBfdGhpcyQkdnVldGlmeSR0aGVtZSQgIT09IHZvaWQgMCA/IF90aGlzJCR2dWV0aWZ5JHRoZW1lJCA6ICcjZmY4MzAwJzsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJwcmltYXJ5VGV4dENvbG9yIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB2YXIgc3BsaXRzID0gL14jPyhbYS1mXGRdezJ9KShbYS1mXGRdezJ9KShbYS1mXGRdezJ9KSQvaS5leGVjKHRoaXMucHJpbWFyeUNvbG9yKTsKCiAgICAgIGlmIChzcGxpdHMpIHsKICAgICAgICB2YXIgciA9IHBhcnNlSW50KHNwbGl0c1sxXSwgMTYpICogMC4yMTI2OwogICAgICAgIHZhciBnID0gcGFyc2VJbnQoc3BsaXRzWzJdLCAxNikgKiAwLjcxNTI7CiAgICAgICAgdmFyIGIgPSBwYXJzZUludChzcGxpdHNbM10sIDE2KSAqIDAuMDcyMjsKICAgICAgICB2YXIgcGVyY2VpdmVkTGlnaHRuZXNzID0gKHIgKyBnICsgYikgLyAyNTU7CiAgICAgICAgcmV0dXJuIHBlcmNlaXZlZExpZ2h0bmVzcyA+IDAuNyA/ICcjMjIyJyA6ICcjZmZmJzsKICAgICAgfQoKICAgICAgcmV0dXJuICcjZmZmZmZmJzsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJjc3NWYXJzIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gewogICAgICAgICctLXYtYnRuLXRleHQtcHJpbWFyeSc6IHRoaXMucHJpbWFyeVRleHRDb2xvciwKICAgICAgICAnLS1jb2xvci1wcmltYXJ5JzogdGhpcy5wcmltYXJ5Q29sb3IsCiAgICAgICAgJy0tY29sb3Itd2FybmluZyc6IHRoaXMud2FybmluZ0NvbG9yLAogICAgICAgICctLXBhbmVsLXRvb2xiYXItaWNvbi1idG4td2lkdGgnOiBwYW5lbFRvb2xiYXJIZWlnaHQgKyAncHgnLAogICAgICAgICctLXBhbmVsLXRvb2xiYXItdGV4dC1idG4taGVpZ2h0JzogcGFuZWxUb29sYmFySGVpZ2h0ICsgJ3B4JywKICAgICAgICAnLS10b3BiYXItaWNvbi1idG4td2lkdGgnOiB0b3BiYXJIZWlnaHQgKyAncHgnLAogICAgICAgICctLXNpZGViYXItbWVudS1pdGVtLWhlaWdodCc6IG5hdmlnYXRpb25JdGVtSGVpZ2h0ICsgJ3B4JwogICAgICB9OwogICAgfQogIH0sIHsKICAgIGtleTogInByaW50X3BlcmNlbnQiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiBNYXRoLnJvdW5kKHRoaXMuJHN0b3JlLmdldHRlcnNbJ3ByaW50ZXIvZ2V0UHJpbnRQZXJjZW50J10gKiAxMDApOwogICAgfQogIH0sIHsKICAgIGtleTogImxhbmd1YWdlQ2hhbmdlZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gbGFuZ3VhZ2VDaGFuZ2VkKG5ld1ZhbCkgewogICAgICB0aGlzLiRpMThuLmxvY2FsZSA9IG5ld1ZhbDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJjdXN0b21TdHlsZXNoZWV0Q2hhbmdlZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY3VzdG9tU3R5bGVzaGVldENoYW5nZWQobmV3VmFsKSB7CiAgICAgIHZhciBzdHlsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjdXN0b21TdHlsZXNoZWV0Jyk7CgogICAgICBpZiAobmV3VmFsICE9PSBudWxsICYmIHN0eWxlID09PSBudWxsKSB7CiAgICAgICAgdmFyIG5ld1N0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGluaycpOwogICAgICAgIG5ld1N0eWxlLmlkID0gJ2N1c3RvbVN0eWxlc2hlZXQnOwogICAgICAgIG5ld1N0eWxlLnR5cGUgPSAndGV4dC9jc3MnOwogICAgICAgIG5ld1N0eWxlLnJlbCA9ICdzdHlsZXNoZWV0JzsKICAgICAgICBuZXdTdHlsZS5ocmVmID0gbmV3VmFsOwogICAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQobmV3U3R5bGUpOwogICAgICB9IGVsc2UgaWYgKG5ld1ZhbCAhPT0gbnVsbCAmJiBzdHlsZSkgewogICAgICAgIHN0eWxlLnNldEF0dHJpYnV0ZSgnaHJlZicsIG5ld1ZhbCk7CiAgICAgIH0gZWxzZSBpZiAoc3R5bGUpIHN0eWxlLnJlbW92ZSgpOwogICAgfQogIH0sIHsKICAgIGtleTogImN1cnJlbnRfZmlsZUNoYW5nZWQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGN1cnJlbnRfZmlsZUNoYW5nZWQobmV3VmFsKSB7CiAgICAgIGlmIChuZXdWYWwgIT09ICcnKSB0aGlzLiRzb2NrZXQuZW1pdCgnc2VydmVyLmZpbGVzLm1ldGFkYXRhJywgewogICAgICAgIGZpbGVuYW1lOiBuZXdWYWwKICAgICAgfSwgewogICAgICAgIGFjdGlvbjogJ2ZpbGVzL2dldE1ldGFkYXRhQ3VycmVudEZpbGUnCiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogInByaW1hcnlDb2xvckNoYW5nZWQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHByaW1hcnlDb2xvckNoYW5nZWQobmV3VmFsKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgdGhpcy4kbmV4dFRpY2soZnVuY3Rpb24gKCkgewogICAgICAgIF90aGlzMi4kdnVldGlmeS50aGVtZS5jdXJyZW50VGhlbWUucHJpbWFyeSA9IG5ld1ZhbDsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZHJhd0Zhdmljb24iLAogICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXdGYXZpY29uKHZhbCkgewogICAgICB2YXIgZmF2aWNvbjE2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignbGlua1tyZWwqPVwnaWNvblwnXVtzaXplcz1cJzE2eDE2XCddJyk7CiAgICAgIHZhciBmYXZpY29uMzIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdsaW5rW3JlbCo9XCdpY29uXCddW3NpemVzPVwnMzJ4MzJcJ10nKTsKCiAgICAgIGlmIChmYXZpY29uMTYgJiYgZmF2aWNvbjMyKSB7CiAgICAgICAgaWYgKHRoaXMucHJpbnRlcklzUHJpbnRpbmcpIHsKICAgICAgICAgIHZhciBmYXZpY29uU2l6ZSA9IDY0OwogICAgICAgICAgdmFyIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpOwogICAgICAgICAgY2FudmFzLndpZHRoID0gZmF2aWNvblNpemU7CiAgICAgICAgICBjYW52YXMuaGVpZ2h0ID0gZmF2aWNvblNpemU7CiAgICAgICAgICB2YXIgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpOwogICAgICAgICAgdmFyIGNlbnRlclggPSBjYW52YXMud2lkdGggLyAyOwogICAgICAgICAgdmFyIGNlbnRlclkgPSBjYW52YXMuaGVpZ2h0IC8gMjsKICAgICAgICAgIHZhciByYWRpdXMgPSAzMjsgLy8gZHJhdyB0aGUgZ3JleSBjaXJjbGUKCiAgICAgICAgICBpZiAoY29udGV4dCkgewogICAgICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpOwogICAgICAgICAgICBjb250ZXh0Lm1vdmVUbyhjZW50ZXJYLCBjZW50ZXJZKTsKICAgICAgICAgICAgY29udGV4dC5hcmMoY2VudGVyWCwgY2VudGVyWSwgcmFkaXVzLCAwLCAyICogTWF0aC5QSSwgZmFsc2UpOwogICAgICAgICAgICBjb250ZXh0LmNsb3NlUGF0aCgpOwogICAgICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9ICcjZGRkJzsKICAgICAgICAgICAgY29udGV4dC5maWxsKCk7CiAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSAncmdiYSgyMDAsIDIwOCwgMjE4LCAwLjY2KSc7CiAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7IC8vIGRyYXcgdGhlIGdyZWVuIGNpcmNsZSBiYXNlZCBvbiBwZXJjZW50YWdlCgogICAgICAgICAgICB2YXIgc3RhcnRBbmdsZSA9IDEuNSAqIE1hdGguUEk7CiAgICAgICAgICAgIHZhciBlbmRBbmdsZSA9IDA7CiAgICAgICAgICAgIHZhciB1bml0VmFsdWUgPSAoTWF0aC5QSSAtIDAuNSAqIE1hdGguUEkpIC8gMjU7CiAgICAgICAgICAgIGlmICh2YWwgPj0gMCAmJiB2YWwgPD0gMjUpIGVuZEFuZ2xlID0gc3RhcnRBbmdsZSArIHZhbCAqIHVuaXRWYWx1ZTtlbHNlIGlmICh2YWwgPiAyNSAmJiB2YWwgPD0gNTApIGVuZEFuZ2xlID0gc3RhcnRBbmdsZSArIHZhbCAqIHVuaXRWYWx1ZTtlbHNlIGlmICh2YWwgPiA1MCAmJiB2YWwgPD0gNzUpIGVuZEFuZ2xlID0gc3RhcnRBbmdsZSArIHZhbCAqIHVuaXRWYWx1ZTtlbHNlIGlmICh2YWwgPiA3NSAmJiB2YWwgPD0gMTAwKSBlbmRBbmdsZSA9IHN0YXJ0QW5nbGUgKyB2YWwgKiB1bml0VmFsdWU7CiAgICAgICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7CiAgICAgICAgICAgIGNvbnRleHQubW92ZVRvKGNlbnRlclgsIGNlbnRlclkpOwogICAgICAgICAgICBjb250ZXh0LmFyYyhjZW50ZXJYLCBjZW50ZXJZLCByYWRpdXMsIHN0YXJ0QW5nbGUsIGVuZEFuZ2xlLCBmYWxzZSk7CiAgICAgICAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7CiAgICAgICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gdGhpcy5sb2dvQ29sb3I7CiAgICAgICAgICAgIGNvbnRleHQuZmlsbCgpOwogICAgICAgICAgICBmYXZpY29uMTYuaHJlZiA9IGNhbnZhcy50b0RhdGFVUkwoJ2ltYWdlL3BuZycpOwogICAgICAgICAgICBmYXZpY29uMzIuaHJlZiA9IGNhbnZhcy50b0RhdGFVUkwoJ2ltYWdlL3BuZycpOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSBpZiAodGhpcy5jdXN0b21GYXZpY29ucykgewogICAgICAgICAgdmFyIF90aGlzJGN1c3RvbUZhdmljb25zID0gX3NsaWNlZFRvQXJyYXkodGhpcy5jdXN0b21GYXZpY29ucywgMiksCiAgICAgICAgICAgICAgZmF2aWNvbjE2UGF0aCA9IF90aGlzJGN1c3RvbUZhdmljb25zWzBdLAogICAgICAgICAgICAgIGZhdmljb24zMlBhdGggPSBfdGhpcyRjdXN0b21GYXZpY29uc1sxXTsKCiAgICAgICAgICBmYXZpY29uMTYuaHJlZiA9IGZhdmljb24xNlBhdGg7CiAgICAgICAgICBmYXZpY29uMzIuaHJlZiA9IGZhdmljb24zMlBhdGg7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHZhciBmYXZpY29uID0gJ2RhdGE6aW1hZ2Uvc3ZnK3htbDtiYXNlNjQsJyArIGJ0b2EoJzxzdmcgdmVyc2lvbj0iMS4xIiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHhtbG5zOnhsaW5rPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIiB4PSIwcHgiIHk9IjBweCIgdmlld0JveD0iMCAwIDU5OS4zOCA1MjMuMTEiIHhtbDpzcGFjZT0icHJlc2VydmUiPicgKyAnPGc+JyArICc8cGF0aCBzdHlsZT0iZmlsbDonICsgdGhpcy5sb2dvQ29sb3IgKyAnOyIgZD0iTTM4Mi4yOSwxNDIuOThMMTMyLjk4LDUyMi44MkwwLDUyMi42OEwzNDQuMywwbDAsMEMzNTIuMTgsNDkuMDYsMzY1LjIsOTcuNjgsMzgyLjI5LDE0Mi45OCIvPicgKyAnPHBhdGggc3R5bGU9ImZpbGw6JyArIHRoaXMubG9nb0NvbG9yICsgJzsiIGQ9Ik00MTMuMjgsMjEzLjU0TDIwOC41LDUyMi45MmwxMzIuOTQsMC4xOWwxMzUuMDMtMjA2LjMzbDAsMEM0NTIuNjksMjg0LjI5LDQzMS41MywyNDkuNzcsNDEzLjI4LDIxMy41NCBMNDEzLjI4LDIxMy41NCIvPicgKyAnPHBhdGggc3R5bGU9ImZpbGw6JyArIHRoaXMubG9nb0NvbG9yICsgJzsiIGQ9Ik01OTkuMzgsNDQ3LjY5bC00OS4yNSw3NS40Mkw0MTcsNTIyLjgybDEwMS42LTE1My42N2wwLDBDNTQzLjQ4LDM5Ny4zNSw1NzAuNDksNDIzLjYxLDU5OS4zOCw0NDcuNjkgTDU5OS4zOCw0NDcuNjl6Ii8+JyArICc8L2c+JyArICc8L3N2Zz4nKTsKICAgICAgICAgIGZhdmljb24xNi5ocmVmID0gZmF2aWNvbjsKICAgICAgICAgIGZhdmljb24zMi5ocmVmID0gZmF2aWNvbjsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJjdXN0b21GYXZpY29uc0NoYW5nZWQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGN1c3RvbUZhdmljb25zQ2hhbmdlZCgpIHsKICAgICAgdGhpcy5kcmF3RmF2aWNvbih0aGlzLnByaW50X3BlcmNlbnQpOwogICAgfQogIH0sIHsKICAgIGtleTogImxvZ29Db2xvckNoYW5nZWQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGxvZ29Db2xvckNoYW5nZWQoKSB7CiAgICAgIHRoaXMuZHJhd0Zhdmljb24odGhpcy5wcmludF9wZXJjZW50KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJwcmludF9wZXJjZW50Q2hhbmdlZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcHJpbnRfcGVyY2VudENoYW5nZWQobmV3VmFsKSB7CiAgICAgIHRoaXMuZHJhd0Zhdmljb24obmV3VmFsKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJwcmludGVySXNQcmludGluZ0NoYW5nZWQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHByaW50ZXJJc1ByaW50aW5nQ2hhbmdlZCgpIHsKICAgICAgdGhpcy5kcmF3RmF2aWNvbih0aGlzLnByaW50X3BlcmNlbnQpOwogICAgfQogIH0sIHsKICAgIGtleTogImFwcEhlaWdodCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gYXBwSGVpZ2h0KCkgewogICAgICB0aGlzLiRuZXh0VGljayhmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIGRvYyA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDsKICAgICAgICBkb2Muc3R5bGUuc2V0UHJvcGVydHkoJy0tYXBwLWhlaWdodCcsIHdpbmRvdy5pbm5lckhlaWdodCArICdweCcpOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJtb3VudGVkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBtb3VudGVkKCkgewogICAgICB0aGlzLmRyYXdGYXZpY29uKHRoaXMucHJpbnRfcGVyY2VudCk7CiAgICAgIHRoaXMuYXBwSGVpZ2h0KCk7CiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLmFwcEhlaWdodCk7CiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdvcmllbnRhdGlvbmNoYW5nZScsIHRoaXMuYXBwSGVpZ2h0KTsKICAgIH0KICB9XSk7CgogIHJldHVybiBBcHA7Cn0oTWl4aW5zKEJhc2VNaXhpbikpOwoKX19kZWNvcmF0ZShbV2F0Y2goJ2xhbmd1YWdlJyldLCBBcHAucHJvdG90eXBlLCAibGFuZ3VhZ2VDaGFuZ2VkIiwgbnVsbCk7CgpfX2RlY29yYXRlKFtXYXRjaCgnY3VzdG9tU3R5bGVzaGVldCcpXSwgQXBwLnByb3RvdHlwZSwgImN1c3RvbVN0eWxlc2hlZXRDaGFuZ2VkIiwgbnVsbCk7CgpfX2RlY29yYXRlKFtXYXRjaCgnY3VycmVudF9maWxlJyldLCBBcHAucHJvdG90eXBlLCAiY3VycmVudF9maWxlQ2hhbmdlZCIsIG51bGwpOwoKX19kZWNvcmF0ZShbV2F0Y2goJ3ByaW1hcnlDb2xvcicpXSwgQXBwLnByb3RvdHlwZSwgInByaW1hcnlDb2xvckNoYW5nZWQiLCBudWxsKTsKCl9fZGVjb3JhdGUoW1dhdGNoKCdjdXN0b21GYXZpY29ucycpXSwgQXBwLnByb3RvdHlwZSwgImN1c3RvbUZhdmljb25zQ2hhbmdlZCIsIG51bGwpOwoKX19kZWNvcmF0ZShbV2F0Y2goJ2xvZ29Db2xvcicpXSwgQXBwLnByb3RvdHlwZSwgImxvZ29Db2xvckNoYW5nZWQiLCBudWxsKTsKCl9fZGVjb3JhdGUoW1dhdGNoKCdwcmludF9wZXJjZW50JyldLCBBcHAucHJvdG90eXBlLCAicHJpbnRfcGVyY2VudENoYW5nZWQiLCBudWxsKTsKCl9fZGVjb3JhdGUoW1dhdGNoKCdwcmludGVySXNQcmludGluZycpXSwgQXBwLnByb3RvdHlwZSwgInByaW50ZXJJc1ByaW50aW5nQ2hhbmdlZCIsIG51bGwpOwoKQXBwID0gX19kZWNvcmF0ZShbQ29tcG9uZW50KHsKICBjb21wb25lbnRzOiB7CiAgICBUaGVUaW1lbGFwc2VSZW5kZXJpbmdTbmFja2JhcjogVGhlVGltZWxhcHNlUmVuZGVyaW5nU25hY2tiYXIsCiAgICBUaGVFZGl0b3I6IFRoZUVkaXRvciwKICAgIFRoZVNlbGVjdFByaW50ZXJEaWFsb2c6IFRoZVNlbGVjdFByaW50ZXJEaWFsb2csCiAgICBUaGVDb25uZWN0aW5nRGlhbG9nOiBUaGVDb25uZWN0aW5nRGlhbG9nLAogICAgVGhlVXBkYXRlRGlhbG9nOiBUaGVVcGRhdGVEaWFsb2csCiAgICBUaGVUb3BiYXI6IFRoZVRvcGJhciwKICAgIFRoZVNpZGViYXI6IFRoZVNpZGViYXIKICB9Cn0pXSwgQXBwKTsKZXhwb3J0IGRlZmF1bHQgQXBwOw=="},null]}