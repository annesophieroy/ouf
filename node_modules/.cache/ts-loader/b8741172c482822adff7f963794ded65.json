{"remainingRequest":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/babel-loader/lib/index.js!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/ts-loader/index.js??ref--15-2!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--14-0!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/store/gui/actions.ts","dependencies":[{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/store/gui/actions.ts","mtime":1644874918000},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js","mtime":1645990064605},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/babel-loader/lib/index.js","mtime":1645990067759},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/ts-loader/index.js","mtime":1645990068168},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1645990065243}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--14-0!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/store/gui/actions.ts"],"names":[],"mappings":"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","sourcesContent":["import Vue from 'vue'\nimport {ActionTree} from 'vuex'\nimport {GuiState} from '@/store/gui/types'\nimport {RootState} from '@/store/types'\nimport { getDefaultState } from './index'\nimport {themeDir} from '@/store/variables'\n\nexport const actions: ActionTree<GuiState, RootState> = {\n    reset({ commit, dispatch }) {\n        commit('reset')\n\n        dispatch('console/reset')\n        dispatch('gcodehistory/reset')\n        dispatch('macros/reset')\n        dispatch('presets/reset')\n    },\n\n    init() {\n        window.console.debug('init gui')\n        Vue.$socket.emit('server.database.get_item', { namespace: 'mainsail' }, { action: 'gui/initStore'})\n    },\n\n    async initStore({ commit, dispatch, rootGetters, rootState }, payload) {\n        const baseUrl = rootGetters['socket/getUrl'] + '/server/database/item'\n        const mainsailUrl = baseUrl + '?namespace=mainsail'\n\n        if ('remoteprinters' in payload.value) {\n            if (!rootState.socket?.remoteMode) dispatch('remoteprinters/initStore', payload.value.remoteprinters.printers)\n            delete payload.value.remoteprinters\n        }\n\n        //update cooldownGcode from V2.0.1 to V2.1.0\n        if ('cooldownGcode' in payload.value) {\n            window.console.debug('update cooldownGcode to new namespace')\n            dispatch('saveSetting', { name: 'presets.cooldownGcode', value: payload.value.cooldownGcode })\n\n            await fetch(mainsailUrl+'&key=cooldownGcode', { method: 'DELETE' })\n            delete payload.value.cooldownGcode\n        }\n\n        //update presets from V2.0.1 to V2.1.0\n        if ('presets' in payload.value && Array.isArray(payload.value.presets)) {\n            window.console.debug('update presets to new namespace')\n\n            payload.value.presets.forEach((preset: any) => {\n                dispatch('presets/store', { values: preset })\n            })\n\n            delete payload.value.presets\n        }\n\n        commit('setData', payload.value)\n    },\n\n    /*\n     * Create mainsail namespace in moonraker DB and fill in default values\n     */\n    async initDb({ dispatch, rootGetters }) {\n        const baseUrl = rootGetters['socket/getUrl'] + '/server/database/item'\n\n        const urlDefault = rootGetters['socket/getUrl'] + '/server/files/config/' + themeDir + '/default.json?time=' + Date.now()\n        const responseDefault = await fetch(urlDefault)\n        let defaults: any = {}\n        if (responseDefault) {\n            defaults = await responseDefault.json()\n            if (defaults.error?.code === 404) defaults = {}\n        }\n\n        for (const key in defaults) {\n            if (['webcams', 'timelapse'].includes(key)) {\n                for (const key2 of defaults[key]) {\n                    await fetch(baseUrl, {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json'\n                        },\n                        body: JSON.stringify({\n                            namespace: key,\n                            key: key2,\n                            value: defaults[key][key2]\n                        })\n                    })\n                }\n            } else {\n                await fetch(baseUrl, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        namespace: 'mainsail',\n                        key: key,\n                        value: defaults[key]\n                    })\n                })\n            }\n        }\n\n        await fetch(baseUrl, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                namespace: 'mainsail',\n                key: 'initVersion',\n                value: rootGetters['getVersion']\n            })\n        })\n\n        dispatch('init')\n    },\n\n    saveSetting({ commit }, payload) {\n        commit('saveSetting', payload)\n\n        Vue.$socket.emit('server.database.post_item', { namespace: 'mainsail', key: payload.name, value: payload.value })\n    },\n\n    saveSettingWithoutUpload({ commit }, payload) {\n        commit('saveSetting', payload)\n    },\n\n    updateSettings(_, payload) {\n        const keyName = payload.keyName\n        let newState = payload.newVal\n        if (\n            'value' in payload &&\n            keyName in payload.value &&\n            typeof payload.value[keyName] !== 'string' &&\n            !Array.isArray(payload.value[keyName])\n        ) newState = Object.assign(payload.value[keyName], {...newState})\n\n        Vue.$socket.emit('server.database.post_item', { namespace: 'mainsail', key: keyName, value: newState })\n    },\n\n    setGcodefilesMetadata({ commit, dispatch, state }, data) {\n        commit('setGcodefilesMetadata', data)\n        dispatch('updateSettings', {\n            keyName: 'view.gcodefiles',\n            newVal: state.view.gcodefiles\n        })\n    },\n\n    setGcodefilesShowHiddenFiles({ commit, dispatch, state }, data) {\n        commit('setGcodefilesShowHiddenFiles', data)\n        dispatch('updateSettings', {\n            keyName: 'view.gcodefiles',\n            newVal: state.view.gcodefiles\n        })\n    },\n\n    setCurrentWebcam({ commit, dispatch, state }, payload) {\n        commit('setCurrentWebcam', payload)\n        dispatch('updateSettings', {\n            keyName: 'view.webcam.currentCam',\n            newVal: state.view.webcam.currentCam\n        })\n    },\n\n    setTempchartDatasetAdditionalSensorSetting({ commit, dispatch, state }, payload) {\n        commit('setTempchartDatasetAdditionalSensorSetting', payload)\n        dispatch('updateSettings', {\n            keyName: 'view.tempchart',\n            newVal: state.view.tempchart\n        })\n    },\n\n    async resetMoonrakerDB({ commit, dispatch, rootGetters }, payload) {\n        const baseUrl = rootGetters['socket/getUrl'] + '/server/database/item'\n\n        const urlDefault = rootGetters['socket/getUrl'] + '/server/files/config/' + themeDir + '/default.json?time=' + Date.now()\n        const responseDefault = await fetch(urlDefault)\n        let defaults: any = {}\n        if (responseDefault) {\n            defaults = await responseDefault.json()\n            if (defaults.error?.code === 404) defaults = {}\n        }\n\n        for (const key of payload) {\n            if (['webcams', 'timelapse'].includes(key)) {\n                const url = baseUrl + '?namespace=' + key\n\n                const response = await fetch(url)\n                const objects = await response.json()\n                if (objects?.result?.value) {\n                    for (const item of Object.keys(objects?.result?.value)) {\n                        await fetch(url+'&key='+item, { method: 'DELETE' })\n                    }\n                }\n\n                if (key in defaults) {\n                    for (const key2 of defaults[key]) {\n                        await fetch(baseUrl, {\n                            method: 'POST',\n                            headers: {\n                                'Content-Type': 'application/json'\n                            },\n                            body: JSON.stringify({\n                                namespace: key,\n                                key: key2,\n                                value: defaults[key][key2]\n                            })\n                        })\n                    }\n                }\n            } else if (key === 'history_jobs') {\n                await fetch(rootGetters['socket/getUrl'] + '/server/history/job?all=true', { method: 'DELETE' })\n            } else if (key === 'history_totals') {\n                await fetch(rootGetters['socket/getUrl'] + '/server/history/reset_totals', { method: 'POST' })\n            } else {\n                await fetch(rootGetters['socket/getUrl'] + '/server/database/item?namespace=mainsail&key=' + key, { method: 'DELETE' })\n\n                if (key in defaults) {\n                    await fetch(baseUrl, {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json'\n                        },\n                        body: JSON.stringify({\n                            namespace: 'mainsail',\n                            key: key,\n                            value: defaults[key]\n                        })\n                    })\n                }\n            }\n        }\n\n        window.location.reload()\n    },\n\n    async backupMoonrakerDB({ commit, dispatch, rootGetters }, payload) {\n        const backup: any = {}\n\n        const responseMainsail = await fetch(rootGetters['socket/getUrl'] + '/server/database/item?namespace=mainsail')\n        const objectsMainsail = await responseMainsail.json()\n        const mainsailDb = objectsMainsail?.result?.value ?? {}\n\n        for (const key of payload) {\n            if (['timelapse', 'webcams'].includes(key)) {\n                const url = rootGetters['socket/getUrl'] + '/server/database/item?namespace=' + key\n\n                const response = await fetch(url)\n                const objects = await response.json()\n                if (objects?.result?.value) backup[key] = {...objects?.result?.value}\n            } else if (key in mainsailDb) {\n                backup[key] = {...mainsailDb[key]}\n            }\n        }\n\n        const element = document.createElement('a')\n        element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(JSON.stringify(backup)))\n        element.setAttribute('download', 'backup-mainsail.json')\n        element.style.display = 'none'\n        document.body.appendChild(element)\n        element.click()\n\n        document.body.removeChild(element)\n    },\n\n    async restoreMoonrakerDB({ rootGetters }, payload) {\n        const baseUrl = rootGetters['socket/getUrl'] + '/server/database/item'\n        const mainsailUrl = baseUrl + '?namespace=mainsail'\n        const responseNamespaces = await fetch(rootGetters['socket/getUrl'] + '/server/database/list')\n        const objectsNamespaces = await responseNamespaces.json()\n        const namespacesArray = objectsNamespaces?.result?.namespaces ?? []\n        let mainsailArray: string[] = []\n\n        if (namespacesArray.includes('mainsail')) {\n            const responseMainsail = await fetch(mainsailUrl)\n            const objectsMainsail = await responseMainsail.json()\n            mainsailArray = Object.keys(objectsMainsail?.result?.value ?? {})\n        }\n\n        for (const key of payload.dbCheckboxes) {\n            if (['timelapse', 'webcams'].includes(key)) {\n                if (namespacesArray.includes(key)) {\n                    const url = baseUrl + '?namespace=' + key\n                    const response = await fetch(url)\n                    const objects = await response.json()\n                    if (objects?.result?.value) {\n                        for (const item of Object.keys(objects?.result?.value)) {\n                            await fetch(url + '&key=' + item, {method: 'DELETE'})\n                        }\n                    }\n                }\n\n                for (const key2 of Object.keys(payload.restoreObjects[key])) {\n                    const value = payload.restoreObjects[key][key2]\n                    await fetch(baseUrl, {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json'\n                        },\n                        body: JSON.stringify({\n                            namespace: key,\n                            key: key2,\n                            value\n                        })\n                    })\n                }\n            } else {\n                if (mainsailArray.includes(key)) await fetch(mainsailUrl+'&key='+key, { method: 'DELETE' })\n                await fetch(mainsailUrl, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        namespace: 'mainsail',\n                        key,\n                        value: payload.restoreObjects[key]\n                    })\n                })\n            }\n        }\n\n        window.location.reload()\n    },\n\n    setHistoryColumns({ commit, dispatch, state }, data) {\n        commit('setHistoryColumns', data)\n        dispatch('updateSettings', {\n            keyName: 'view.history',\n            newVal: state.view.history\n        })\n    },\n\n    hideStatusInHistoryList({ commit, dispatch, state }, name) {\n        const array: string[] = [...state.view.history.hidePrintStatus]\n\n        if (!array.includes(name)) {\n            array.push(name)\n            commit('setHistoryHidePrintStatus', array)\n\n            dispatch('updateSettings', {\n                keyName: 'view.history.hidePrintStatus',\n                newVal: array\n            })\n        }\n    },\n\n    saveExpandPanel({ commit, dispatch, state }, payload) {\n        if (!payload.value) commit('addClosePanel', { name: payload.name })\n        else commit('removeClosePanel', { name: payload.name })\n\n        dispatch('updateSettings', {\n            keyName: 'dashboard.nonExpandPanels',\n            newVal: state.dashboard.nonExpandPanels\n        })\n    },\n\n    showStatusInHistoryList({ commit, dispatch, state }, name) {\n        const array: string[] = [...state.view.history.hidePrintStatus]\n\n        const index = array.indexOf(name)\n        if (index !== -1) {\n            array.splice(index, 1)\n            commit('setHistoryHidePrintStatus', array)\n\n            dispatch('updateSettings', {\n                keyName: 'view.history.hidePrintStatus',\n                newVal: array\n            })\n        }\n    },\n\n    resetLayout({ dispatch }, name) {\n        const defaultState = getDefaultState()\n        // @ts-ignore\n        const newVal: any = defaultState.dashboard[name] ?? []\n\n        dispatch('saveSetting', {\n            name: 'dashboard.'+name,\n            value: newVal\n        })\n    },\n}"],"sourceRoot":""}]}