{"remainingRequest":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/thread-loader/dist/cjs.js!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/babel-loader/lib/index.js!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/ts-loader/index.js??ref--15-3!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--14-0!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/store/files/mutations.ts","dependencies":[{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/store/files/mutations.ts","mtime":1644874918000},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js","mtime":1645990064605},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/thread-loader/dist/cjs.js","mtime":1645990064416},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/babel-loader/lib/index.js","mtime":1645990067759},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/ts-loader/index.js","mtime":1645990068168},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1645990065243}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSAiL1VzZXJzL2FubmUtc29waGllcm95L0Rvd25sb2Fkcy9NYWluc2FpbC9tYWluc2FpbC1tYWludGVuYW5jZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMi5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZXhlYy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zcGxpdC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbmQtaW5kZXguanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5yZXBsYWNlLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc3BsaWNlLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZC5qcyI7CmltcG9ydCBWdWUgZnJvbSAndnVlJzsKaW1wb3J0IHsgZ2V0RGVmYXVsdFN0YXRlIH0gZnJvbSAnLi9pbmRleCc7CmltcG9ydCB7IGZpbmREaXJlY3RvcnkgfSBmcm9tICdAL3BsdWdpbnMvaGVscGVycyc7CmltcG9ydCB7IGFsbG93ZWRNZXRhZGF0YSB9IGZyb20gJ0Avc3RvcmUvdmFyaWFibGVzJzsKZXhwb3J0IHZhciBtdXRhdGlvbnMgPSB7CiAgcmVzZXQ6IGZ1bmN0aW9uIHJlc2V0KHN0YXRlKSB7CiAgICBPYmplY3QuYXNzaWduKHN0YXRlLCBnZXREZWZhdWx0U3RhdGUoKSk7CiAgfSwKICBjcmVhdGVSb290RGlyOiBmdW5jdGlvbiBjcmVhdGVSb290RGlyKHN0YXRlLCBwYXlsb2FkKSB7CiAgICBzdGF0ZS5maWxldHJlZS5wdXNoKHsKICAgICAgaXNEaXJlY3Rvcnk6IHRydWUsCiAgICAgIGZpbGVuYW1lOiBwYXlsb2FkLm5hbWUsCiAgICAgIG1vZGlmaWVkOiBuZXcgRGF0ZSgpLAogICAgICBwZXJtaXNzaW9uczogcGF5bG9hZC5wZXJtaXNzaW9ucywKICAgICAgY2hpbGRyZW5zOiBbXSwKICAgICAgZGlza191c2FnZTogewogICAgICAgIGZyZWU6IDAsCiAgICAgICAgdG90YWw6IDAsCiAgICAgICAgdXNlZDogMAogICAgICB9CiAgICB9KTsKICB9LAogIHNldE1ldGFkYXRhUmVxdWVzdGVkOiBmdW5jdGlvbiBzZXRNZXRhZGF0YVJlcXVlc3RlZChzdGF0ZSwgcGF5bG9hZCkgewogICAgdmFyIGZpbGVuYW1lID0gJ2djb2Rlcy8nICsgcGF5bG9hZC5maWxlbmFtZTsKICAgIHZhciBkaXJBcnJheSA9IGZpbGVuYW1lLnNwbGl0KCcvJyk7CiAgICBmaWxlbmFtZSA9IGRpckFycmF5W2RpckFycmF5Lmxlbmd0aCAtIDFdOwogICAgdmFyIHBhdGggPSBmaW5kRGlyZWN0b3J5KHN0YXRlLmZpbGV0cmVlLCBkaXJBcnJheSk7CiAgICB2YXIgZmlsZUluZGV4ID0gcGF0aCA9PT0gbnVsbCB8fCBwYXRoID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYXRoLmZpbmRJbmRleChmdW5jdGlvbiAoZWxlbWVudCkgewogICAgICByZXR1cm4gZWxlbWVudC5maWxlbmFtZSA9PT0gZmlsZW5hbWU7CiAgICB9KTsKCiAgICBpZiAocGF0aCAmJiBmaWxlSW5kZXggIT09IHVuZGVmaW5lZCAmJiBmaWxlSW5kZXggIT09IC0xKSB7CiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZQogICAgICB2YXIgY3VycmVudEZpbGUgPSBfb2JqZWN0U3ByZWFkKHt9LCBwYXRoW2ZpbGVJbmRleF0pOwoKICAgICAgY3VycmVudEZpbGUubWV0YWRhdGFSZXF1ZXN0ZWQgPSB0cnVlOwogICAgICBWdWUuc2V0KHBhdGgsIGZpbGVJbmRleCwgY3VycmVudEZpbGUpOwogICAgfSBlbHNlIHdpbmRvdy5jb25zb2xlLmVycm9yKCdmaWxlIG5vdCBmb3VuZCBpbiBmaWxldHJlZTogJyArIHBheWxvYWQuZmlsZW5hbWUpOwogIH0sCiAgc2V0TWV0YWRhdGE6IGZ1bmN0aW9uIHNldE1ldGFkYXRhKHN0YXRlLCBwYXlsb2FkKSB7CiAgICB2YXIgZmlsZW5hbWUgPSAnZ2NvZGVzLycgKyBwYXlsb2FkLmZpbGVuYW1lOwogICAgdmFyIGRpckFycmF5ID0gZmlsZW5hbWUuc3BsaXQoJy8nKTsKICAgIGZpbGVuYW1lID0gZGlyQXJyYXlbZGlyQXJyYXkubGVuZ3RoIC0gMV07CiAgICB2YXIgcGF0aCA9IGZpbmREaXJlY3Rvcnkoc3RhdGUuZmlsZXRyZWUsIGRpckFycmF5KTsKICAgIHZhciBmaWxlSW5kZXggPSBwYXRoID09PSBudWxsIHx8IHBhdGggPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhdGguZmluZEluZGV4KGZ1bmN0aW9uIChlbGVtZW50KSB7CiAgICAgIHJldHVybiBlbGVtZW50LmZpbGVuYW1lID09PSBmaWxlbmFtZTsKICAgIH0pOwoKICAgIGlmIChwYXRoICYmIGZpbGVJbmRleCAhPT0gdW5kZWZpbmVkICYmIGZpbGVJbmRleCAhPT0gLTEpIHsKICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lCiAgICAgIHZhciBjdXJyZW50RmlsZSA9IF9vYmplY3RTcHJlYWQoe30sIHBhdGhbZmlsZUluZGV4XSk7CgogICAgICBhbGxvd2VkTWV0YWRhdGEuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgaWYgKGtleSBpbiBwYXlsb2FkKSBjdXJyZW50RmlsZVtrZXldID0gcGF5bG9hZFtrZXldOwogICAgICB9KTsKICAgICAgY3VycmVudEZpbGUubWV0YWRhdGFSZXF1ZXN0ZWQgPSB0cnVlOwogICAgICBjdXJyZW50RmlsZS5tZXRhZGF0YVB1bGxlZCA9IHRydWU7CiAgICAgIFZ1ZS5zZXQocGF0aCwgZmlsZUluZGV4LCBjdXJyZW50RmlsZSk7CiAgICB9IGVsc2Ugd2luZG93LmNvbnNvbGUuZXJyb3IoJ2ZpbGUgbm90IGZvdW5kIGluIGZpbGV0cmVlOiAnICsgcGF5bG9hZC5maWxlbmFtZSk7CiAgfSwKICBzZXRDcmVhdGVGaWxlOiBmdW5jdGlvbiBzZXRDcmVhdGVGaWxlKHN0YXRlLCBwYXlsb2FkKSB7CiAgICB2YXIgZmlsZW5hbWUgPSBwYXlsb2FkLml0ZW0ucGF0aDsKICAgIGlmIChwYXlsb2FkLml0ZW0ucGF0aC5sYXN0SW5kZXhPZignLycpID49IDApIGZpbGVuYW1lID0gcGF5bG9hZC5pdGVtLnBhdGguc3Vic3RyKHBheWxvYWQuaXRlbS5wYXRoLmxhc3RJbmRleE9mKCcvJykpLnJlcGxhY2UoJy8nLCAnJyk7CiAgICB2YXIgcGF0aCA9IHBheWxvYWQuaXRlbS5wYXRoLnN1YnN0cigwLCBwYXlsb2FkLml0ZW0ucGF0aC5sYXN0SW5kZXhPZignLycpKTsKICAgIHZhciBwYXJlbnQgPSBmaW5kRGlyZWN0b3J5KHN0YXRlLmZpbGV0cmVlLCAocGF5bG9hZC5pdGVtLnJvb3QgKyAnLycgKyBwYXRoKS5zcGxpdCgnLycpKTsKCiAgICBpZiAocGFyZW50KSB7CiAgICAgIHZhciBpbmRleEZpbGUgPSBwYXJlbnQuZmluZEluZGV4KGZ1bmN0aW9uIChlbGVtZW50KSB7CiAgICAgICAgcmV0dXJuICFlbGVtZW50LmlzRGlyZWN0b3J5ICYmIGVsZW1lbnQuZmlsZW5hbWUgPT09IGZpbGVuYW1lOwogICAgICB9KTsKCiAgICAgIGlmIChpbmRleEZpbGUgPT09IC0xKSB7CiAgICAgICAgdmFyIG1vZGlmaWVkID0gbmV3IERhdGUocGF5bG9hZC5pdGVtLm1vZGlmaWVkICogMTAwMCk7CiAgICAgICAgcGFyZW50LnB1c2goewogICAgICAgICAgaXNEaXJlY3Rvcnk6IGZhbHNlLAogICAgICAgICAgZmlsZW5hbWU6IGZpbGVuYW1lLAogICAgICAgICAgbW9kaWZpZWQ6IG1vZGlmaWVkLAogICAgICAgICAgcGVybWlzc2lvbnM6IHBheWxvYWQuaXRlbS5wZXJtaXNzaW9ucywKICAgICAgICAgIHNpemU6IHBheWxvYWQuaXRlbS5zaXplLAogICAgICAgICAgbWV0YWRhdGFSZXF1ZXN0ZWQ6IGZhbHNlLAogICAgICAgICAgbWV0YWRhdGFQdWxsZWQ6IGZhbHNlCiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcGFyZW50W2luZGV4RmlsZV0ubW9kaWZpZWQgPSBuZXcgRGF0ZShwYXlsb2FkLml0ZW0ubW9kaWZpZWQgKiAxMDAwKTsKICAgICAgICBwYXJlbnRbaW5kZXhGaWxlXS5zaXplID0gcGF5bG9hZC5pdGVtLnNpemU7CiAgICAgICAgcGFyZW50W2luZGV4RmlsZV0ubWV0YWRhdGFSZXF1ZXN0ZWQgPSBmYWxzZTsKICAgICAgICBwYXJlbnRbaW5kZXhGaWxlXS5tZXRhZGF0YVB1bGxlZCA9IGZhbHNlOwogICAgICAgIHZhciBleHRlbnNpb24gPSBmaWxlbmFtZS5zdWJzdHIoZmlsZW5hbWUubGFzdEluZGV4T2YoJy4nKSArIDEpOwoKICAgICAgICBpZiAocGF5bG9hZC5pdGVtLnJvb3QgPT09ICdnY29kZXMnICYmIGV4dGVuc2lvbiA9PT0gJ2djb2RlJykgewogICAgICAgICAgVnVlLiRzb2NrZXQuZW1pdCgnc2VydmVyLmZpbGVzLm1ldGFkYXRhJywgewogICAgICAgICAgICBmaWxlbmFtZTogcGF5bG9hZC5pdGVtLnBhdGgKICAgICAgICAgIH0sIHsKICAgICAgICAgICAgYWN0aW9uOiAnZmlsZXMvZ2V0TWV0YWRhdGEnCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9LAogIHNldE1vdmVGaWxlOiBmdW5jdGlvbiBzZXRNb3ZlRmlsZShzdGF0ZSwgcGF5bG9hZCkgewogICAgdmFyIGZpbGVuYW1lT2xkID0gcGF5bG9hZC5zb3VyY2VfaXRlbS5wYXRoOwogICAgdmFyIHBhdGhuYW1lT2xkID0gcGF5bG9hZC5zb3VyY2VfaXRlbS5yb290OwogICAgdmFyIGxhc3RTbGFzaE9sZCA9IHBheWxvYWQuc291cmNlX2l0ZW0ucGF0aC5sYXN0SW5kZXhPZignLycpOwoKICAgIGlmIChsYXN0U2xhc2hPbGQgIT09IC0xKSB7CiAgICAgIGZpbGVuYW1lT2xkID0gcGF5bG9hZC5zb3VyY2VfaXRlbS5wYXRoLnN1YnN0cihsYXN0U2xhc2hPbGQgKyAxKTsKICAgICAgcGF0aG5hbWVPbGQgPSBwYXlsb2FkLnNvdXJjZV9pdGVtLnJvb3QgKyAnLycgKyBwYXlsb2FkLnNvdXJjZV9pdGVtLnBhdGguc3Vic3RyKDAsIGxhc3RTbGFzaE9sZCArIDEpOwogICAgfQoKICAgIHZhciBmaWxlbmFtZU5ldyA9IHBheWxvYWQuaXRlbS5wYXRoOwogICAgdmFyIHBhdGhuYW1lTmV3ID0gcGF5bG9hZC5pdGVtLnJvb3Q7CiAgICB2YXIgbGFzdFNsYXNoTmV3ID0gcGF5bG9hZC5pdGVtLnBhdGgubGFzdEluZGV4T2YoJy8nKTsKCiAgICBpZiAobGFzdFNsYXNoTmV3ICE9PSAtMSkgewogICAgICBmaWxlbmFtZU5ldyA9IHBheWxvYWQuaXRlbS5wYXRoLnN1YnN0cihsYXN0U2xhc2hOZXcgKyAxKTsKICAgICAgcGF0aG5hbWVOZXcgPSBwYXlsb2FkLml0ZW0ucm9vdCArICcvJyArIHBheWxvYWQuaXRlbS5wYXRoLnN1YnN0cigwLCBsYXN0U2xhc2hOZXcgKyAxKTsKICAgIH0KCiAgICB2YXIgcGF0aE9sZCA9IGZpbmREaXJlY3Rvcnkoc3RhdGUuZmlsZXRyZWUsIHBhdGhuYW1lT2xkLnNwbGl0KCcvJykpOwogICAgdmFyIGluZGV4RmlsZSA9IHBhdGhPbGQgPT09IG51bGwgfHwgcGF0aE9sZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGF0aE9sZC5maW5kSW5kZXgoZnVuY3Rpb24gKGVsZW1lbnQpIHsKICAgICAgcmV0dXJuIGVsZW1lbnQuZmlsZW5hbWUgPT09IGZpbGVuYW1lT2xkOwogICAgfSk7CgogICAgaWYgKGluZGV4RmlsZSAmJiBwYXRoT2xkICYmIHBhdGhPbGRbaW5kZXhGaWxlXSkgewogICAgICB2YXIgZmlsZSA9IHBhdGhPbGQuc3BsaWNlKGluZGV4RmlsZSwgMSlbMF07CiAgICAgIGZpbGUuZmlsZW5hbWUgPSBmaWxlbmFtZU5ldzsgLy9jbGVhbnVwIHRodW1ibmFpbHMgYW5kIGZvcmNlIHJlbG9hZAoKICAgICAgaWYgKHBhdGhuYW1lT2xkICE9PSBwYXRobmFtZU5ldyAmJiAnbWV0YWRhdGFQdWxsZWQnIGluIGZpbGUgJiYgZmlsZS5tZXRhZGF0YVB1bGxlZCAmJiAndGh1bWJuYWlscycgaW4gZmlsZSkgewogICAgICAgIGZpbGUubWV0YWRhdGFQdWxsZWQgPSBmYWxzZTsKICAgICAgICBkZWxldGUgZmlsZS50aHVtYm5haWxzOwogICAgICB9CgogICAgICB2YXIgbmV3UGF0aCA9IGZpbmREaXJlY3Rvcnkoc3RhdGUuZmlsZXRyZWUsIHBhdGhuYW1lTmV3LnNwbGl0KCcvJykpOwogICAgICBuZXdQYXRoID09PSBudWxsIHx8IG5ld1BhdGggPT09IHZvaWQgMCA/IHZvaWQgMCA6IG5ld1BhdGgucHVzaChmaWxlKTsKICAgIH0KICB9LAogIHNldE1vZGlmeUZpbGU6IGZ1bmN0aW9uIHNldE1vZGlmeUZpbGUoc3RhdGUsIHBheWxvYWQpIHsKICAgIHZhciBmaWxlbmFtZSA9IHBheWxvYWQuaXRlbS5wYXRoOwogICAgdmFyIGZpbGVwYXRoID0gcGF5bG9hZC5pdGVtLnJvb3Q7CiAgICB2YXIgbGFzdFNsYXNoID0gcGF5bG9hZC5pdGVtLnBhdGgubGFzdEluZGV4T2YoJy8nKTsKCiAgICBpZiAobGFzdFNsYXNoICE9PSAtMSkgewogICAgICBmaWxlbmFtZSA9IHBheWxvYWQuaXRlbS5wYXRoLnN1YnN0cihsYXN0U2xhc2ggKyAxKTsKICAgICAgZmlsZXBhdGggPSBwYXlsb2FkLml0ZW0ucm9vdCArICcvJyArIHBheWxvYWQuaXRlbS5wYXRoLnN1YnN0cigwLCBsYXN0U2xhc2ggKyAxKTsKICAgIH0KCiAgICB2YXIgcGF0aCA9IGZpbmREaXJlY3Rvcnkoc3RhdGUuZmlsZXRyZWUsIGZpbGVwYXRoLnNwbGl0KCcvJykpOwogICAgdmFyIGluZGV4RmlsZSA9IHBhdGggPT09IG51bGwgfHwgcGF0aCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGF0aC5maW5kSW5kZXgoZnVuY3Rpb24gKGVsZW1lbnQpIHsKICAgICAgcmV0dXJuIGVsZW1lbnQuZmlsZW5hbWUgPT09IGZpbGVuYW1lOwogICAgfSk7CgogICAgaWYgKGluZGV4RmlsZSAhPT0gdW5kZWZpbmVkICYmIGluZGV4RmlsZSA+IC0xICYmIHBhdGggJiYgcGF0aFtpbmRleEZpbGVdKSB7CiAgICAgIGlmICgnbWV0YWRhdGFQdWxsZWQnIGluIHBhdGhbaW5kZXhGaWxlXSAmJiBwYXRoW2luZGV4RmlsZV0ubWV0YWRhdGFQdWxsZWQpIHsKICAgICAgICBwYXRoW2luZGV4RmlsZV0ubWV0YWRhdGFQdWxsZWQgPSBmYWxzZTsKICAgICAgICBpZiAoJ3RodW1ibmFpbHMnIGluIHBhdGhbaW5kZXhGaWxlXSkgZGVsZXRlIHBhdGhbaW5kZXhGaWxlXS50aHVtYm5haWxzOwogICAgICB9CgogICAgICBwYXRoW2luZGV4RmlsZV0ubW9kaWZpZWQgPSBuZXcgRGF0ZShwYXlsb2FkLml0ZW0ubW9kaWZpZWQgKiAxMDAwKTsKICAgICAgcGF0aFtpbmRleEZpbGVdLnNpemUgPSBwYXlsb2FkLml0ZW0uc2l6ZTsKICAgIH0KICB9LAogIHNldE1vdmVEaXI6IGZ1bmN0aW9uIHNldE1vdmVEaXIoc3RhdGUsIHBheWxvYWQpIHsKICAgIHZhciBkaXJuYW1lT2xkID0gcGF5bG9hZC5zb3VyY2VfaXRlbS5wYXRoOwogICAgdmFyIHBhdGhuYW1lT2xkID0gcGF5bG9hZC5zb3VyY2VfaXRlbS5yb290OwogICAgdmFyIGxhc3RTbGFzaE9sZCA9IHBheWxvYWQuc291cmNlX2l0ZW0ucGF0aC5sYXN0SW5kZXhPZignLycpOwoKICAgIGlmIChsYXN0U2xhc2hPbGQgIT09IC0xKSB7CiAgICAgIGRpcm5hbWVPbGQgPSBwYXlsb2FkLnNvdXJjZV9pdGVtLnBhdGguc3Vic3RyKGxhc3RTbGFzaE9sZCArIDEpOwogICAgICBwYXRobmFtZU9sZCA9IHBheWxvYWQuc291cmNlX2l0ZW0ucm9vdCArICcvJyArIHBheWxvYWQuc291cmNlX2l0ZW0ucGF0aC5zdWJzdHIoMCwgbGFzdFNsYXNoT2xkICsgMSk7CiAgICB9CgogICAgdmFyIGRpcm5hbWVOZXcgPSBwYXlsb2FkLml0ZW0ucGF0aDsKICAgIHZhciBwYXRobmFtZU5ldyA9IHBheWxvYWQuaXRlbS5yb290OwogICAgdmFyIGxhc3RTbGFzaE5ldyA9IHBheWxvYWQuaXRlbS5wYXRoLmxhc3RJbmRleE9mKCcvJyk7CgogICAgaWYgKGxhc3RTbGFzaE5ldyAhPT0gLTEpIHsKICAgICAgZGlybmFtZU5ldyA9IHBheWxvYWQuaXRlbS5wYXRoLnN1YnN0cihsYXN0U2xhc2hOZXcgKyAxKTsKICAgICAgcGF0aG5hbWVOZXcgPSBwYXlsb2FkLml0ZW0ucm9vdCArICcvJyArIHBheWxvYWQuaXRlbS5wYXRoLnN1YnN0cigwLCBsYXN0U2xhc2hOZXcgKyAxKTsKICAgIH0KCiAgICB2YXIgcGF0aE9sZCA9IGZpbmREaXJlY3Rvcnkoc3RhdGUuZmlsZXRyZWUsIHBhdGhuYW1lT2xkLnNwbGl0KCcvJykpOwogICAgdmFyIGluZGV4RGlyID0gcGF0aE9sZCA9PT0gbnVsbCB8fCBwYXRoT2xkID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYXRoT2xkLmZpbmRJbmRleChmdW5jdGlvbiAoZWxlbWVudCkgewogICAgICByZXR1cm4gZWxlbWVudC5maWxlbmFtZSA9PT0gZGlybmFtZU9sZDsKICAgIH0pOwoKICAgIGlmIChpbmRleERpciAhPT0gdW5kZWZpbmVkICYmIHBhdGhPbGQgJiYgcGF0aE9sZFtpbmRleERpcl0pIHsKICAgICAgdmFyIGRpciA9IHBhdGhPbGQuc3BsaWNlKGluZGV4RGlyLCAxKVswXTsKICAgICAgZGlyLmZpbGVuYW1lID0gZGlybmFtZU5ldzsKICAgICAgdmFyIHBhdGhOZXcgPSBmaW5kRGlyZWN0b3J5KHN0YXRlLmZpbGV0cmVlLCBwYXRobmFtZU5ldy5zcGxpdCgnLycpKTsKICAgICAgcGF0aE5ldyA9PT0gbnVsbCB8fCBwYXRoTmV3ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYXRoTmV3LnB1c2goZGlyKTsKICAgIH0KICB9LAogIHNldERlbGV0ZUZpbGU6IGZ1bmN0aW9uIHNldERlbGV0ZUZpbGUoc3RhdGUsIHBheWxvYWQpIHsKICAgIHZhciBjdXJyZW50UGF0aCA9IHBheWxvYWQuaXRlbS5wYXRoLnN1YnN0cigwLCBwYXlsb2FkLml0ZW0ucGF0aC5sYXN0SW5kZXhPZignLycpKTsKICAgIHZhciBkZWxQYXRoID0gcGF5bG9hZC5pdGVtLnBhdGguc3Vic3RyKHBheWxvYWQuaXRlbS5wYXRoLmxhc3RJbmRleE9mKCcvJykgKyAxKTsKICAgIGN1cnJlbnRQYXRoID0gZmluZERpcmVjdG9yeShzdGF0ZS5maWxldHJlZSwgKHBheWxvYWQuaXRlbS5yb290ICsgJy8nICsgY3VycmVudFBhdGgpLnNwbGl0KCcvJykpOwogICAgdmFyIGluZGV4ID0gY3VycmVudFBhdGguZmluZEluZGV4KGZ1bmN0aW9uIChlbGVtZW50KSB7CiAgICAgIHJldHVybiBlbGVtZW50LmZpbGVuYW1lID09PSBkZWxQYXRoOwogICAgfSk7CiAgICBpZiAoaW5kZXggPj0gMCAmJiBjdXJyZW50UGF0aFtpbmRleF0pIGN1cnJlbnRQYXRoLnNwbGljZShpbmRleCwgMSk7CiAgfSwKICBzZXRDcmVhdGVEaXI6IGZ1bmN0aW9uIHNldENyZWF0ZURpcihzdGF0ZSwgcGF5bG9hZCkgewogICAgdmFyIGRpcm5hbWUgPSBwYXlsb2FkLml0ZW0ucGF0aC5zdWJzdHIocGF5bG9hZC5pdGVtLnBhdGgubGFzdEluZGV4T2YoJy8nKSArIDEpOwogICAgdmFyIHBhdGggPSBwYXlsb2FkLml0ZW0ucGF0aC5zdWJzdHIoMCwgcGF5bG9hZC5pdGVtLnBhdGgubGFzdEluZGV4T2YoJy8nKSk7CiAgICB2YXIgcGFyZW50ID0gZmluZERpcmVjdG9yeShzdGF0ZS5maWxldHJlZSwgKHBheWxvYWQuaXRlbS5yb290ICsgJy8nICsgcGF0aCkuc3BsaXQoJy8nKSk7CgogICAgaWYgKHBhcmVudCkgewogICAgICB2YXIgX3BheWxvYWQkaXRlbSRtb2RpZmllOwoKICAgICAgcGFyZW50LnB1c2goewogICAgICAgIGlzRGlyZWN0b3J5OiB0cnVlLAogICAgICAgIGZpbGVuYW1lOiBkaXJuYW1lLAogICAgICAgIG1vZGlmaWVkOiAoX3BheWxvYWQkaXRlbSRtb2RpZmllID0gcGF5bG9hZC5pdGVtLm1vZGlmaWVkKSAhPT0gbnVsbCAmJiBfcGF5bG9hZCRpdGVtJG1vZGlmaWUgIT09IHZvaWQgMCA/IF9wYXlsb2FkJGl0ZW0kbW9kaWZpZSA6IG5ldyBEYXRlKCksCiAgICAgICAgcGVybWlzc2lvbnM6IHBheWxvYWQuaXRlbS5wZXJtaXNzaW9ucywKICAgICAgICBjaGlsZHJlbnM6IFtdCiAgICAgIH0pOwogICAgfQogIH0sCiAgc2V0RGVsZXRlRGlyOiBmdW5jdGlvbiBzZXREZWxldGVEaXIoc3RhdGUsIHBheWxvYWQpIHsKICAgIHZhciBjdXJyZW50UGF0aCA9IHBheWxvYWQuaXRlbS5wYXRoLnN1YnN0cigwLCBwYXlsb2FkLml0ZW0ucGF0aC5sYXN0SW5kZXhPZignLycpKTsKICAgIHZhciBkZWxQYXRoID0gcGF5bG9hZC5pdGVtLnBhdGguc3Vic3RyKHBheWxvYWQuaXRlbS5wYXRoLmxhc3RJbmRleE9mKCcvJykgKyAxKTsKICAgIGN1cnJlbnRQYXRoID0gZmluZERpcmVjdG9yeShzdGF0ZS5maWxldHJlZSwgKHBheWxvYWQuaXRlbS5yb290ICsgJy8nICsgY3VycmVudFBhdGgpLnNwbGl0KCcvJykpOwogICAgdmFyIGluZGV4ID0gY3VycmVudFBhdGguZmluZEluZGV4KGZ1bmN0aW9uIChlbGVtZW50KSB7CiAgICAgIHJldHVybiBlbGVtZW50LmZpbGVuYW1lID09PSBkZWxQYXRoOwogICAgfSk7CiAgICBpZiAoaW5kZXggPj0gMCAmJiBjdXJyZW50UGF0aFtpbmRleF0pIGN1cnJlbnRQYXRoLnNwbGljZShpbmRleCwgMSk7CiAgfSwKICBzZXRSb290VXBkYXRlOiBmdW5jdGlvbiBzZXRSb290VXBkYXRlKHN0YXRlLCBwYXlsb2FkKSB7CiAgICB2YXIgX3N0YXRlJGZpbGV0cmVlJGluZGV4OwoKICAgIHZhciBpbmRleCA9IHN0YXRlLmZpbGV0cmVlLmZpbmRJbmRleChmdW5jdGlvbiAocm9vdCkgewogICAgICByZXR1cm4gcm9vdC5maWxlbmFtZSA9PT0gcGF5bG9hZC5pdGVtLnJvb3Q7CiAgICB9KTsKCiAgICBpZiAoaW5kZXggIT09IC0xICYmIChfc3RhdGUkZmlsZXRyZWUkaW5kZXggPSBzdGF0ZS5maWxldHJlZVtpbmRleF0uY2hpbGRyZW5zKSAhPT0gbnVsbCAmJiBfc3RhdGUkZmlsZXRyZWUkaW5kZXggIT09IHZvaWQgMCAmJiBfc3RhdGUkZmlsZXRyZWUkaW5kZXgubGVuZ3RoKSB7CiAgICAgIHZhciBfc3RhdGUkZmlsZXRyZWUkaW5kZXgyLCBfc3RhdGUkZmlsZXRyZWUkaW5kZXgzOwoKICAgICAgKF9zdGF0ZSRmaWxldHJlZSRpbmRleDIgPSBzdGF0ZS5maWxldHJlZVtpbmRleF0uY2hpbGRyZW5zKSA9PT0gbnVsbCB8fCBfc3RhdGUkZmlsZXRyZWUkaW5kZXgyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfc3RhdGUkZmlsZXRyZWUkaW5kZXgyLnNwbGljZSgwLCAoX3N0YXRlJGZpbGV0cmVlJGluZGV4MyA9IHN0YXRlLmZpbGV0cmVlW2luZGV4XS5jaGlsZHJlbnMpID09PSBudWxsIHx8IF9zdGF0ZSRmaWxldHJlZSRpbmRleDMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9zdGF0ZSRmaWxldHJlZSRpbmRleDMubGVuZ3RoKTsKICAgIH0KICB9LAogIHNldERpc2tVc2FnZTogZnVuY3Rpb24gc2V0RGlza1VzYWdlKHN0YXRlLCBwYXlsb2FkKSB7CiAgICB2YXIgcGFyZW50UGF0aCA9IHBheWxvYWQucGF0aC5zdWJzdHIoMCwgcGF5bG9hZC5wYXRoLmxhc3RJbmRleE9mKCcvJykpOwogICAgdmFyIHBhdGhOYW1lID0gcGF5bG9hZC5wYXRoLnN1YnN0cihwYXlsb2FkLnBhdGgubGFzdEluZGV4T2YoJy8nKSArIDEpOwogICAgdmFyIHBhcmVudCA9IGZpbmREaXJlY3Rvcnkoc3RhdGUuZmlsZXRyZWUsIHBhcmVudFBhdGguc3BsaXQoJy8nKSk7CiAgICB2YXIgZGlyZWN0b3J5ID0gcGFyZW50ID09PSBudWxsIHx8IHBhcmVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFyZW50LmZpbmQoZnVuY3Rpb24gKGVsZW1lbnQpIHsKICAgICAgcmV0dXJuIGVsZW1lbnQuaXNEaXJlY3RvcnkgJiYgZWxlbWVudC5maWxlbmFtZSA9PT0gcGF0aE5hbWU7CiAgICB9KTsKICAgIGlmIChkaXJlY3RvcnkpIFZ1ZS5zZXQoZGlyZWN0b3J5LCAnZGlza191c2FnZScsIHBheWxvYWQuZGlza191c2FnZSk7CiAgfSwKICBzZXRSb290UGVybWlzc2lvbnM6IGZ1bmN0aW9uIHNldFJvb3RQZXJtaXNzaW9ucyhzdGF0ZSwgcGF5bG9hZCkgewogICAgdmFyIHJvb3RTdGF0ZSA9IHN0YXRlLmZpbGV0cmVlLmZpbmQoZnVuY3Rpb24gKGRpcikgewogICAgICByZXR1cm4gZGlyLmZpbGVuYW1lID09PSBwYXlsb2FkLm5hbWU7CiAgICB9KTsKICAgIGlmIChyb290U3RhdGUpIFZ1ZS5zZXQocm9vdFN0YXRlLCAncGVybWlzc2lvbnMnLCBwYXlsb2FkLnBlcm1pc3Npb25zKTsKICB9Cn07"},null]}