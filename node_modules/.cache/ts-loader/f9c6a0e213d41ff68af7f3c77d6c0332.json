{"remainingRequest":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/babel-loader/lib/index.js!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/ts-loader/index.js??ref--15-2!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/components/gcodeviewer/Viewer.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/components/gcodeviewer/Viewer.vue","mtime":1644874918000},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js","mtime":1645990064605},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/babel-loader/lib/index.js","mtime":1645990067759},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/ts-loader/index.js","mtime":1645990068168},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js","mtime":1645990064605},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1645990069130}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tICIvVXNlcnMvYW5uZS1zb3BoaWVyb3kvRG93bmxvYWRzL01haW5zYWlsL21haW5zYWlsLW1haW50ZW5hbmNlL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheS5qcyI7CmltcG9ydCBfYXN5bmNUb0dlbmVyYXRvciBmcm9tICIvVXNlcnMvYW5uZS1zb3BoaWVyb3kvRG93bmxvYWRzL01haW5zYWlsL21haW5zYWlsLW1haW50ZW5hbmNlL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yLmpzIjsKaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICIvVXNlcnMvYW5uZS1zb3BoaWVyb3kvRG93bmxvYWRzL01haW5zYWlsL21haW5zYWlsLW1haW50ZW5hbmNlL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjay5qcyI7CmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAiL1VzZXJzL2FubmUtc29waGllcm95L0Rvd25sb2Fkcy9NYWluc2FpbC9tYWluc2FpbC1tYWludGVuYW5jZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3MuanMiOwppbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tICIvVXNlcnMvYW5uZS1zb3BoaWVyb3kvRG93bmxvYWRzL01haW5zYWlsL21haW5zYWlsLW1haW50ZW5hbmNlL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanMiOwppbXBvcnQgX2luaGVyaXRzIGZyb20gIi9Vc2Vycy9hbm5lLXNvcGhpZXJveS9Eb3dubG9hZHMvTWFpbnNhaWwvbWFpbnNhaWwtbWFpbnRlbmFuY2Uvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzLmpzIjsKaW1wb3J0IF9jcmVhdGVTdXBlciBmcm9tICIvVXNlcnMvYW5uZS1zb3BoaWVyb3kvRG93bmxvYWRzL01haW5zYWlsL21haW5zYWlsLW1haW50ZW5hbmNlL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVTdXBlci5qcyI7CmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSAiL1VzZXJzL2FubmUtc29waGllcm95L0Rvd25sb2Fkcy9NYWluc2FpbC9tYWluc2FpbC1tYWludGVuYW5jZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHkuanMiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmNvbmNhdC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5jbHVkZXMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaW5jbHVkZXMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zdGFydHMtd2l0aC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNsaWNlLmpzIjsKaW1wb3J0IHsgX19kZWNvcmF0ZSB9IGZyb20gInRzbGliIjsKaW1wb3J0IHsgQ29tcG9uZW50LCBNaXhpbnMsIFByb3AsIFJlZiwgV2F0Y2ggfSBmcm9tICd2dWUtcHJvcGVydHktZGVjb3JhdG9yJzsKaW1wb3J0IEJhc2VNaXhpbiBmcm9tICcuLi9taXhpbnMvYmFzZSc7IC8vIEB0cy1pZ25vcmUKCmltcG9ydCBHQ29kZVZpZXdlciBmcm9tICdAc2luZGFyaXVzL2djb2Rldmlld2VyJzsKaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJzsKaW1wb3J0IHsgZm9ybWF0RmlsZXNpemUgfSBmcm9tICdAL3BsdWdpbnMvaGVscGVycyc7CmltcG9ydCBQYW5lbCBmcm9tICdAL2NvbXBvbmVudHMvdWkvUGFuZWwudnVlJzsKdmFyIHZpZXdlciA9IG51bGw7Cgp2YXIgVmlld2VyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfTWl4aW5zKSB7CiAgX2luaGVyaXRzKFZpZXdlciwgX01peGlucyk7CgogIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoVmlld2VyKTsKCiAgZnVuY3Rpb24gVmlld2VyKCkgewogICAgdmFyIF90aGlzOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBWaWV3ZXIpOwoKICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykgewogICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldOwogICAgfQoKICAgIF90aGlzID0gX3N1cGVyLmNhbGwuYXBwbHkoX3N1cGVyLCBbdGhpc10uY29uY2F0KGFyZ3MpKTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJmb3JtYXRGaWxlc2l6ZSIsIGZvcm1hdEZpbGVzaXplKTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJpc0J1c3kiLCBmYWxzZSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAibG9hZGluZyIsIGZhbHNlKTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJsb2FkaW5nUGVyY2VudCIsIDApOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgInRyYWNraW5nIiwgZmFsc2UpOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgImxvYWRlZEZpbGUiLCBudWxsKTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJyZWxvYWRSZXF1aXJlZCIsIGZhbHNlKTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJmaWxlU2l6ZSIsIDApOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgIm1heFpTbGlkZXIiLCAxMDAwMDApOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgInpTbGlkZXIiLCBfdGhpcy5tYXhaU2xpZGVyKTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJ6U2xpY2VySGVpZ2h0IiwgMTAwKTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJyZW5kZXJRdWFsaXR5IiwgX3RoaXMucmVuZGVyUXVhbGl0aWVzWzJdKTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJkb3dubG9hZFNuYWNrYmFyIiwgewogICAgICBzdGF0dXM6IGZhbHNlLAogICAgICBmaWxlbmFtZTogJycsCiAgICAgIHBlcmNlbnQ6IDAsCiAgICAgIHNwZWVkOiAwLAogICAgICB0b3RhbDogMCwKICAgICAgY2FuY2VsVG9rZW5Tb3VyY2U6IHt9LAogICAgICBsYXN0UHJvZ3Jlc3M6IHsKICAgICAgICB0aW1lOiAwLAogICAgICAgIGxvYWRlZDogMAogICAgICB9CiAgICB9KTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJmaWxlbmFtZSIsIHZvaWQgMCk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAiZmlsZUlucHV0Iiwgdm9pZCAwKTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICIkcmVmcyIsIHZvaWQgMCk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAiY29sb3JNb2RlcyIsIFt7CiAgICAgIHRleHQ6ICdFeHRydWRlcicsCiAgICAgIHZhbHVlOiAwCiAgICB9LCB7CiAgICAgIHRleHQ6ICdGZWVkIFJhdGUnLAogICAgICB2YWx1ZTogMQogICAgfSwgewogICAgICB0ZXh0OiAnRmVhdHVyZScsCiAgICAgIHZhbHVlOiAyCiAgICB9XSk7CgogICAgcmV0dXJuIF90aGlzOwogIH0KCiAgX2NyZWF0ZUNsYXNzKFZpZXdlciwgW3sKICAgIGtleTogInJlbmRlclF1YWxpdGllcyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIFt7CiAgICAgICAgbGFiZWw6IHRoaXMuJHQoJ0dDb2RlVmlld2VyLkxvdycpLAogICAgICAgIHZhbHVlOiAyCiAgICAgIH0sIHsKICAgICAgICBsYWJlbDogdGhpcy4kdCgnR0NvZGVWaWV3ZXIuTWVkaXVtJyksCiAgICAgICAgdmFsdWU6IDMKICAgICAgfSwgewogICAgICAgIGxhYmVsOiB0aGlzLiR0KCdHQ29kZVZpZXdlci5IaWdoJyksCiAgICAgICAgdmFsdWU6IDQKICAgICAgfSwgewogICAgICAgIGxhYmVsOiB0aGlzLiR0KCdHQ29kZVZpZXdlci5VbHRyYScpLAogICAgICAgIHZhbHVlOiA1CiAgICAgIH0sIHsKICAgICAgICBsYWJlbDogdGhpcy4kdCgnR0NvZGVWaWV3ZXIuTWF4JyksCiAgICAgICAgdmFsdWU6IDYKICAgICAgfV07CiAgICB9CiAgfSwgewogICAga2V5OiAibW91bnRlZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX21vdW50ZWQgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgICAgdmFyIF90aGlzJCRzdG9yZSRzdGF0ZSRnYywgX3RoaXMkJHN0b3JlJHN0YXRlJGdjMiwgX3RoaXMkJHN0b3JlJHN0YXRlJGdjMywgX3RoaXMkJHN0b3JlJHN0YXRlJGdjNDsKCiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgdGhpcy5sb2FkZWRGaWxlID0gKF90aGlzJCRzdG9yZSRzdGF0ZSRnYyA9IChfdGhpcyQkc3RvcmUkc3RhdGUkZ2MyID0gdGhpcy4kc3RvcmUuc3RhdGUuZ2NvZGV2aWV3ZXIpID09PSBudWxsIHx8IF90aGlzJCRzdG9yZSRzdGF0ZSRnYzIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF90aGlzJCRzdG9yZSRzdGF0ZSRnYzIubG9hZGVkRmlsZUJhY2t1cCkgIT09IG51bGwgJiYgX3RoaXMkJHN0b3JlJHN0YXRlJGdjICE9PSB2b2lkIDAgPyBfdGhpcyQkc3RvcmUkc3RhdGUkZ2MgOiBudWxsOwogICAgICAgICAgICAgICAgdmlld2VyID0gKF90aGlzJCRzdG9yZSRzdGF0ZSRnYzMgPSAoX3RoaXMkJHN0b3JlJHN0YXRlJGdjNCA9IHRoaXMuJHN0b3JlLnN0YXRlLmdjb2Rldmlld2VyKSA9PT0gbnVsbCB8fCBfdGhpcyQkc3RvcmUkc3RhdGUkZ2M0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdGhpcyQkc3RvcmUkc3RhdGUkZ2M0LnZpZXdlckJhY2t1cCkgIT09IG51bGwgJiYgX3RoaXMkJHN0b3JlJHN0YXRlJGdjMyAhPT0gdm9pZCAwID8gX3RoaXMkJHN0b3JlJHN0YXRlJGdjMyA6IG51bGw7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNDsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmluaXQoKTsKCiAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuZXZlbnRMaXN0ZW5lclJlc2l6ZSk7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUsIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBtb3VudGVkKCkgewogICAgICAgIHJldHVybiBfbW91bnRlZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gbW91bnRlZDsKICAgIH0oKQogIH0sIHsKICAgIGtleTogImJlZm9yZURlc3Ryb3kiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGJlZm9yZURlc3Ryb3koKSB7CiAgICAgIGlmICh2aWV3ZXIpIHsKICAgICAgICB2aWV3ZXIuZ2NvZGVQcm9jZXNzb3IubG9hZGluZ1Byb2dyZXNzQ2FsbGJhY2sgPSBudWxsOwogICAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdnY29kZXZpZXdlci9zZXRMb2FkZWRGaWxlQmFja3VwJywgdGhpcy5sb2FkZWRGaWxlKTsKICAgICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgnZ2NvZGV2aWV3ZXIvc2V0Vmlld2VyQmFja3VwJywgdmlld2VyKTsKICAgICAgfQoKICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuZXZlbnRMaXN0ZW5lclJlc2l6ZSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZXZlbnRMaXN0ZW5lclJlc2l6ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZXZlbnRMaXN0ZW5lclJlc2l6ZSgpIHsKICAgICAgdmFyIF92aWV3ZXI7CgogICAgICAoX3ZpZXdlciA9IHZpZXdlcikgPT09IG51bGwgfHwgX3ZpZXdlciA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3ZpZXdlci5yZXNpemUoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJmaWxlUG9zaXRpb24iLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLnByaW50ZXJJc1ByaW50aW5nID8gdGhpcy4kc3RvcmUuc3RhdGUucHJpbnRlci52aXJ0dWFsX3NkY2FyZC5maWxlX3Bvc2l0aW9uIDogMDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJzZENhcmRGaWxlUGF0aCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgdmFyIF90aGlzJCRzdG9yZSRzdGF0ZSRwciwgX3RoaXMkJHN0b3JlJHN0YXRlJHByMjsKCiAgICAgIHJldHVybiAoX3RoaXMkJHN0b3JlJHN0YXRlJHByID0gKF90aGlzJCRzdG9yZSRzdGF0ZSRwcjIgPSB0aGlzLiRzdG9yZS5zdGF0ZS5wcmludGVyLnByaW50X3N0YXRzKSA9PT0gbnVsbCB8fCBfdGhpcyQkc3RvcmUkc3RhdGUkcHIyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdGhpcyQkc3RvcmUkc3RhdGUkcHIyLmZpbGVuYW1lKSAhPT0gbnVsbCAmJiBfdGhpcyQkc3RvcmUkc3RhdGUkcHIgIT09IHZvaWQgMCA/IF90aGlzJCRzdG9yZSRzdGF0ZSRwciA6ICcnOwogICAgfQogIH0sIHsKICAgIGtleTogImN1cnJlbnRQb3NpdGlvbiIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgdmFyIF90aGlzJCRzdG9yZSRzdGF0ZSRwcjMsIF90aGlzJCRzdG9yZSRzdGF0ZSRwcjQ7CgogICAgICByZXR1cm4gKF90aGlzJCRzdG9yZSRzdGF0ZSRwcjMgPSAoX3RoaXMkJHN0b3JlJHN0YXRlJHByNCA9IHRoaXMuJHN0b3JlLnN0YXRlLnByaW50ZXIubW90aW9uX3JlcG9ydCkgPT09IG51bGwgfHwgX3RoaXMkJHN0b3JlJHN0YXRlJHByNCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXMkJHN0b3JlJHN0YXRlJHByNC5saXZlX3Bvc2l0aW9uKSAhPT0gbnVsbCAmJiBfdGhpcyQkc3RvcmUkc3RhdGUkcHIzICE9PSB2b2lkIDAgPyBfdGhpcyQkc3RvcmUkc3RhdGUkcHIzIDogWzAsIDAsIDAsIDBdOwogICAgfQogIH0sIHsKICAgIGtleTogInNob3dUcmFja2luZ0J1dHRvbiIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMucHJpbnRlcklzUHJpbnRpbmcgJiYgdGhpcy5zZENhcmRGaWxlUGF0aCA9PT0gdGhpcy5sb2FkZWRGaWxlOwogICAgfQogIH0sIHsKICAgIGtleTogInByaW50aW5nX29iamVjdHMiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHZhciBfdGhpcyQkc3RvcmUkc3RhdGUkcHI1LCBfdGhpcyQkc3RvcmUkc3RhdGUkcHI2OwoKICAgICAgcmV0dXJuIChfdGhpcyQkc3RvcmUkc3RhdGUkcHI1ID0gKF90aGlzJCRzdG9yZSRzdGF0ZSRwcjYgPSB0aGlzLiRzdG9yZS5zdGF0ZS5wcmludGVyLmV4Y2x1ZGVfb2JqZWN0KSA9PT0gbnVsbCB8fCBfdGhpcyQkc3RvcmUkc3RhdGUkcHI2ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdGhpcyQkc3RvcmUkc3RhdGUkcHI2Lm9iamVjdHMpICE9PSBudWxsICYmIF90aGlzJCRzdG9yZSRzdGF0ZSRwcjUgIT09IHZvaWQgMCA/IF90aGlzJCRzdG9yZSRzdGF0ZSRwcjUgOiBbXTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJleGNsdWRlZF9vYmplY3RzIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB2YXIgX3RoaXMkJHN0b3JlJHN0YXRlJHByNywgX3RoaXMkJHN0b3JlJHN0YXRlJHByODsKCiAgICAgIHJldHVybiAoX3RoaXMkJHN0b3JlJHN0YXRlJHByNyA9IChfdGhpcyQkc3RvcmUkc3RhdGUkcHI4ID0gdGhpcy4kc3RvcmUuc3RhdGUucHJpbnRlci5leGNsdWRlX29iamVjdCkgPT09IG51bGwgfHwgX3RoaXMkJHN0b3JlJHN0YXRlJHByOCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXMkJHN0b3JlJHN0YXRlJHByOC5leGNsdWRlZF9vYmplY3RzKSAhPT0gbnVsbCAmJiBfdGhpcyQkc3RvcmUkc3RhdGUkcHI3ICE9PSB2b2lkIDAgPyBfdGhpcyQkc3RvcmUkc3RhdGUkcHI3IDogW107CiAgICB9CiAgfSwgewogICAga2V5OiAibm96emxlX2RpYW1ldGVyIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB2YXIgX3RoaXMkJHN0b3JlJHN0YXRlJHByOSwgX3RoaXMkJHN0b3JlJHN0YXRlJHByMTAsIF90aGlzJCRzdG9yZSRzdGF0ZSRwcjExLCBfdGhpcyQkc3RvcmUkc3RhdGUkcHIxMjsKCiAgICAgIHJldHVybiAoX3RoaXMkJHN0b3JlJHN0YXRlJHByOSA9IChfdGhpcyQkc3RvcmUkc3RhdGUkcHIxMCA9IHRoaXMuJHN0b3JlLnN0YXRlLnByaW50ZXIuY29uZmlnZmlsZSkgPT09IG51bGwgfHwgX3RoaXMkJHN0b3JlJHN0YXRlJHByMTAgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfdGhpcyQkc3RvcmUkc3RhdGUkcHIxMSA9IF90aGlzJCRzdG9yZSRzdGF0ZSRwcjEwLnNldHRpbmdzKSA9PT0gbnVsbCB8fCBfdGhpcyQkc3RvcmUkc3RhdGUkcHIxMSA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF90aGlzJCRzdG9yZSRzdGF0ZSRwcjEyID0gX3RoaXMkJHN0b3JlJHN0YXRlJHByMTEuZXh0cnVkZXIpID09PSBudWxsIHx8IF90aGlzJCRzdG9yZSRzdGF0ZSRwcjEyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdGhpcyQkc3RvcmUkc3RhdGUkcHIxMi5ub3p6bGVfZGlhbWV0ZXIpICE9PSBudWxsICYmIF90aGlzJCRzdG9yZSRzdGF0ZSRwcjkgIT09IHZvaWQgMCA/IF90aGlzJCRzdG9yZSRzdGF0ZSRwcjkgOiAwLjQ7CiAgICB9CiAgfSwgewogICAga2V5OiAiaW5pdCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2luaXQgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKCkgewogICAgICAgIHZhciBfdGhpcyQkc3RvcmUkc3RhdGUkZ2M1LCBfdGhpcyQkc3RvcmUkc3RhdGUkZ2M2LCBfdGhpcyQkcm91dGUkcXVlcnksIF90aGlzJCRyb3V0ZSRxdWVyeTIsIF90aGlzJCRyb3V0ZSRxdWVyeTIkZjsKCiAgICAgICAgdmFyIGNhbnZhc0VsZW1lbnQsIF92aWV3ZXIyLCBfdmlld2VyMzsKCiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGNhbnZhc0VsZW1lbnQgPSAoX3RoaXMkJHN0b3JlJHN0YXRlJGdjNSA9IChfdGhpcyQkc3RvcmUkc3RhdGUkZ2M2ID0gdGhpcy4kc3RvcmUuc3RhdGUuZ2NvZGV2aWV3ZXIpID09PSBudWxsIHx8IF90aGlzJCRzdG9yZSRzdGF0ZSRnYzYgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF90aGlzJCRzdG9yZSRzdGF0ZSRnYzYuY2FudmFzQmFja3VwKSAhPT0gbnVsbCAmJiBfdGhpcyQkc3RvcmUkc3RhdGUkZ2M1ICE9PSB2b2lkIDAgPyBfdGhpcyQkc3RvcmUkc3RhdGUkZ2M1IDogbnVsbDsKCiAgICAgICAgICAgICAgICBpZiAoIShjYW52YXNFbGVtZW50ID09PSBudWxsKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDk7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGNhbnZhc0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTsKICAgICAgICAgICAgICAgIGNhbnZhc0VsZW1lbnQuY2xhc3NOYW1lID0gJ3ZpZXdlcic7CiAgICAgICAgICAgICAgICB0aGlzLiRyZWZzLnZpZXdlckNhbnZhc0NvbnRhaW5lci5hcHBlbmRDaGlsZChjYW52YXNFbGVtZW50KTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNzsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5kaXNwYXRjaCgnZ2NvZGV2aWV3ZXIvc2V0Q2FudmFzQmFja3VwJywgY2FudmFzRWxlbWVudCk7CgogICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMTE7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICAgICAgdGhpcy4kcmVmcy52aWV3ZXJDYW52YXNDb250YWluZXIuYXBwZW5kQ2hpbGQoY2FudmFzRWxlbWVudCk7CgogICAgICAgICAgICAgICAgaWYgKChfdmlld2VyMiA9IHZpZXdlcikgIT09IG51bGwgJiYgX3ZpZXdlcjIgIT09IHZvaWQgMCAmJiBfdmlld2VyMi5nY29kZVByb2Nlc3NvcikgewogICAgICAgICAgICAgICAgICB2aWV3ZXIuZ2NvZGVQcm9jZXNzb3IudXBkYXRlRmlsZVBvc2l0aW9uKChfdmlld2VyMyA9IHZpZXdlcikgPT09IG51bGwgfHwgX3ZpZXdlcjMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF92aWV3ZXIzLmZpbGVTaXplKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgICAgIGlmICghKHZpZXdlciA9PT0gbnVsbCkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAxNDsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAxNDsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZpZXdlckluaXQoY2FudmFzRWxlbWVudCk7CgogICAgICAgICAgICAgIGNhc2UgMTQ6CiAgICAgICAgICAgICAgICB0aGlzLnJlZ2lzdGVyUHJvZ3Jlc3NDYWxsYmFjaygpOwoKICAgICAgICAgICAgICAgIGlmICghKChfdGhpcyQkcm91dGUkcXVlcnkgPSB0aGlzLiRyb3V0ZS5xdWVyeSkgIT09IG51bGwgJiYgX3RoaXMkJHJvdXRlJHF1ZXJ5ICE9PSB2b2lkIDAgJiYgX3RoaXMkJHJvdXRlJHF1ZXJ5LmZpbGVuYW1lICYmIHRoaXMubG9hZGVkRmlsZSAhPT0gKChfdGhpcyQkcm91dGUkcXVlcnkyID0gdGhpcy4kcm91dGUucXVlcnkpID09PSBudWxsIHx8IF90aGlzJCRyb3V0ZSRxdWVyeTIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfdGhpcyQkcm91dGUkcXVlcnkyJGYgPSBfdGhpcyQkcm91dGUkcXVlcnkyLmZpbGVuYW1lKSA9PT0gbnVsbCB8fCBfdGhpcyQkcm91dGUkcXVlcnkyJGYgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF90aGlzJCRyb3V0ZSRxdWVyeTIkZi50b1N0cmluZygpKSkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAyMDsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAxODsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNsZWVwKDEwMDApOwoKICAgICAgICAgICAgICBjYXNlIDE4OgogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAyMDsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxvYWRGaWxlKHRoaXMuJHJvdXRlLnF1ZXJ5LmZpbGVuYW1lLnRvU3RyaW5nKCkpOwoKICAgICAgICAgICAgICBjYXNlIDIwOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyLCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gaW5pdCgpIHsKICAgICAgICByZXR1cm4gX2luaXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGluaXQ7CiAgICB9KCkKICB9LCB7CiAgICBrZXk6ICJ2aWV3ZXJJbml0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiB2aWV3ZXJJbml0KGVsZW1lbnQpIHsKICAgICAgdmlld2VyID0gbmV3IEdDb2RlVmlld2VyKGVsZW1lbnQpOwogICAgICB2aWV3ZXIuaW5pdCgpOwogICAgICB2aWV3ZXIuc2V0QmFja2dyb3VuZENvbG9yKHRoaXMuYmFja2dyb3VuZENvbG9yKTsKICAgICAgdmlld2VyLmJlZC5zZXRCZWRDb2xvcih0aGlzLmdyaWRDb2xvcik7CiAgICAgIHZpZXdlci5zZXRDdXJzb3JWaXNpYmxpdHkodGhpcy5zaG93Q3Vyc29yKTsKICAgICAgdmlld2VyLnNldFpDbGlwUGxhbmUoMTAwMDAwMCwgLTEwMDAwMDApOwogICAgICB2aWV3ZXIuYXhlcy5zaG93KHRoaXMuc2hvd0F4ZXMpOwogICAgICB2aWV3ZXIuYmVkLnNldERlbHRhKHRoaXMua2luZW1hdGljcy5pbmNsdWRlcygnZGVsdGEnKSk7CgogICAgICBpZiAodGhpcy5iZWRNYXhTaXplICE9PSBudWxsKSB7CiAgICAgICAgdmlld2VyLmJlZC5idWlsZFZvbHVtZVsneCddLm1heCA9IHRoaXMuYmVkTWF4U2l6ZVswXTsKICAgICAgICB2aWV3ZXIuYmVkLmJ1aWxkVm9sdW1lWyd5J10ubWF4ID0gdGhpcy5iZWRNYXhTaXplWzFdOwogICAgICAgIHZpZXdlci5iZWQuYnVpbGRWb2x1bWVbJ3onXS5tYXggPSB0aGlzLmJlZE1heFNpemVbMl07CiAgICAgIH0KCiAgICAgIGlmICh0aGlzLmJlZE1pblNpemUgIT09IG51bGwpIHsKICAgICAgICB2aWV3ZXIuYmVkLmJ1aWxkVm9sdW1lWyd4J10ubWluID0gdGhpcy5iZWRNaW5TaXplWzBdOwogICAgICAgIHZpZXdlci5iZWQuYnVpbGRWb2x1bWVbJ3knXS5taW4gPSB0aGlzLmJlZE1pblNpemVbMV07CiAgICAgICAgdmlld2VyLmJlZC5idWlsZFZvbHVtZVsneiddLm1pbiA9IHRoaXMuYmVkTWluU2l6ZVsyXTsKICAgICAgfQoKICAgICAgdmlld2VyLmdjb2RlUHJvY2Vzc29yLnVzZUhpZ2hRdWFsaXR5RXh0cnVzaW9uKHRoaXMuaGRSZW5kZXJpbmcpOwogICAgICB2aWV3ZXIuZ2NvZGVQcm9jZXNzb3IudXBkYXRlRm9yY2VXaXJlTW9kZSh0aGlzLmZvcmNlTGluZVJlbmRlcmluZyk7CiAgICAgIHZpZXdlci5nY29kZVByb2Nlc3Nvci5zZXRBbHBoYSh0aGlzLnRyYW5zcGFyZW5jeSk7CiAgICAgIHZpZXdlci5nY29kZVByb2Nlc3Nvci5zZXRWb3hlbE1vZGUodGhpcy52b3hlbE1vZGUpOwogICAgICB2aWV3ZXIuZ2NvZGVQcm9jZXNzb3Iudm94ZWxXaWR0aCA9IHRoaXMudm94ZWxXaWR0aDsKICAgICAgdmlld2VyLmdjb2RlUHJvY2Vzc29yLnZveGVsSGVpZ2h0ID0gdGhpcy52b3hlbEhlaWdodDsKICAgICAgdmlld2VyLmdjb2RlUHJvY2Vzc29yLnVzZVNwZWN1bGFyQ29sb3IodGhpcy5zcGVjdWxhckxpZ2h0aW5nKTsKICAgICAgdmlld2VyLmdjb2RlUHJvY2Vzc29yLnNldExpdmVUcmFja2luZyhmYWxzZSk7CiAgICAgIHRoaXMubG9hZFRvb2xDb2xvcnModGhpcy5leHRydWRlckNvbG9ycyk7CgogICAgICBpZiAodmlld2VyLmxhc3RMb2FkRmFpbGVkKCkpIHsKICAgICAgICB0aGlzLnJlbmRlclF1YWxpdHkgPSB0aGlzLnJlbmRlclF1YWxpdGllc1swXTsKICAgICAgICB2aWV3ZXIudXBkYXRlUmVuZGVyUXVhbGl0eSgxKTsKICAgICAgICB2aWV3ZXIuY2xlYXJMb2FkRmxhZygpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAicmVnaXN0ZXJQcm9ncmVzc0NhbGxiYWNrIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZWdpc3RlclByb2dyZXNzQ2FsbGJhY2soKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgaWYgKHZpZXdlcikgewogICAgICAgIHZpZXdlci5nY29kZVByb2Nlc3Nvci5sb2FkaW5nUHJvZ3Jlc3NDYWxsYmFjayA9IGZ1bmN0aW9uIChwcm9ncmVzcykgewogICAgICAgICAgX3RoaXMyLmxvYWRpbmdQZXJjZW50ID0gTWF0aC5jZWlsKHByb2dyZXNzICogMTAwKTsKICAgICAgICAgIF90aGlzMi5sb2FkaW5nID0gX3RoaXMyLmxvYWRpbmdQZXJjZW50IDw9IDk5OwogICAgICAgIH07CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJjYW5jZWxSZW5kZXJpbmciLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9jYW5jZWxSZW5kZXJpbmcgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzKCkgewogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMyQoX2NvbnRleHQzKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0My5wcmV2ID0gX2NvbnRleHQzLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBpZiAoIXZpZXdlcikgewogICAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDQ7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHZpZXdlci5nY29kZVByb2Nlc3Nvci5jYW5jZWxMb2FkID0gdHJ1ZTsKICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gNDsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNsZWVwKDEwMDApOwoKICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTMsIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBjYW5jZWxSZW5kZXJpbmcoKSB7CiAgICAgICAgcmV0dXJuIF9jYW5jZWxSZW5kZXJpbmcuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGNhbmNlbFJlbmRlcmluZzsKICAgIH0oKQogIH0sIHsKICAgIGtleTogImNsZWFyTG9hZGVkRmlsZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY2xlYXJMb2FkZWRGaWxlKCkgewogICAgICBpZiAodmlld2VyKSB7CiAgICAgICAgdmlld2VyLmNsZWFyU2NlbmUodHJ1ZSk7CiAgICAgICAgdGhpcy5sb2FkZWRGaWxlID0gbnVsbDsKICAgICAgICB0aGlzLnRyYWNraW5nID0gZmFsc2U7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJjaG9vc2VGaWxlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjaG9vc2VGaWxlKCkgewogICAgICBpZiAoIXRoaXMuaXNCdXN5KSB7CiAgICAgICAgdGhpcy5maWxlSW5wdXQuY2xpY2soKTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogImZpbmlzaExvYWQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGZpbmlzaExvYWQoKSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwoKICAgICAgdGhpcy5tYXhaU2xpZGVyID0gdmlld2VyLmdldE1heEhlaWdodCgpICsgMTsKICAgICAgdGhpcy56U2xpZGVyID0gdGhpcy5tYXhaU2xpZGVyOwogICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTsKICAgICAgdmlld2VyLnNldEN1cnNvclZpc2libGl0eSh0aGlzLnNob3dDdXJzb3IpOwoKICAgICAgaWYgKHRoaXMubG9hZGVkRmlsZSA9PT0gdGhpcy5zZENhcmRGaWxlUGF0aCAmJiB0aGlzLnByaW50aW5nX29iamVjdHMubGVuZ3RoKSB7CiAgICAgICAgdmFyIG9iamVjdHMgPSBbXTsKICAgICAgICB0aGlzLnByaW50aW5nX29iamVjdHMuZm9yRWFjaChmdW5jdGlvbiAob2JqZWN0KSB7CiAgICAgICAgICB2YXIgeFZhbHVlcyA9IG9iamVjdC5wb2x5Z29uLm1hcChmdW5jdGlvbiAocG9pbnQpIHsKICAgICAgICAgICAgcmV0dXJuIHBvaW50WzBdOwogICAgICAgICAgfSk7CiAgICAgICAgICB2YXIgeVZhbHVlcyA9IG9iamVjdC5wb2x5Z29uLm1hcChmdW5jdGlvbiAocG9pbnQpIHsKICAgICAgICAgICAgcmV0dXJuIHBvaW50WzFdOwogICAgICAgICAgfSk7CiAgICAgICAgICBvYmplY3RzLnB1c2goewogICAgICAgICAgICBjYW5jZWxsZWQ6IF90aGlzMy5leGNsdWRlZF9vYmplY3RzLmluY2x1ZGVzKG9iamVjdC5uYW1lKSwKICAgICAgICAgICAgbmFtZTogb2JqZWN0Lm5hbWUsCiAgICAgICAgICAgIHg6IFtNYXRoLm1pbi5hcHBseShNYXRoLCBfdG9Db25zdW1hYmxlQXJyYXkoeFZhbHVlcykpLCBNYXRoLm1heC5hcHBseShNYXRoLCBfdG9Db25zdW1hYmxlQXJyYXkoeFZhbHVlcykpXSwKICAgICAgICAgICAgeTogW01hdGgubWluLmFwcGx5KE1hdGgsIF90b0NvbnN1bWFibGVBcnJheSh5VmFsdWVzKSksIE1hdGgubWF4LmFwcGx5KE1hdGgsIF90b0NvbnN1bWFibGVBcnJheSh5VmFsdWVzKSldCiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgICB2aWV3ZXIuYnVpbGRPYmplY3RzLmxvYWRPYmplY3RCb3VuZGFyaWVzKG9iamVjdHMpOwogICAgICAgIHZpZXdlci5idWlsZE9iamVjdHMuc2hvd09iamVjdFNlbGVjdGlvbih0aGlzLnNob3dPYmplY3RTZWxlY3Rpb24pOwogICAgICB9CgogICAgICB2aWV3ZXIuZ2NvZGVQcm9jZXNzb3IudXBkYXRlRmlsZVBvc2l0aW9uKHZpZXdlci5maWxlU2l6ZSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZmlsZVNlbGVjdGVkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfZmlsZVNlbGVjdGVkID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNShlKSB7CiAgICAgICAgdmFyIF90aGlzNCA9IHRoaXMsCiAgICAgICAgICAgIF9lJHRhcmdldCRmaWxlczsKCiAgICAgICAgdmFyIHJlYWRlciwgX2UkdGFyZ2V0OwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTUkKF9jb250ZXh0NSkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDUucHJldiA9IF9jb250ZXh0NS5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTsKICAgICAgICAgICAgICAgIHJlYWRlci5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgdmFyIF9yZWYgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU0KGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGJsb2I7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU0JChfY29udGV4dDQpIHsKICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ0LnByZXYgPSBfY29udGV4dDQubmV4dCkgewogICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKCFldmVudCB8fCAhZXZlbnQudGFyZ2V0KSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuYWJydXB0KCJyZXR1cm4iKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYmxvYiA9IGV2ZW50LnRhcmdldC5yZXN1bHQ7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEodHlwZW9mIGJsb2IgPT09ICdzdHJpbmcnKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzNC5maWxlU2l6ZSA9IGJsb2IubGVuZ3RoOyAvLyBEbyBzb21ldGhpbmcgd2l0aCByZXN1bHQKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmlld2VyLnByb2Nlc3NGaWxlKGJsb2IpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpczQuZmluaXNoTG9hZCgpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuc3RvcCgpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwgX2NhbGxlZTQpOwogICAgICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKF94MikgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBfcmVmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB9KCkpOwogICAgICAgICAgICAgICAgdGhpcy50cmFja2luZyA9IGZhbHNlOwoKICAgICAgICAgICAgICAgIGlmICgoX2UkdGFyZ2V0JGZpbGVzID0gZS50YXJnZXQuZmlsZXMpICE9PSBudWxsICYmIF9lJHRhcmdldCRmaWxlcyAhPT0gdm9pZCAwICYmIF9lJHRhcmdldCRmaWxlcy5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgdGhpcy5sb2FkZWRGaWxlID0gZSA9PT0gbnVsbCB8fCBlID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX2UkdGFyZ2V0ID0gZS50YXJnZXQpID09PSBudWxsIHx8IF9lJHRhcmdldCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2UkdGFyZ2V0LmZpbGVzWzBdLm5hbWU7CiAgICAgICAgICAgICAgICAgIHJlYWRlci5yZWFkQXNUZXh0KGUudGFyZ2V0LmZpbGVzWzBdKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBlLnRhcmdldC52YWx1ZSA9ICcnOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDUuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTUsIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBmaWxlU2VsZWN0ZWQoX3gpIHsKICAgICAgICByZXR1cm4gX2ZpbGVTZWxlY3RlZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gZmlsZVNlbGVjdGVkOwogICAgfSgpCiAgfSwgewogICAga2V5OiAibG9hZEZpbGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9sb2FkRmlsZSA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTYoZmlsZW5hbWUpIHsKICAgICAgICB2YXIgX3RoaXM1ID0gdGhpczsKCiAgICAgICAgdmFyIENhbmNlbFRva2VuLCB0ZXh0OwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNiQoX2NvbnRleHQ2KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Ni5wcmV2ID0gX2NvbnRleHQ2Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICB0aGlzLmRvd25sb2FkU25hY2tiYXIuc3RhdHVzID0gdHJ1ZTsKICAgICAgICAgICAgICAgIHRoaXMuZG93bmxvYWRTbmFja2Jhci5zcGVlZCA9IDA7CiAgICAgICAgICAgICAgICB0aGlzLmRvd25sb2FkU25hY2tiYXIubGFzdFByb2dyZXNzLnRpbWUgPSAwOwogICAgICAgICAgICAgICAgdGhpcy5kb3dubG9hZFNuYWNrYmFyLmZpbGVuYW1lID0gZmlsZW5hbWUuc3RhcnRzV2l0aCgnZ2NvZGVzLycpID8gZmlsZW5hbWUuc2xpY2UoNykgOiBmaWxlbmFtZTsKICAgICAgICAgICAgICAgIENhbmNlbFRva2VuID0gYXhpb3MuQ2FuY2VsVG9rZW47CiAgICAgICAgICAgICAgICB0aGlzLmRvd25sb2FkU25hY2tiYXIuY2FuY2VsVG9rZW5Tb3VyY2UgPSBDYW5jZWxUb2tlbi5zb3VyY2UoKTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Ni5uZXh0ID0gODsKICAgICAgICAgICAgICAgIHJldHVybiBheGlvcy5nZXQodGhpcy5hcGlVcmwgKyAnL3NlcnZlci9maWxlcy8nICsgZW5jb2RlVVJJKGZpbGVuYW1lKSwgewogICAgICAgICAgICAgICAgICBjYW5jZWxUb2tlbjogdGhpcy5kb3dubG9hZFNuYWNrYmFyLmNhbmNlbFRva2VuU291cmNlLnRva2VuLAogICAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU6ICdibG9iJywKICAgICAgICAgICAgICAgICAgb25Eb3dubG9hZFByb2dyZXNzOiBmdW5jdGlvbiBvbkRvd25sb2FkUHJvZ3Jlc3MocHJvZ3Jlc3NFdmVudCkgewogICAgICAgICAgICAgICAgICAgIF90aGlzNS5kb3dubG9hZFNuYWNrYmFyLnBlcmNlbnQgPSBwcm9ncmVzc0V2ZW50LmxvYWRlZCAqIDEwMCAvIHByb2dyZXNzRXZlbnQudG90YWw7CgogICAgICAgICAgICAgICAgICAgIGlmIChfdGhpczUuZG93bmxvYWRTbmFja2Jhci5sYXN0UHJvZ3Jlc3MudGltZSkgewogICAgICAgICAgICAgICAgICAgICAgdmFyIHRpbWUgPSBwcm9ncmVzc0V2ZW50LnRpbWVTdGFtcCAtIF90aGlzNS5kb3dubG9hZFNuYWNrYmFyLmxhc3RQcm9ncmVzcy50aW1lOwogICAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGEgPSBwcm9ncmVzc0V2ZW50LmxvYWRlZCAtIF90aGlzNS5kb3dubG9hZFNuYWNrYmFyLmxhc3RQcm9ncmVzcy5sb2FkZWQ7CgogICAgICAgICAgICAgICAgICAgICAgaWYgKHRpbWUgPiAxMDAwIHx8IF90aGlzNS5kb3dubG9hZFNuYWNrYmFyLnNwZWVkID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzNS5kb3dubG9hZFNuYWNrYmFyLnNwZWVkID0gZGF0YSAvICh0aW1lIC8gMTAwMCk7CiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzNS5kb3dubG9hZFNuYWNrYmFyLmxhc3RQcm9ncmVzcy50aW1lID0gcHJvZ3Jlc3NFdmVudC50aW1lU3RhbXA7CiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzNS5kb3dubG9hZFNuYWNrYmFyLmxhc3RQcm9ncmVzcy5sb2FkZWQgPSBwcm9ncmVzc0V2ZW50LmxvYWRlZDsKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9IGVsc2UgX3RoaXM1LmRvd25sb2FkU25hY2tiYXIubGFzdFByb2dyZXNzLnRpbWUgPSBwcm9ncmVzc0V2ZW50LnRpbWVTdGFtcDsKCiAgICAgICAgICAgICAgICAgICAgX3RoaXM1LmRvd25sb2FkU25hY2tiYXIudG90YWwgPSBwcm9ncmVzc0V2ZW50LnRvdGFsOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcy5kYXRhLnRleHQoKTsKICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICAgIHdpbmRvdy5jb25zb2xlLmVycm9yKGUubWVzc2FnZSk7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgICAgdGV4dCA9IF9jb250ZXh0Ni5zZW50OwogICAgICAgICAgICAgICAgdGhpcy5kb3dubG9hZFNuYWNrYmFyLnN0YXR1cyA9IGZhbHNlOwogICAgICAgICAgICAgICAgdGhpcy5sb2FkZWRGaWxlID0gdGhpcy5kb3dubG9hZFNuYWNrYmFyLmZpbGVuYW1lOwogICAgICAgICAgICAgICAgdmlld2VyLnVwZGF0ZVJlbmRlclF1YWxpdHkodGhpcy5yZW5kZXJRdWFsaXR5LnZhbHVlKTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Ni5uZXh0ID0gMTQ7CiAgICAgICAgICAgICAgICByZXR1cm4gdmlld2VyLnByb2Nlc3NGaWxlKHRleHQpOwoKICAgICAgICAgICAgICBjYXNlIDE0OgogICAgICAgICAgICAgICAgdGhpcy5sb2FkaW5nUGVyY2VudCA9IDEwMDsKICAgICAgICAgICAgICAgIHRoaXMuZmluaXNoTG9hZCgpOwoKICAgICAgICAgICAgICBjYXNlIDE2OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ2LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU2LCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gbG9hZEZpbGUoX3gzKSB7CiAgICAgICAgcmV0dXJuIF9sb2FkRmlsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gbG9hZEZpbGU7CiAgICB9KCkKICB9LCB7CiAgICBrZXk6ICJjYW5jZWxEb3dubG9hZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY2FuY2VsRG93bmxvYWQoKSB7CiAgICAgIHRoaXMuZG93bmxvYWRTbmFja2Jhci5jYW5jZWxUb2tlblNvdXJjZS5jYW5jZWwoJ1VzZXIgY2FuY2VsZWQgZG93bmxvYWQgZ2NvZGUgZmlsZScpOwogICAgfQogIH0sIHsKICAgIGtleTogInNsZWVwIiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfc2xlZXAgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU3KG1zKSB7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU3JChfY29udGV4dDcpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ3LnByZXYgPSBfY29udGV4dDcubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0Ny5uZXh0ID0gMjsKICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkgewogICAgICAgICAgICAgICAgICByZXR1cm4gc2V0VGltZW91dChyZXNvbHZlLCBtcyk7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ3LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU3KTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gc2xlZXAoX3g0KSB7CiAgICAgICAgcmV0dXJuIF9zbGVlcC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gc2xlZXA7CiAgICB9KCkKICB9LCB7CiAgICBrZXk6ICJsb2FkQ3VycmVudEZpbGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9sb2FkQ3VycmVudEZpbGUgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU4KCkgewogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlOCQoX2NvbnRleHQ4KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0OC5wcmV2ID0gX2NvbnRleHQ4Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBfY29udGV4dDgubmV4dCA9IDI7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sb2FkRmlsZSgnZ2NvZGVzLycgKyB0aGlzLnNkQ2FyZEZpbGVQYXRoKTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgdGhpcy5sb2FkZWRGaWxlID0gdGhpcy5zZENhcmRGaWxlUGF0aDsKCiAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ4LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU4LCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gbG9hZEN1cnJlbnRGaWxlKCkgewogICAgICAgIHJldHVybiBfbG9hZEN1cnJlbnRGaWxlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBsb2FkQ3VycmVudEZpbGU7CiAgICB9KCkKICB9LCB7CiAgICBrZXk6ICJyZWxvYWRWaWV3ZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9yZWxvYWRWaWV3ZXIgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU5KCkgewogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlOSQoX2NvbnRleHQ5KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0OS5wcmV2ID0gX2NvbnRleHQ5Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBpZiAoIXRoaXMubG9hZGluZykgewogICAgICAgICAgICAgICAgICBfY29udGV4dDkubmV4dCA9IDQ7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIC8vaWYgd2UgYXJlIGFjdGl2ZWx5IGxvYWRpbmcgc2lnbmFsIGEgY2FuY2VsIGFuZCB3YWl0IGEgc2Vjb25kCiAgICAgICAgICAgICAgICAvL1RoaXMgcHJldmVudHMgYSB0aW1pbmcgaXNzdWUgdGhhdCBjYW4gaGFwcGVuIGlmIGEgdXNlciBjaGFuZ2VzIHNldHRpbmdzIGFuZCB0aGVuCiAgICAgICAgICAgICAgICAvL2hpdHMgdGhlIHJlbG9hZCB2aWV3ZXIgYnV0dG9uLiBXaWxsIGV2ZW50dWFsbHkgbW92ZSB0aGlzIHRvIGFwaQogICAgICAgICAgICAgICAgdmlld2VyLmdjb2RlUHJvY2Vzc29yLmNhbmNlbExvYWQgPSB0cnVlOwogICAgICAgICAgICAgICAgX2NvbnRleHQ5Lm5leHQgPSA0OwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2xlZXAoMTAwMCk7CgogICAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICAgIHRoaXMucmVsb2FkUmVxdWlyZWQgPSBmYWxzZTsKICAgICAgICAgICAgICAgIHRoaXMubG9hZGluZyA9IHRydWU7CiAgICAgICAgICAgICAgICB0aGlzLmxvYWRpbmdQZXJjZW50ID0gMDsKICAgICAgICAgICAgICAgIF9jb250ZXh0OS5uZXh0ID0gOTsKICAgICAgICAgICAgICAgIHJldHVybiB2aWV3ZXIucmVsb2FkKCk7CgogICAgICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgICAgIHRoaXMubG9hZGluZ1BlcmNlbnQgPSAxMDA7CiAgICAgICAgICAgICAgICB0aGlzLmZpbmlzaExvYWQoKTsKCiAgICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0OS5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlOSwgdGhpcyk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIHJlbG9hZFZpZXdlcigpIHsKICAgICAgICByZXR1cm4gX3JlbG9hZFZpZXdlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gcmVsb2FkVmlld2VyOwogICAgfSgpCiAgfSwgewogICAga2V5OiAicmVzZXRDYW1lcmEiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlc2V0Q2FtZXJhKCkgewogICAgICB2aWV3ZXIucmVzZXRDYW1lcmEoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJzZXRSZWxvYWRSZXF1aXJlZEZsYWciLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNldFJlbG9hZFJlcXVpcmVkRmxhZygpIHsKICAgICAgaWYgKHRoaXMubG9hZGVkRmlsZSAmJiB0aGlzLmxvYWRlZEZpbGUgIT0gJycpIHsKICAgICAgICB0aGlzLnJlbG9hZFJlcXVpcmVkID0gdHJ1ZTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInJlbmRlclF1YWxpdHlDaGFuZ2VkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfcmVuZGVyUXVhbGl0eUNoYW5nZWQgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxMChuZXdWYWwpIHsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTEwJChfY29udGV4dDEwKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MTAucHJldiA9IF9jb250ZXh0MTAubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGlmICghKHZpZXdlciAmJiB2aWV3ZXIucmVuZGVyUXVhbGl0eSAhPT0gbmV3VmFsKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDEwLm5leHQgPSA0OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB2aWV3ZXIudXBkYXRlUmVuZGVyUXVhbGl0eShuZXdWYWwpOwogICAgICAgICAgICAgICAgX2NvbnRleHQxMC5uZXh0ID0gNDsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlbG9hZFZpZXdlcigpOwoKICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDEwLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUxMCwgdGhpcyk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIHJlbmRlclF1YWxpdHlDaGFuZ2VkKF94NSkgewogICAgICAgIHJldHVybiBfcmVuZGVyUXVhbGl0eUNoYW5nZWQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHJlbmRlclF1YWxpdHlDaGFuZ2VkOwogICAgfSgpCiAgfSwgewogICAga2V5OiAiY3VycmVudFBvc2l0aW9uQ2hhbmdlZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY3VycmVudFBvc2l0aW9uQ2hhbmdlZChuZXdWYWwpIHsKICAgICAgaWYgKHZpZXdlcikgewogICAgICAgIHZhciBwb3NpdGlvbiA9IFt7CiAgICAgICAgICBheGVzOiAnWCcsCiAgICAgICAgICBwb3NpdGlvbjogbmV3VmFsWzBdCiAgICAgICAgfSwgewogICAgICAgICAgYXhlczogJ1knLAogICAgICAgICAgcG9zaXRpb246IG5ld1ZhbFsxXQogICAgICAgIH0sIHsKICAgICAgICAgIGF4ZXM6ICdaJywKICAgICAgICAgIHBvc2l0aW9uOiBuZXdWYWxbMl0KICAgICAgICB9XTsKICAgICAgICB2aWV3ZXIudXBkYXRlVG9vbFBvc2l0aW9uKHBvc2l0aW9uKTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogImZpbGVQb3NpdGlvbkNoYW5nZWQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGZpbGVQb3NpdGlvbkNoYW5nZWQobmV3VmFsKSB7CiAgICAgIGlmICghdmlld2VyKSByZXR1cm47CiAgICAgIHZhciBvZmZzZXQgPSAzNTA7CgogICAgICBpZiAobmV3VmFsID4gMCAmJiB0aGlzLnByaW50ZXJJc1ByaW50aW5nICYmIHRoaXMudHJhY2tpbmcgJiYgbmV3VmFsID4gb2Zmc2V0KSB7CiAgICAgICAgdmlld2VyLmdjb2RlUHJvY2Vzc29yLnVwZGF0ZUZpbGVQb3NpdGlvbihuZXdWYWwgLSBvZmZzZXQpOwogICAgICB9IGVsc2UgewogICAgICAgIHZpZXdlci5nY29kZVByb2Nlc3Nvci51cGRhdGVGaWxlUG9zaXRpb24odmlld2VyLmZpbGVTaXplKTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInRyYWNraW5nQ2hhbmdlZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX3RyYWNraW5nQ2hhbmdlZCA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTExKG5ld1ZhbCkgewogICAgICAgIHZhciBfdmlld2VyNDsKCiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUxMSQoX2NvbnRleHQxMSkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDExLnByZXYgPSBfY29udGV4dDExLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBpZiAodmlld2VyKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0MTEubmV4dCA9IDI7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDExLmFicnVwdCgicmV0dXJuIik7CgogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgIGlmICghbmV3VmFsKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0MTEubmV4dCA9IDg7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIC8vU2V0IHpTbGlkZXIgdG8gbWF4IHZhbHVlCiAgICAgICAgICAgICAgICB0aGlzLnpTbGlkZXIgPSB0aGlzLm1heFpTbGlkZXI7IC8vRm9yY2UgcmVuZGVyZXJzIHJlbG9hZC4KCiAgICAgICAgICAgICAgICB2aWV3ZXIuZ2NvZGVQcm9jZXNzb3IudXBkYXRlRmlsZVBvc2l0aW9uKDApOwogICAgICAgICAgICAgICAgKF92aWV3ZXI0ID0gdmlld2VyKSA9PT0gbnVsbCB8fCBfdmlld2VyNCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3ZpZXdlcjQuZm9yY2VSZW5kZXIoKTsKICAgICAgICAgICAgICAgIF9jb250ZXh0MTEubmV4dCA9IDExOwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICAgIHZpZXdlci5nY29kZVByb2Nlc3Nvci5zZXRMaXZlVHJhY2tpbmcoZmFsc2UpOwogICAgICAgICAgICAgICAgX2NvbnRleHQxMS5uZXh0ID0gMTE7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZWxvYWRWaWV3ZXIoKTsKCiAgICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTEuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTExLCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gdHJhY2tpbmdDaGFuZ2VkKF94NikgewogICAgICAgIHJldHVybiBfdHJhY2tpbmdDaGFuZ2VkLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiB0cmFja2luZ0NoYW5nZWQ7CiAgICB9KCkKICB9LCB7CiAgICBrZXk6ICJwcmludGVySXNQcmludGluZ0NoYW5nZWQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHByaW50ZXJJc1ByaW50aW5nQ2hhbmdlZCgpIHsKICAgICAgdGhpcy50cmFja2luZyA9IGZhbHNlOwogICAgfQogIH0sIHsKICAgIGtleTogInNob3dDdXJzb3IiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHZhciBfdGhpcyQkc3RvcmUkc3RhdGUkZ3U7CgogICAgICByZXR1cm4gKF90aGlzJCRzdG9yZSRzdGF0ZSRndSA9IHRoaXMuJHN0b3JlLnN0YXRlLmd1aS5nY29kZVZpZXdlci5zaG93Q3Vyc29yKSAhPT0gbnVsbCAmJiBfdGhpcyQkc3RvcmUkc3RhdGUkZ3UgIT09IHZvaWQgMCA/IF90aGlzJCRzdG9yZSRzdGF0ZSRndSA6IGZhbHNlOwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KG5ld1ZhbCkgewogICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgnZ3VpL3NhdmVTZXR0aW5nJywgewogICAgICAgIG5hbWU6ICdnY29kZVZpZXdlci5zaG93Q3Vyc29yJywKICAgICAgICB2YWx1ZTogbmV3VmFsCiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogInNob3dDdXJzb3JDaGFuZ2VkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzaG93Q3Vyc29yQ2hhbmdlZChuZXdWYWwpIHsKICAgICAgdmFyIF92aWV3ZXI1OwoKICAgICAgKF92aWV3ZXI1ID0gdmlld2VyKSA9PT0gbnVsbCB8fCBfdmlld2VyNSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3ZpZXdlcjUuc2V0Q3Vyc29yVmlzaWJsaXR5KG5ld1ZhbCk7CiAgICB9CiAgfSwgewogICAga2V5OiAic2hvd1RyYXZlbE1vdmVzIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB2YXIgX3RoaXMkJHN0b3JlJHN0YXRlJGd1MjsKCiAgICAgIHJldHVybiAoX3RoaXMkJHN0b3JlJHN0YXRlJGd1MiA9IHRoaXMuJHN0b3JlLnN0YXRlLmd1aS5nY29kZVZpZXdlci5zaG93VHJhdmVsTW92ZXMpICE9PSBudWxsICYmIF90aGlzJCRzdG9yZSRzdGF0ZSRndTIgIT09IHZvaWQgMCA/IF90aGlzJCRzdG9yZSRzdGF0ZSRndTIgOiBmYWxzZTsKICAgIH0sCiAgICBzZXQ6IGZ1bmN0aW9uIHNldChuZXdWYWwpIHsKICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2d1aS9zYXZlU2V0dGluZycsIHsKICAgICAgICBuYW1lOiAnZ2NvZGVWaWV3ZXIuc2hvd1RyYXZlbE1vdmVzJywKICAgICAgICB2YWx1ZTogbmV3VmFsCiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogInNob3dUcmF2ZWxNb3Zlc0NoYW5nZWQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNob3dUcmF2ZWxNb3Zlc0NoYW5nZWQobmV3VmFsKSB7CiAgICAgIHZhciBfdmlld2VyNjsKCiAgICAgIChfdmlld2VyNiA9IHZpZXdlcikgPT09IG51bGwgfHwgX3ZpZXdlcjYgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF92aWV3ZXI2LnRvZ2dsZVRyYXZlbHMobmV3VmFsKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJzaG93T2JqZWN0U2VsZWN0aW9uIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB2YXIgX3RoaXMkJHN0b3JlJHN0YXRlJGd1MzsKCiAgICAgIHJldHVybiAoX3RoaXMkJHN0b3JlJHN0YXRlJGd1MyA9IHRoaXMuJHN0b3JlLnN0YXRlLmd1aS5nY29kZVZpZXdlci5zaG93T2JqZWN0U2VsZWN0aW9uKSAhPT0gbnVsbCAmJiBfdGhpcyQkc3RvcmUkc3RhdGUkZ3UzICE9PSB2b2lkIDAgPyBfdGhpcyQkc3RvcmUkc3RhdGUkZ3UzIDogZmFsc2U7CiAgICB9LAogICAgc2V0OiBmdW5jdGlvbiBzZXQobmV3VmFsKSB7CiAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdndWkvc2F2ZVNldHRpbmcnLCB7CiAgICAgICAgbmFtZTogJ2djb2RlVmlld2VyLnNob3dPYmplY3RTZWxlY3Rpb24nLAogICAgICAgIHZhbHVlOiBuZXdWYWwKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAic2hvd09iamVjdFNlbGVjdGlvbkNoYW5nZWQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNob3dPYmplY3RTZWxlY3Rpb25DaGFuZ2VkKG5ld1ZhbCkgewogICAgICB2YXIgX3ZpZXdlcjc7CgogICAgICAoX3ZpZXdlcjcgPSB2aWV3ZXIpID09PSBudWxsIHx8IF92aWV3ZXI3ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdmlld2VyNy5idWlsZE9iamVjdHMuc2hvd09iamVjdFNlbGVjdGlvbihuZXdWYWwpOwogICAgfQogIH0sIHsKICAgIGtleTogImhkUmVuZGVyaW5nIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUuZ3VpLmdjb2RlVmlld2VyLmhkUmVuZGVyaW5nOwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KG5ld1ZhbCkgewogICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgnZ3VpL3NhdmVTZXR0aW5nJywgewogICAgICAgIG5hbWU6ICdnY29kZVZpZXdlci5oZFJlbmRlcmluZycsCiAgICAgICAgdmFsdWU6IG5ld1ZhbAogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJoZFJlbmRlcmluZ0NoYW5nZWQiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9oZFJlbmRlcmluZ0NoYW5nZWQgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxMihuZXdWYWwpIHsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTEyJChfY29udGV4dDEyKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MTIucHJldiA9IF9jb250ZXh0MTIubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGlmICghdmlld2VyKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0MTIubmV4dCA9IDQ7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHZpZXdlci5nY29kZVByb2Nlc3Nvci51c2VIaWdoUXVhbGl0eUV4dHJ1c2lvbihuZXdWYWwpOwogICAgICAgICAgICAgICAgX2NvbnRleHQxMi5uZXh0ID0gNDsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlbG9hZFZpZXdlcigpOwoKICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDEyLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUxMiwgdGhpcyk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIGhkUmVuZGVyaW5nQ2hhbmdlZChfeDcpIHsKICAgICAgICByZXR1cm4gX2hkUmVuZGVyaW5nQ2hhbmdlZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gaGRSZW5kZXJpbmdDaGFuZ2VkOwogICAgfSgpCiAgfSwgewogICAga2V5OiAiZm9yY2VMaW5lUmVuZGVyaW5nIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUuZ3VpLmdjb2RlVmlld2VyLmZvcmNlTGluZVJlbmRlcmluZzsKICAgIH0sCiAgICBzZXQ6IGZ1bmN0aW9uIHNldChuZXdWYWwpIHsKICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2d1aS9zYXZlU2V0dGluZycsIHsKICAgICAgICBuYW1lOiAnZ2NvZGVWaWV3ZXIuZm9yY2VMaW5lUmVuZGVyaW5nJywKICAgICAgICB2YWx1ZTogbmV3VmFsCiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogImZvcmNlTGluZVJlbmRlcmluZ0NoYW5nZWQiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9mb3JjZUxpbmVSZW5kZXJpbmdDaGFuZ2VkID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMTMobmV3VmFsKSB7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUxMyQoX2NvbnRleHQxMykgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDEzLnByZXYgPSBfY29udGV4dDEzLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBpZiAoIXZpZXdlcikgewogICAgICAgICAgICAgICAgICBfY29udGV4dDEzLm5leHQgPSA0OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB2aWV3ZXIuZ2NvZGVQcm9jZXNzb3IudXBkYXRlRm9yY2VXaXJlTW9kZShuZXdWYWwpOwogICAgICAgICAgICAgICAgX2NvbnRleHQxMy5uZXh0ID0gNDsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlbG9hZFZpZXdlcigpOwoKICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDEzLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUxMywgdGhpcyk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIGZvcmNlTGluZVJlbmRlcmluZ0NoYW5nZWQoX3g4KSB7CiAgICAgICAgcmV0dXJuIF9mb3JjZUxpbmVSZW5kZXJpbmdDaGFuZ2VkLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBmb3JjZUxpbmVSZW5kZXJpbmdDaGFuZ2VkOwogICAgfSgpCiAgfSwgewogICAga2V5OiAidHJhbnNwYXJlbmN5IiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUuZ3VpLmdjb2RlVmlld2VyLnRyYW5zcGFyZW5jeTsKICAgIH0sCiAgICBzZXQ6IGZ1bmN0aW9uIHNldChuZXdWYWwpIHsKICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2d1aS9zYXZlU2V0dGluZycsIHsKICAgICAgICBuYW1lOiAnZ2NvZGVWaWV3ZXIudHJhbnNwYXJlbmN5JywKICAgICAgICB2YWx1ZTogbmV3VmFsCiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogInRyYW5zcGFyZW5jeUNoYW5nZWQiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF90cmFuc3BhcmVuY3lDaGFuZ2VkID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMTQobmV3VmFsKSB7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUxNCQoX2NvbnRleHQxNCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDE0LnByZXYgPSBfY29udGV4dDE0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBpZiAoIXZpZXdlcikgewogICAgICAgICAgICAgICAgICBfY29udGV4dDE0Lm5leHQgPSA0OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB2aWV3ZXIuZ2NvZGVQcm9jZXNzb3Iuc2V0QWxwaGEobmV3VmFsKTsKICAgICAgICAgICAgICAgIF9jb250ZXh0MTQubmV4dCA9IDQ7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZWxvYWRWaWV3ZXIoKTsKCiAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxNC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMTQsIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiB0cmFuc3BhcmVuY3lDaGFuZ2VkKF94OSkgewogICAgICAgIHJldHVybiBfdHJhbnNwYXJlbmN5Q2hhbmdlZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gdHJhbnNwYXJlbmN5Q2hhbmdlZDsKICAgIH0oKQogIH0sIHsKICAgIGtleTogInZveGVsTW9kZSIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLmd1aS5nY29kZVZpZXdlci52b3hlbE1vZGU7CiAgICB9LAogICAgc2V0OiBmdW5jdGlvbiBzZXQobmV3VmFsKSB7CiAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdndWkvc2F2ZVNldHRpbmcnLCB7CiAgICAgICAgbmFtZTogJ2djb2RlVmlld2VyLnZveGVsTW9kZScsCiAgICAgICAgdmFsdWU6IG5ld1ZhbAogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ2b3hlbE1vZGVDaGFuZ2VkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfdm94ZWxNb2RlQ2hhbmdlZCA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTE1KG5ld1ZhbCkgewogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMTUkKF9jb250ZXh0MTUpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQxNS5wcmV2ID0gX2NvbnRleHQxNS5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgaWYgKCF2aWV3ZXIpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQxNS5uZXh0ID0gNjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdmlld2VyLmdjb2RlUHJvY2Vzc29yLnNldFZveGVsTW9kZShuZXdWYWwpOwogICAgICAgICAgICAgICAgdmlld2VyLmdjb2RlUHJvY2Vzc29yLnZveGVsV2lkdGggPSB0aGlzLnZveGVsV2lkdGg7CiAgICAgICAgICAgICAgICB2aWV3ZXIuZ2NvZGVQcm9jZXNzb3Iudm94ZWxIZWlnaHQgPSB0aGlzLnZveGVsSGVpZ2h0OwogICAgICAgICAgICAgICAgX2NvbnRleHQxNS5uZXh0ID0gNjsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlbG9hZFZpZXdlcigpOwoKICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDE1LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUxNSwgdGhpcyk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIHZveGVsTW9kZUNoYW5nZWQoX3gxMCkgewogICAgICAgIHJldHVybiBfdm94ZWxNb2RlQ2hhbmdlZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gdm94ZWxNb2RlQ2hhbmdlZDsKICAgIH0oKQogIH0sIHsKICAgIGtleTogInZveGVsV2lkdGgiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHZhciBfdGhpcyQkc3RvcmUkc3RhdGUkZ3U0OwoKICAgICAgcmV0dXJuIChfdGhpcyQkc3RvcmUkc3RhdGUkZ3U0ID0gdGhpcy4kc3RvcmUuc3RhdGUuZ3VpLmdjb2RlVmlld2VyLnZveGVsV2lkdGgpICE9PSBudWxsICYmIF90aGlzJCRzdG9yZSRzdGF0ZSRndTQgIT09IHZvaWQgMCA/IF90aGlzJCRzdG9yZSRzdGF0ZSRndTQgOiAxOwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KG5ld1ZhbCkgewogICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgnZ3VpL3NhdmVTZXR0aW5nJywgewogICAgICAgIG5hbWU6ICdnY29kZVZpZXdlci52b3hlbFdpZHRoJywKICAgICAgICB2YWx1ZTogbmV3VmFsCiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogInZveGVsSGVpZ2h0IiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB2YXIgX3RoaXMkJHN0b3JlJHN0YXRlJGd1NTsKCiAgICAgIHJldHVybiAoX3RoaXMkJHN0b3JlJHN0YXRlJGd1NSA9IHRoaXMuJHN0b3JlLnN0YXRlLmd1aS5nY29kZVZpZXdlci52b3hlbEhlaWdodCkgIT09IG51bGwgJiYgX3RoaXMkJHN0b3JlJHN0YXRlJGd1NSAhPT0gdm9pZCAwID8gX3RoaXMkJHN0b3JlJHN0YXRlJGd1NSA6IDE7CiAgICB9LAogICAgc2V0OiBmdW5jdGlvbiBzZXQobmV3VmFsKSB7CiAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdndWkvc2F2ZVNldHRpbmcnLCB7CiAgICAgICAgbmFtZTogJ2djb2RlVmlld2VyLnZveGVsSGVpZ2h0JywKICAgICAgICB2YWx1ZTogbmV3VmFsCiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogInNwZWN1bGFyTGlnaHRpbmciLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS5ndWkuZ2NvZGVWaWV3ZXIuc3BlY3VsYXJMaWdodGluZzsKICAgIH0sCiAgICBzZXQ6IGZ1bmN0aW9uIHNldChuZXdWYWwpIHsKICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2d1aS9zYXZlU2V0dGluZycsIHsKICAgICAgICBuYW1lOiAnZ2NvZGVWaWV3ZXIuc3BlY3VsYXJMaWdodGluZycsCiAgICAgICAgdmFsdWU6IG5ld1ZhbAogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJzcGVjdWxhckxpZ2h0aW5nQ2hhbmdlZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX3NwZWN1bGFyTGlnaHRpbmdDaGFuZ2VkID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMTYobmV3VmFsKSB7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUxNiQoX2NvbnRleHQxNikgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDE2LnByZXYgPSBfY29udGV4dDE2Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBpZiAodmlld2VyKSB7CiAgICAgICAgICAgICAgICAgIHZpZXdlci5nY29kZVByb2Nlc3Nvci51c2VTcGVjdWxhckNvbG9yKG5ld1ZhbCk7IC8vYXdhaXQgdGhpcy5yZWxvYWRWaWV3ZXIoKQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDE2LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUxNik7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIHNwZWN1bGFyTGlnaHRpbmdDaGFuZ2VkKF94MTEpIHsKICAgICAgICByZXR1cm4gX3NwZWN1bGFyTGlnaHRpbmdDaGFuZ2VkLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBzcGVjdWxhckxpZ2h0aW5nQ2hhbmdlZDsKICAgIH0oKQogIH0sIHsKICAgIGtleTogImV4dHJ1ZGVyQ29sb3JzIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB2YXIgX3RoaXMkJHN0b3JlJHN0YXRlJGd1NiwgX3RoaXMkJHN0b3JlJHN0YXRlJGd1NzsKCiAgICAgIHJldHVybiAoX3RoaXMkJHN0b3JlJHN0YXRlJGd1NiA9IChfdGhpcyQkc3RvcmUkc3RhdGUkZ3U3ID0gdGhpcy4kc3RvcmUuc3RhdGUuZ3VpLmdjb2RlVmlld2VyKSA9PT0gbnVsbCB8fCBfdGhpcyQkc3RvcmUkc3RhdGUkZ3U3ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdGhpcyQkc3RvcmUkc3RhdGUkZ3U3LmV4dHJ1ZGVyQ29sb3JzKSAhPT0gbnVsbCAmJiBfdGhpcyQkc3RvcmUkc3RhdGUkZ3U2ICE9PSB2b2lkIDAgPyBfdGhpcyQkc3RvcmUkc3RhdGUkZ3U2IDogZmFsc2U7CiAgICB9CiAgfSwgewogICAga2V5OiAibG9hZFRvb2xDb2xvcnMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGxvYWRUb29sQ29sb3JzKGNvbG9ycykgewogICAgICB2YXIgX3RoaXM2ID0gdGhpczsKCiAgICAgIGlmICh2aWV3ZXIgJiYgY29sb3JzLmxlbmd0aCkgewogICAgICAgIHZpZXdlci5nY29kZVByb2Nlc3Nvci5yZXNldFRvb2xzKCk7CiAgICAgICAgY29sb3JzLmZvckVhY2goZnVuY3Rpb24gKGNvbG9yKSB7CiAgICAgICAgICB2aWV3ZXIuZ2NvZGVQcm9jZXNzb3IuYWRkVG9vbChjb2xvciwgX3RoaXM2Lm5venpsZV9kaWFtZXRlcik7CiAgICAgICAgfSk7CiAgICAgICAgdGhpcy5zZXRSZWxvYWRSZXF1aXJlZEZsYWcoKTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogImV4dHJ1ZGVyQ29sb3JzQ2hhbmdlZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZXh0cnVkZXJDb2xvcnNDaGFuZ2VkKG5ld1ZhbCkgewogICAgICBpZiAodmlld2VyICYmIG5ld1ZhbCAmJiBuZXdWYWwubGVuZ3RoKSB7CiAgICAgICAgdGhpcy5sb2FkVG9vbENvbG9ycyhuZXdWYWwpOwogICAgICAgIHRoaXMuc2V0UmVsb2FkUmVxdWlyZWRGbGFnKCk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJjb2xvck1vZGUiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHZhciBfdGhpcyQkc3RvcmUkc3RhdGUkZ3U4LCBfdGhpcyQkc3RvcmUkc3RhdGUkZ3U5OwoKICAgICAgcmV0dXJuIChfdGhpcyQkc3RvcmUkc3RhdGUkZ3U4ID0gKF90aGlzJCRzdG9yZSRzdGF0ZSRndTkgPSB0aGlzLiRzdG9yZS5zdGF0ZS5ndWkuZ2NvZGVWaWV3ZXIpID09PSBudWxsIHx8IF90aGlzJCRzdG9yZSRzdGF0ZSRndTkgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF90aGlzJCRzdG9yZSRzdGF0ZSRndTkuY29sb3JNb2RlKSAhPT0gbnVsbCAmJiBfdGhpcyQkc3RvcmUkc3RhdGUkZ3U4ICE9PSB2b2lkIDAgPyBfdGhpcyQkc3RvcmUkc3RhdGUkZ3U4IDogMjsKICAgIH0sCiAgICBzZXQ6IGZ1bmN0aW9uIHNldChuZXdWYWwpIHsKICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2d1aS9zYXZlU2V0dGluZycsIHsKICAgICAgICBuYW1lOiAnZ2NvZGVWaWV3ZXIuY29sb3JNb2RlJywKICAgICAgICB2YWx1ZTogbmV3VmFsCiAgICAgIH0pOwoKICAgICAgaWYgKHZpZXdlcikgewogICAgICAgIGlmICh2aWV3ZXIuZ2NvZGVQcm9jZXNzb3IuY29sb3JNb2RlICE9PSBuZXdWYWwpIHsKICAgICAgICAgIHZpZXdlci5nY29kZVByb2Nlc3Nvci5zZXRDb2xvck1vZGUobmV3VmFsKTsKICAgICAgICAgIHRoaXMucmVsb2FkVmlld2VyKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAiYmFja2dyb3VuZENvbG9yIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB2YXIgX3RoaXMkJHN0b3JlJHN0YXRlJGd1MTAsIF90aGlzJCRzdG9yZSRzdGF0ZSRndTExOwoKICAgICAgcmV0dXJuIChfdGhpcyQkc3RvcmUkc3RhdGUkZ3UxMCA9IChfdGhpcyQkc3RvcmUkc3RhdGUkZ3UxMSA9IHRoaXMuJHN0b3JlLnN0YXRlLmd1aS5nY29kZVZpZXdlcikgPT09IG51bGwgfHwgX3RoaXMkJHN0b3JlJHN0YXRlJGd1MTEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF90aGlzJCRzdG9yZSRzdGF0ZSRndTExLmJhY2tncm91bmRDb2xvcikgIT09IG51bGwgJiYgX3RoaXMkJHN0b3JlJHN0YXRlJGd1MTAgIT09IHZvaWQgMCA/IF90aGlzJCRzdG9yZSRzdGF0ZSRndTEwIDogJyMxMjEyMTInOwogICAgfQogIH0sIHsKICAgIGtleTogImJhY2tncm91bmRDb2xvckNoYW5nZWQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGJhY2tncm91bmRDb2xvckNoYW5nZWQobmV3VmFsKSB7CiAgICAgIGlmICghdmlld2VyKSByZXR1cm47CiAgICAgIHZpZXdlci5zZXRCYWNrZ3JvdW5kQ29sb3IobmV3VmFsKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJncmlkQ29sb3IiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHZhciBfdGhpcyQkc3RvcmUkc3RhdGUkZ3UxMiwgX3RoaXMkJHN0b3JlJHN0YXRlJGd1MTM7CgogICAgICByZXR1cm4gKF90aGlzJCRzdG9yZSRzdGF0ZSRndTEyID0gKF90aGlzJCRzdG9yZSRzdGF0ZSRndTEzID0gdGhpcy4kc3RvcmUuc3RhdGUuZ3VpLmdjb2RlVmlld2VyKSA9PT0gbnVsbCB8fCBfdGhpcyQkc3RvcmUkc3RhdGUkZ3UxMyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXMkJHN0b3JlJHN0YXRlJGd1MTMuZ3JpZENvbG9yKSAhPT0gbnVsbCAmJiBfdGhpcyQkc3RvcmUkc3RhdGUkZ3UxMiAhPT0gdm9pZCAwID8gX3RoaXMkJHN0b3JlJHN0YXRlJGd1MTIgOiAnI0IzQjNCMyc7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ3JpZENvbG9yQ2hhbmdlZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ3JpZENvbG9yQ2hhbmdlZChuZXdWYWwpIHsKICAgICAgaWYgKCF2aWV3ZXIpIHJldHVybjsKICAgICAgdmlld2VyLmJlZC5zZXRCZWRDb2xvcihuZXdWYWwpOwogICAgfQogIH0sIHsKICAgIGtleTogInNob3dBeGVzIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB2YXIgX3RoaXMkJHN0b3JlJHN0YXRlJGd1MTQsIF90aGlzJCRzdG9yZSRzdGF0ZSRndTE1OwoKICAgICAgcmV0dXJuIChfdGhpcyQkc3RvcmUkc3RhdGUkZ3UxNCA9IChfdGhpcyQkc3RvcmUkc3RhdGUkZ3UxNSA9IHRoaXMuJHN0b3JlLnN0YXRlLmd1aS5nY29kZVZpZXdlcikgPT09IG51bGwgfHwgX3RoaXMkJHN0b3JlJHN0YXRlJGd1MTUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF90aGlzJCRzdG9yZSRzdGF0ZSRndTE1LnNob3dBeGVzKSAhPT0gbnVsbCAmJiBfdGhpcyQkc3RvcmUkc3RhdGUkZ3UxNCAhPT0gdm9pZCAwID8gX3RoaXMkJHN0b3JlJHN0YXRlJGd1MTQgOiB0cnVlOwogICAgfQogIH0sIHsKICAgIGtleTogInNob3dBeGVzQ2hhbmdlZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc2hvd0F4ZXNDaGFuZ2VkKG5ld1ZhbCkgewogICAgICBpZiAoIXZpZXdlcikgcmV0dXJuOwogICAgICB2aWV3ZXIuYXhlcy5zaG93KG5ld1ZhbCk7CiAgICB9CiAgfSwgewogICAga2V5OiAibWluRmVlZCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgdmFyIF90aGlzJCRzdG9yZSRzdGF0ZSRndTE2LCBfdGhpcyQkc3RvcmUkc3RhdGUkZ3UxNzsKCiAgICAgIHJldHVybiAoX3RoaXMkJHN0b3JlJHN0YXRlJGd1MTYgPSAoX3RoaXMkJHN0b3JlJHN0YXRlJGd1MTcgPSB0aGlzLiRzdG9yZS5zdGF0ZS5ndWkuZ2NvZGVWaWV3ZXIpID09PSBudWxsIHx8IF90aGlzJCRzdG9yZSRzdGF0ZSRndTE3ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdGhpcyQkc3RvcmUkc3RhdGUkZ3UxNy5taW5GZWVkKSAhPT0gbnVsbCAmJiBfdGhpcyQkc3RvcmUkc3RhdGUkZ3UxNiAhPT0gdm9pZCAwID8gX3RoaXMkJHN0b3JlJHN0YXRlJGd1MTYgOiAyMDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJtaW5GZWVkQ2hhbmdlZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gbWluRmVlZENoYW5nZWQobmV3VmFsKSB7CiAgICAgIGlmICghdmlld2VyKSByZXR1cm47CiAgICAgIHZpZXdlci5nY29kZVByb2Nlc3Nvci51cGRhdGVDb2xvclJhdGUobmV3VmFsICogNjAsIHRoaXMubWF4RmVlZCAqIDYwKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJtYXhGZWVkIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB2YXIgX3RoaXMkJHN0b3JlJHN0YXRlJGd1MTgsIF90aGlzJCRzdG9yZSRzdGF0ZSRndTE5OwoKICAgICAgcmV0dXJuIChfdGhpcyQkc3RvcmUkc3RhdGUkZ3UxOCA9IChfdGhpcyQkc3RvcmUkc3RhdGUkZ3UxOSA9IHRoaXMuJHN0b3JlLnN0YXRlLmd1aS5nY29kZVZpZXdlcikgPT09IG51bGwgfHwgX3RoaXMkJHN0b3JlJHN0YXRlJGd1MTkgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF90aGlzJCRzdG9yZSRzdGF0ZSRndTE5Lm1heEZlZWQpICE9PSBudWxsICYmIF90aGlzJCRzdG9yZSRzdGF0ZSRndTE4ICE9PSB2b2lkIDAgPyBfdGhpcyQkc3RvcmUkc3RhdGUkZ3UxOCA6IDEwMDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJtYXhGZWVkQ2hhbmdlZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gbWF4RmVlZENoYW5nZWQobmV3VmFsKSB7CiAgICAgIGlmICghdmlld2VyKSByZXR1cm47CiAgICAgIHZpZXdlci5nY29kZVByb2Nlc3Nvci51cGRhdGVDb2xvclJhdGUodGhpcy5taW5GZWVkICogNjAsIG5ld1ZhbCAqIDYwKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJtaW5GZWVkQ29sb3IiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHZhciBfdGhpcyQkc3RvcmUkc3RhdGUkZ3UyMCwgX3RoaXMkJHN0b3JlJHN0YXRlJGd1MjE7CgogICAgICByZXR1cm4gKF90aGlzJCRzdG9yZSRzdGF0ZSRndTIwID0gKF90aGlzJCRzdG9yZSRzdGF0ZSRndTIxID0gdGhpcy4kc3RvcmUuc3RhdGUuZ3VpLmdjb2RlVmlld2VyKSA9PT0gbnVsbCB8fCBfdGhpcyQkc3RvcmUkc3RhdGUkZ3UyMSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXMkJHN0b3JlJHN0YXRlJGd1MjEubWluRmVlZENvbG9yKSAhPT0gbnVsbCAmJiBfdGhpcyQkc3RvcmUkc3RhdGUkZ3UyMCAhPT0gdm9pZCAwID8gX3RoaXMkJHN0b3JlJHN0YXRlJGd1MjAgOiAnIzAwMDBGRic7CiAgICB9CiAgfSwgewogICAga2V5OiAibWluRmVlZENvbG9yVXBkYXRlZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gbWluRmVlZENvbG9yVXBkYXRlZChuZXdWYWwpIHsKICAgICAgaWYgKCF2aWV3ZXIpIHJldHVybjsKICAgICAgdmlld2VyLmdjb2RlUHJvY2Vzc29yLnVwZGF0ZU1pbkZlZWRDb2xvcihuZXdWYWwpOwogICAgICB0aGlzLnNldFJlbG9hZFJlcXVpcmVkRmxhZygpOwogICAgfQogIH0sIHsKICAgIGtleTogIm1heEZlZWRDb2xvciIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgdmFyIF90aGlzJCRzdG9yZSRzdGF0ZSRndTIyLCBfdGhpcyQkc3RvcmUkc3RhdGUkZ3UyMzsKCiAgICAgIHJldHVybiAoX3RoaXMkJHN0b3JlJHN0YXRlJGd1MjIgPSAoX3RoaXMkJHN0b3JlJHN0YXRlJGd1MjMgPSB0aGlzLiRzdG9yZS5zdGF0ZS5ndWkuZ2NvZGVWaWV3ZXIpID09PSBudWxsIHx8IF90aGlzJCRzdG9yZSRzdGF0ZSRndTIzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdGhpcyQkc3RvcmUkc3RhdGUkZ3UyMy5tYXhGZWVkQ29sb3IpICE9PSBudWxsICYmIF90aGlzJCRzdG9yZSRzdGF0ZSRndTIyICE9PSB2b2lkIDAgPyBfdGhpcyQkc3RvcmUkc3RhdGUkZ3UyMiA6ICcjRkYwMDAwJzsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJtYXhGZWVkQ29sb3JVcGRhdGVkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBtYXhGZWVkQ29sb3JVcGRhdGVkKG5ld1ZhbCkgewogICAgICBpZiAoIXZpZXdlcikgcmV0dXJuOwogICAgICB2aWV3ZXIuZ2NvZGVQcm9jZXNzb3IudXBkYXRlTWF4RmVlZENvbG9yKG5ld1ZhbCk7CiAgICAgIHRoaXMuc2V0UmVsb2FkUmVxdWlyZWRGbGFnKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAia2luZW1hdGljcyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgdmFyIF90aGlzJCRzdG9yZSRzdGF0ZSRwcjEzLCBfdGhpcyQkc3RvcmUkc3RhdGUkcHIxNCwgX3RoaXMkJHN0b3JlJHN0YXRlJHByMTUsIF90aGlzJCRzdG9yZSRzdGF0ZSRwcjE2OwoKICAgICAgcmV0dXJuIChfdGhpcyQkc3RvcmUkc3RhdGUkcHIxMyA9IChfdGhpcyQkc3RvcmUkc3RhdGUkcHIxNCA9IHRoaXMuJHN0b3JlLnN0YXRlLnByaW50ZXIuY29uZmlnZmlsZSkgPT09IG51bGwgfHwgX3RoaXMkJHN0b3JlJHN0YXRlJHByMTQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfdGhpcyQkc3RvcmUkc3RhdGUkcHIxNSA9IF90aGlzJCRzdG9yZSRzdGF0ZSRwcjE0LnNldHRpbmdzKSA9PT0gbnVsbCB8fCBfdGhpcyQkc3RvcmUkc3RhdGUkcHIxNSA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF90aGlzJCRzdG9yZSRzdGF0ZSRwcjE2ID0gX3RoaXMkJHN0b3JlJHN0YXRlJHByMTUucHJpbnRlcikgPT09IG51bGwgfHwgX3RoaXMkJHN0b3JlJHN0YXRlJHByMTYgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF90aGlzJCRzdG9yZSRzdGF0ZSRwcjE2LmtpbmVtYXRpY3MpICE9PSBudWxsICYmIF90aGlzJCRzdG9yZSRzdGF0ZSRwcjEzICE9PSB2b2lkIDAgPyBfdGhpcyQkc3RvcmUkc3RhdGUkcHIxMyA6ICcnOwogICAgfQogIH0sIHsKICAgIGtleTogImtpbmVtYXRpY3NDaGFuZ2VkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBraW5lbWF0aWNzQ2hhbmdlZChuZXdWYWwpIHsKICAgICAgaWYgKHZpZXdlciAmJiBuZXdWYWwpIHsKICAgICAgICB2aWV3ZXIuYmVkLnNldERlbHRhKG5ld1ZhbC5pbmNsdWRlcygnZGVsdGEnKSk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJiZWRNaW5TaXplIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB2YXIgX3RoaXMkJHN0b3JlJHN0YXRlJHByMTcsIF90aGlzJCRzdG9yZSRzdGF0ZSRwcjE4OwoKICAgICAgcmV0dXJuIChfdGhpcyQkc3RvcmUkc3RhdGUkcHIxNyA9IChfdGhpcyQkc3RvcmUkc3RhdGUkcHIxOCA9IHRoaXMuJHN0b3JlLnN0YXRlLnByaW50ZXIudG9vbGhlYWQpID09PSBudWxsIHx8IF90aGlzJCRzdG9yZSRzdGF0ZSRwcjE4ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdGhpcyQkc3RvcmUkc3RhdGUkcHIxOC5heGlzX21pbmltdW0pICE9PSBudWxsICYmIF90aGlzJCRzdG9yZSRzdGF0ZSRwcjE3ICE9PSB2b2lkIDAgPyBfdGhpcyQkc3RvcmUkc3RhdGUkcHIxNyA6IG51bGw7CiAgICB9CiAgfSwgewogICAga2V5OiAiYmVkTWluU2l6ZUNoYW5nZWQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGJlZE1pblNpemVDaGFuZ2VkKG5ld1ZhbCkgewogICAgICBpZiAodmlld2VyICYmIG5ld1ZhbCkgewogICAgICAgIHZpZXdlci5iZWQuYnVpbGRWb2x1bWVbJ3gnXS5taW4gPSBuZXdWYWxbMF07CiAgICAgICAgdmlld2VyLmJlZC5idWlsZFZvbHVtZVsneSddLm1pbiA9IG5ld1ZhbFsxXTsKICAgICAgICB2aWV3ZXIuYmVkLmJ1aWxkVm9sdW1lWyd6J10ubWluID0gbmV3VmFsWzJdOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAiYmVkTWF4U2l6ZSIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgdmFyIF90aGlzJCRzdG9yZSRzdGF0ZSRwcjE5LCBfdGhpcyQkc3RvcmUkc3RhdGUkcHIyMDsKCiAgICAgIHJldHVybiAoX3RoaXMkJHN0b3JlJHN0YXRlJHByMTkgPSAoX3RoaXMkJHN0b3JlJHN0YXRlJHByMjAgPSB0aGlzLiRzdG9yZS5zdGF0ZS5wcmludGVyLnRvb2xoZWFkKSA9PT0gbnVsbCB8fCBfdGhpcyQkc3RvcmUkc3RhdGUkcHIyMCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXMkJHN0b3JlJHN0YXRlJHByMjAuYXhpc19tYXhpbXVtKSAhPT0gbnVsbCAmJiBfdGhpcyQkc3RvcmUkc3RhdGUkcHIxOSAhPT0gdm9pZCAwID8gX3RoaXMkJHN0b3JlJHN0YXRlJHByMTkgOiBudWxsOwogICAgfQogIH0sIHsKICAgIGtleTogImJlZE1heFNpemVDaGFuZ2VkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBiZWRNYXhTaXplQ2hhbmdlZChuZXdWYWwpIHsKICAgICAgaWYgKG5ld1ZhbCAmJiB2aWV3ZXIpIHsKICAgICAgICB2aWV3ZXIuYmVkLmJ1aWxkVm9sdW1lWyd4J10ubWF4ID0gbmV3VmFsWzBdOwogICAgICAgIHZpZXdlci5iZWQuYnVpbGRWb2x1bWVbJ3knXS5tYXggPSBuZXdWYWxbMV07CiAgICAgICAgdmlld2VyLmJlZC5idWlsZFZvbHVtZVsneiddLm1heCA9IG5ld1ZhbFsyXTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInpTbGlkZXJDaGFuZ2VkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB6U2xpZGVyQ2hhbmdlZChuZXdWYWwpIHsKICAgICAgdmFyIF92aWV3ZXI4LCBfdmlld2VyOTsKCiAgICAgIChfdmlld2VyOCA9IHZpZXdlcikgPT09IG51bGwgfHwgX3ZpZXdlcjggPT09IHZvaWQgMCA/IHZvaWQgMCA6IF92aWV3ZXI4LnNldFpDbGlwUGxhbmUobmV3VmFsLCAtMSk7CiAgICAgIChfdmlld2VyOSA9IHZpZXdlcikgPT09IG51bGwgfHwgX3ZpZXdlcjkgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF92aWV3ZXI5LmZvcmNlUmVuZGVyKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAicHJvZ3Jlc3NDb2xvciIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgdmFyIF90aGlzJCRzdG9yZSRzdGF0ZSRndTI0LCBfdGhpcyQkc3RvcmUkc3RhdGUkZ3UyNTsKCiAgICAgIHJldHVybiAoX3RoaXMkJHN0b3JlJHN0YXRlJGd1MjQgPSAoX3RoaXMkJHN0b3JlJHN0YXRlJGd1MjUgPSB0aGlzLiRzdG9yZS5zdGF0ZS5ndWkuZ2NvZGVWaWV3ZXIpID09PSBudWxsIHx8IF90aGlzJCRzdG9yZSRzdGF0ZSRndTI1ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdGhpcyQkc3RvcmUkc3RhdGUkZ3UyNS5wcm9ncmVzc0NvbG9yKSAhPT0gbnVsbCAmJiBfdGhpcyQkc3RvcmUkc3RhdGUkZ3UyNCAhPT0gdm9pZCAwID8gX3RoaXMkJHN0b3JlJHN0YXRlJGd1MjQgOiAnI0ZGRkZGRic7CiAgICB9CiAgfSwgewogICAga2V5OiAicHJvZ3Jlc3NDb2xvckNoYW5nZWQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHByb2dyZXNzQ29sb3JDaGFuZ2VkKG5ld1ZhbCkgewogICAgICB2YXIgX3ZpZXdlcjEwOwoKICAgICAgKF92aWV3ZXIxMCA9IHZpZXdlcikgPT09IG51bGwgfHwgX3ZpZXdlcjEwID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdmlld2VyMTAuc2V0UHJvZ3Jlc3NDb2xvcihuZXdWYWwpOwogICAgfQogIH0sIHsKICAgIGtleTogInVwZGF0ZVpTbGlkZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZVpTbGlkZXIobmV3VmFsKSB7CiAgICAgIHRoaXMuelNsaWRlciA9IG5ld1ZhbDsKICAgIH0KICB9XSk7CgogIHJldHVybiBWaWV3ZXI7Cn0oTWl4aW5zKEJhc2VNaXhpbikpOwoKX19kZWNvcmF0ZShbUHJvcCh7CiAgdHlwZTogU3RyaW5nLAogIGRlZmF1bHQ6ICcnLAogIHJlcXVpcmVkOiBmYWxzZQp9KV0sIFZpZXdlci5wcm90b3R5cGUsICJmaWxlbmFtZSIsIHZvaWQgMCk7CgpfX2RlY29yYXRlKFtSZWYoJ2ZpbGVJbnB1dCcpXSwgVmlld2VyLnByb3RvdHlwZSwgImZpbGVJbnB1dCIsIHZvaWQgMCk7CgpfX2RlY29yYXRlKFtXYXRjaCgncmVuZGVyUXVhbGl0eScpXSwgVmlld2VyLnByb3RvdHlwZSwgInJlbmRlclF1YWxpdHlDaGFuZ2VkIiwgbnVsbCk7CgpfX2RlY29yYXRlKFtXYXRjaCgnY3VycmVudFBvc2l0aW9uJyldLCBWaWV3ZXIucHJvdG90eXBlLCAiY3VycmVudFBvc2l0aW9uQ2hhbmdlZCIsIG51bGwpOwoKX19kZWNvcmF0ZShbV2F0Y2goJ2ZpbGVQb3NpdGlvbicpXSwgVmlld2VyLnByb3RvdHlwZSwgImZpbGVQb3NpdGlvbkNoYW5nZWQiLCBudWxsKTsKCl9fZGVjb3JhdGUoW1dhdGNoKCd0cmFja2luZycpXSwgVmlld2VyLnByb3RvdHlwZSwgInRyYWNraW5nQ2hhbmdlZCIsIG51bGwpOwoKX19kZWNvcmF0ZShbV2F0Y2goJ3ByaW50ZXJJc1ByaW50aW5nJyldLCBWaWV3ZXIucHJvdG90eXBlLCAicHJpbnRlcklzUHJpbnRpbmdDaGFuZ2VkIiwgbnVsbCk7CgpfX2RlY29yYXRlKFtXYXRjaCgnc2hvd0N1cnNvcicpXSwgVmlld2VyLnByb3RvdHlwZSwgInNob3dDdXJzb3JDaGFuZ2VkIiwgbnVsbCk7CgpfX2RlY29yYXRlKFtXYXRjaCgnc2hvd1RyYXZlbE1vdmVzJyldLCBWaWV3ZXIucHJvdG90eXBlLCAic2hvd1RyYXZlbE1vdmVzQ2hhbmdlZCIsIG51bGwpOwoKX19kZWNvcmF0ZShbV2F0Y2goJ3Nob3dPYmplY3RTZWxlY3Rpb24nKV0sIFZpZXdlci5wcm90b3R5cGUsICJzaG93T2JqZWN0U2VsZWN0aW9uQ2hhbmdlZCIsIG51bGwpOwoKX19kZWNvcmF0ZShbV2F0Y2goJ2hkUmVuZGVyaW5nJyldLCBWaWV3ZXIucHJvdG90eXBlLCAiaGRSZW5kZXJpbmdDaGFuZ2VkIiwgbnVsbCk7CgpfX2RlY29yYXRlKFtXYXRjaCgnZm9yY2VMaW5lUmVuZGVyaW5nJyldLCBWaWV3ZXIucHJvdG90eXBlLCAiZm9yY2VMaW5lUmVuZGVyaW5nQ2hhbmdlZCIsIG51bGwpOwoKX19kZWNvcmF0ZShbV2F0Y2goJ3RyYW5zcGFyZW5jeScpXSwgVmlld2VyLnByb3RvdHlwZSwgInRyYW5zcGFyZW5jeUNoYW5nZWQiLCBudWxsKTsKCl9fZGVjb3JhdGUoW1dhdGNoKCd2b3hlbE1vZGUnKV0sIFZpZXdlci5wcm90b3R5cGUsICJ2b3hlbE1vZGVDaGFuZ2VkIiwgbnVsbCk7CgpfX2RlY29yYXRlKFtXYXRjaCgnc3BlY3VsYXJMaWdodGluZycpXSwgVmlld2VyLnByb3RvdHlwZSwgInNwZWN1bGFyTGlnaHRpbmdDaGFuZ2VkIiwgbnVsbCk7CgpfX2RlY29yYXRlKFtXYXRjaCgnZXh0cnVkZXJDb2xvcnMnKV0sIFZpZXdlci5wcm90b3R5cGUsICJleHRydWRlckNvbG9yc0NoYW5nZWQiLCBudWxsKTsKCl9fZGVjb3JhdGUoW1dhdGNoKCdiYWNrZ3JvdW5kQ29sb3InKV0sIFZpZXdlci5wcm90b3R5cGUsICJiYWNrZ3JvdW5kQ29sb3JDaGFuZ2VkIiwgbnVsbCk7CgpfX2RlY29yYXRlKFtXYXRjaCgnZ3JpZENvbG9yJyldLCBWaWV3ZXIucHJvdG90eXBlLCAiZ3JpZENvbG9yQ2hhbmdlZCIsIG51bGwpOwoKX19kZWNvcmF0ZShbV2F0Y2goJ3Nob3dBeGVzJyldLCBWaWV3ZXIucHJvdG90eXBlLCAic2hvd0F4ZXNDaGFuZ2VkIiwgbnVsbCk7CgpfX2RlY29yYXRlKFtXYXRjaCgnbWluRmVlZCcpXSwgVmlld2VyLnByb3RvdHlwZSwgIm1pbkZlZWRDaGFuZ2VkIiwgbnVsbCk7CgpfX2RlY29yYXRlKFtXYXRjaCgnbWF4RmVlZCcpXSwgVmlld2VyLnByb3RvdHlwZSwgIm1heEZlZWRDaGFuZ2VkIiwgbnVsbCk7CgpfX2RlY29yYXRlKFtXYXRjaCgnbWluRmVlZENvbG9yJyldLCBWaWV3ZXIucHJvdG90eXBlLCAibWluRmVlZENvbG9yVXBkYXRlZCIsIG51bGwpOwoKX19kZWNvcmF0ZShbV2F0Y2goJ21heEZlZWRDb2xvcicpXSwgVmlld2VyLnByb3RvdHlwZSwgIm1heEZlZWRDb2xvclVwZGF0ZWQiLCBudWxsKTsKCl9fZGVjb3JhdGUoW1dhdGNoKCdraW5lbWF0aWNzJyldLCBWaWV3ZXIucHJvdG90eXBlLCAia2luZW1hdGljc0NoYW5nZWQiLCBudWxsKTsKCl9fZGVjb3JhdGUoW1dhdGNoKCdiZWRNaW5TaXplJywgewogIGRlZXA6IHRydWUKfSldLCBWaWV3ZXIucHJvdG90eXBlLCAiYmVkTWluU2l6ZUNoYW5nZWQiLCBudWxsKTsKCl9fZGVjb3JhdGUoW1dhdGNoKCdiZWRNYXhTaXplJywgewogIGRlZXA6IHRydWUKfSldLCBWaWV3ZXIucHJvdG90eXBlLCAiYmVkTWF4U2l6ZUNoYW5nZWQiLCBudWxsKTsKCl9fZGVjb3JhdGUoW1dhdGNoKCd6U2xpZGVyJyldLCBWaWV3ZXIucHJvdG90eXBlLCAielNsaWRlckNoYW5nZWQiLCBudWxsKTsKCl9fZGVjb3JhdGUoW1dhdGNoKCdwcm9ncmVzc0NvbG9yJyldLCBWaWV3ZXIucHJvdG90eXBlLCAicHJvZ3Jlc3NDb2xvckNoYW5nZWQiLCBudWxsKTsKClZpZXdlciA9IF9fZGVjb3JhdGUoW0NvbXBvbmVudCh7CiAgY29tcG9uZW50czogewogICAgUGFuZWw6IFBhbmVsCiAgfQp9KV0sIFZpZXdlcik7CmV4cG9ydCBkZWZhdWx0IFZpZXdlcjs="},{"version":3,"sources":["/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/components/gcodeviewer/Viewer.vue?vue&type=script&lang=ts&"],"names":[],"mappings":"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","sourcesContent":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport {Component, Mixins, Prop, Ref, Watch} from 'vue-property-decorator'\nimport BaseMixin from '../mixins/base'\n// @ts-ignore\nimport GCodeViewer from '@sindarius/gcodeviewer'\nimport axios from 'axios'\nimport {formatFilesize} from '@/plugins/helpers'\nimport Panel from '@/components/ui/Panel.vue'\n\ninterface downloadSnackbar {\n    status: boolean\n    filename: string\n    percent: number\n    speed: number\n    total: number\n    cancelTokenSource: any\n    lastProgress: {\n        time: number\n        loaded: number\n    }\n}\n\nlet viewer: any = null\n@Component({\n    components: {Panel}\n})\nexport default class Viewer extends Mixins(BaseMixin) {\n    formatFilesize = formatFilesize\n\n    private isBusy = false\n    private loading = false\n    private loadingPercent = 0\n\n    private tracking = false\n    private loadedFile: string | null = null\n\n    private reloadRequired = false\n    private fileSize = 0\n    private maxZSlider = 100000\n    private zSlider = this.maxZSlider\n    private zSlicerHeight = 100\n    private renderQuality = this.renderQualities[2]\n\n    private downloadSnackbar: downloadSnackbar = {\n        status: false,\n        filename: '',\n        percent: 0,\n        speed: 0,\n        total: 0,\n        cancelTokenSource: {},\n        lastProgress: {\n            time: 0,\n            loaded: 0\n        }\n    }\n\n    @Prop({type: String, default: '', required: false}) filename!: string\n    @Ref('fileInput') fileInput!: HTMLInputElement\n    //@Ref('viewerCanvasContainer') viewerCanvasContainer!: HTMLElement\n\n    $refs!: {\n        viewerCanvasContainer: HTMLElement\n    }\n\n    get renderQualities() {\n        return [\n            { label: this.$t('GCodeViewer.Low'),    value: 2 },\n            { label: this.$t('GCodeViewer.Medium'), value: 3 },\n            { label: this.$t('GCodeViewer.High'),   value: 4 },\n            { label: this.$t('GCodeViewer.Ultra'),  value: 5 },\n            { label: this.$t('GCodeViewer.Max'),    value: 6 },\n        ]\n    }\n\n    async mounted() {\n        this.loadedFile = this.$store.state.gcodeviewer?.loadedFileBackup ?? null\n        viewer = this.$store.state.gcodeviewer?.viewerBackup ?? null\n\n        await this.init()\n\n        window.addEventListener('resize', this.eventListenerResize)\n    }\n\n    beforeDestroy() {\n        if (viewer) {\n            viewer.gcodeProcessor.loadingProgressCallback = null\n            this.$store.dispatch('gcodeviewer/setLoadedFileBackup', this.loadedFile)\n            this.$store.dispatch('gcodeviewer/setViewerBackup', viewer)\n        }\n\n        window.removeEventListener('resize', this.eventListenerResize)\n    }\n\n    eventListenerResize() {\n        viewer?.resize()\n    }\n\n    get filePosition() {\n        return this.printerIsPrinting ? this.$store.state.printer.virtual_sdcard.file_position : 0\n    }\n\n    get sdCardFilePath() {\n        return this.$store.state.printer.print_stats?.filename ?? ''\n    }\n\n    get currentPosition() {\n        return this.$store.state.printer.motion_report?.live_position ?? [0, 0, 0, 0]\n    }\n\n    get showTrackingButton() {\n        return this.printerIsPrinting && this.sdCardFilePath === this.loadedFile\n    }\n\n    get printing_objects() {\n        return this.$store.state.printer.exclude_object?.objects ?? []\n    }\n\n    get excluded_objects() {\n        return this.$store.state.printer.exclude_object?.excluded_objects ?? []\n    }\n\n    get nozzle_diameter() {\n        return this.$store.state.printer.configfile?.settings?.extruder?.nozzle_diameter ?? 0.4\n    }\n\n    async init() {\n        let canvasElement = this.$store.state.gcodeviewer?.canvasBackup ?? null\n\n        if (canvasElement === null) {\n            canvasElement = document.createElement('canvas')\n            canvasElement.className = 'viewer'\n            this.$refs.viewerCanvasContainer.appendChild(canvasElement)\n            await this.$store.dispatch('gcodeviewer/setCanvasBackup', canvasElement)\n        } else {\n            this.$refs.viewerCanvasContainer.appendChild(canvasElement)\n            if (viewer?.gcodeProcessor) {\n                viewer.gcodeProcessor.updateFilePosition(viewer?.fileSize)\n            }\n        }\n\n        if (viewer === null) {\n            await this.viewerInit(canvasElement)\n        }\n\n        this.registerProgressCallback()\n\n        if (this.$route.query?.filename && this.loadedFile !== this.$route.query?.filename?.toString()) {\n            //TODO: test without sleep\n            await this.sleep(1000) //Give the store a chance to initializ before loading the file.\n            await this.loadFile(this.$route.query.filename.toString())\n        }\n    }\n\n    viewerInit(element: HTMLCanvasElement) {\n        viewer = new GCodeViewer(element)\n        viewer.init()\n        viewer.setBackgroundColor(this.backgroundColor)\n        viewer.bed.setBedColor(this.gridColor)\n        viewer.setCursorVisiblity(this.showCursor)\n        viewer.setZClipPlane(1000000, -1000000)\n        viewer.axes.show(this.showAxes)\n        viewer.bed.setDelta(this.kinematics.includes('delta'))\n\n        if (this.bedMaxSize !== null) {\n            viewer.bed.buildVolume['x'].max = this.bedMaxSize[0]\n            viewer.bed.buildVolume['y'].max = this.bedMaxSize[1]\n            viewer.bed.buildVolume['z'].max = this.bedMaxSize[2]\n        }\n\n        if (this.bedMinSize !== null) {\n            viewer.bed.buildVolume['x'].min = this.bedMinSize[0]\n            viewer.bed.buildVolume['y'].min = this.bedMinSize[1]\n            viewer.bed.buildVolume['z'].min = this.bedMinSize[2]\n        }\n\n        viewer.gcodeProcessor.useHighQualityExtrusion(this.hdRendering)\n        viewer.gcodeProcessor.updateForceWireMode(this.forceLineRendering)\n        viewer.gcodeProcessor.setAlpha(this.transparency)\n        viewer.gcodeProcessor.setVoxelMode(this.voxelMode)\n        viewer.gcodeProcessor.voxelWidth = this.voxelWidth\n        viewer.gcodeProcessor.voxelHeight = this.voxelHeight\n        viewer.gcodeProcessor.useSpecularColor(this.specularLighting)\n        viewer.gcodeProcessor.setLiveTracking(false)\n\n        this.loadToolColors(this.extruderColors)\n\n        if (viewer.lastLoadFailed()) {\n            this.renderQuality = this.renderQualities[0]\n            viewer.updateRenderQuality(1)\n            viewer.clearLoadFlag()\n        }\n    }\n\n    registerProgressCallback() {\n        if (viewer) {\n            viewer.gcodeProcessor.loadingProgressCallback = (progress: number) => {\n                this.loadingPercent = Math.ceil(progress * 100)\n                this.loading = this.loadingPercent <= 99\n            }\n        }\n    }\n    \n    async cancelRendering() {\n        if (viewer) {\n            viewer.gcodeProcessor.cancelLoad = true\n            await this.sleep(1000)\n        }\n    }\n\n    clearLoadedFile() {\n        if (viewer) {\n            viewer.clearScene(true)\n            this.loadedFile = null\n            this.tracking = false\n        }\n    }\n\n    chooseFile() {\n        if (!this.isBusy) {\n            this.fileInput.click()\n        }\n    }\n\n    finishLoad() {\n        this.maxZSlider = viewer.getMaxHeight() + 1\n        this.zSlider = this.maxZSlider\n        this.loading = false\n        viewer.setCursorVisiblity(this.showCursor)\n\n        if (this.loadedFile === this.sdCardFilePath && this.printing_objects.length) {\n            let objects: any = []\n\n            this.printing_objects.forEach((object: any) => {\n                const xValues = object.polygon.map((point: number[]) => point[0])\n                const yValues = object.polygon.map((point: number[]) => point[1])\n\n                objects.push({\n                    cancelled: this.excluded_objects.includes(object.name),\n                    name: object.name,\n                    x: [Math.min(...xValues), Math.max(...xValues)],\n                    y: [Math.min(...yValues), Math.max(...yValues)],\n                })\n            })\n\n            viewer.buildObjects.loadObjectBoundaries(objects)\n            viewer.buildObjects.showObjectSelection(this.showObjectSelection)\n        }\n\n        viewer.gcodeProcessor.updateFilePosition(viewer.fileSize)\n    }\n\n    async fileSelected(e: any) {\n        const reader = new FileReader()\n        reader.addEventListener('load', async (event) => {\n            if (!event || !event.target) return\n            const blob = event.target.result\n            if (typeof blob === 'string') {\n                this.fileSize = blob.length\n                // Do something with result\n                await viewer.processFile(blob)\n            }\n            this.finishLoad()\n        })\n        this.tracking = false\n        if (e.target.files?.length) {\n            this.loadedFile = e?.target?.files[0].name\n            reader.readAsText(e.target.files[0])\n        }\n        e.target.value = ''\n    }\n\n    async loadFile(filename: string) {\n        this.downloadSnackbar.status = true\n        this.downloadSnackbar.speed = 0\n        this.downloadSnackbar.lastProgress.time = 0\n        this.downloadSnackbar.filename = filename.startsWith('gcodes/') ? filename.slice(7) : filename\n        const CancelToken = axios.CancelToken\n        this.downloadSnackbar.cancelTokenSource = CancelToken.source()\n        const text = await axios.get(this.apiUrl + '/server/files/' + encodeURI(filename), {\n            cancelToken: this.downloadSnackbar.cancelTokenSource.token,\n            responseType: 'blob',\n            onDownloadProgress: (progressEvent) => {\n                this.downloadSnackbar.percent = (progressEvent.loaded * 100) / progressEvent.total\n                if (this.downloadSnackbar.lastProgress.time) {\n                    const time = progressEvent.timeStamp - this.downloadSnackbar.lastProgress.time\n                    const data = progressEvent.loaded - this.downloadSnackbar.lastProgress.loaded\n\n                    if (time > 1000 || this.downloadSnackbar.speed === 0) {\n                        this.downloadSnackbar.speed = data / (time / 1000)\n                        this.downloadSnackbar.lastProgress.time = progressEvent.timeStamp\n                        this.downloadSnackbar.lastProgress.loaded = progressEvent.loaded\n                    }\n                } else this.downloadSnackbar.lastProgress.time = progressEvent.timeStamp\n\n                this.downloadSnackbar.total = progressEvent.total\n            }\n        }).then(res => res.data.text()).catch((e) => {\n            window.console.error(e.message)\n        })\n        this.downloadSnackbar.status = false\n        this.loadedFile = this.downloadSnackbar.filename\n\n        viewer.updateRenderQuality(this.renderQuality.value)\n        await viewer.processFile(text)\n        this.loadingPercent = 100\n        this.finishLoad()\n    }\n\n    cancelDownload() {\n        this.downloadSnackbar.cancelTokenSource.cancel('User canceled download gcode file')\n    }\n\n    async sleep(ms: number) {\n        await new Promise((resolve) => setTimeout(resolve, ms))\n    }\n\n    async loadCurrentFile() {\n        await this.loadFile('gcodes/' + this.sdCardFilePath)\n        this.loadedFile = this.sdCardFilePath\n    }\n\n    async reloadViewer() {\n        if (this.loading) {\n            //if we are actively loading signal a cancel and wait a second\n            //This prevents a timing issue that can happen if a user changes settings and then\n            //hits the reload viewer button. Will eventually move this to api\n            viewer.gcodeProcessor.cancelLoad = true\n            await this.sleep(1000)\n        }\n\n        this.reloadRequired = false\n        this.loading = true\n        this.loadingPercent = 0\n        await viewer.reload()\n        this.loadingPercent = 100\n        this.finishLoad()\n    }\n\n    resetCamera() {\n        viewer.resetCamera()\n    }\n\n    setReloadRequiredFlag() {\n        if (this.loadedFile && this.loadedFile != '') {\n            this.reloadRequired = true\n        }\n    }\n\n    @Watch('renderQuality')\n    async renderQualityChanged(newVal: number) {\n        if (viewer && viewer.renderQuality !== newVal) {\n            viewer.updateRenderQuality(newVal)\n            await this.reloadViewer()\n        }\n    }\n\n    @Watch('currentPosition')\n    currentPositionChanged(newVal: number[]) {\n        if (viewer) {\n            const position = [\n                {axes: 'X', position: newVal[0]},\n                {axes: 'Y', position: newVal[1]},\n                {axes: 'Z', position: newVal[2]},\n            ]\n\n            viewer.updateToolPosition(position)\n        }\n    }\n\n    @Watch('filePosition')\n    filePositionChanged(newVal: number) {\n        if (!viewer) return\n\n        const offset = 350\n        if (newVal > 0 && this.printerIsPrinting && this.tracking && newVal > offset) {\n            viewer.gcodeProcessor.updateFilePosition(newVal - offset)\n        } else {\n            viewer.gcodeProcessor.updateFilePosition(viewer.fileSize)\n        }\n    }\n\n    @Watch('tracking')\n    async trackingChanged(newVal: boolean) {\n        if (!viewer) return\n        if (newVal) {\n            //Set zSlider to max value\n            this.zSlider = this.maxZSlider\n            //Force renderers reload.\n            viewer.gcodeProcessor.updateFilePosition(0)\n            viewer?.forceRender()\n        } else {\n            viewer.gcodeProcessor.setLiveTracking(false)\n            await this.reloadViewer()\n        }\n    }\n\n    @Watch('printerIsPrinting')\n    printerIsPrintingChanged() {\n        this.tracking = false\n    }\n\n    get showCursor(): boolean {\n        return this.$store.state.gui.gcodeViewer.showCursor ?? false\n    }\n\n    set showCursor(newVal: boolean) {\n        this.$store.dispatch('gui/saveSetting', {name: 'gcodeViewer.showCursor', value: newVal})\n    }\n\n    @Watch('showCursor')\n    showCursorChanged(newVal: boolean) {\n        viewer?.setCursorVisiblity(newVal)\n    }\n\n    get showTravelMoves(): boolean {\n        return this.$store.state.gui.gcodeViewer.showTravelMoves ?? false\n    }\n\n    set showTravelMoves(newVal: boolean) {\n        this.$store.dispatch('gui/saveSetting', {name: 'gcodeViewer.showTravelMoves', value: newVal})\n    }\n\n    @Watch('showTravelMoves')\n    showTravelMovesChanged(newVal: boolean) {\n        viewer?.toggleTravels(newVal)\n    }\n\n    get showObjectSelection(): boolean {\n        return this.$store.state.gui.gcodeViewer.showObjectSelection ?? false\n    }\n\n    set showObjectSelection(newVal: boolean) {\n        this.$store.dispatch('gui/saveSetting', {name: 'gcodeViewer.showObjectSelection', value: newVal})\n    }\n\n    @Watch('showObjectSelection')\n    showObjectSelectionChanged(newVal: boolean) {\n        viewer?.buildObjects.showObjectSelection(newVal)\n    }\n\n    get hdRendering() {\n        return this.$store.state.gui.gcodeViewer.hdRendering\n    }\n\n    set hdRendering(newVal) {\n        this.$store.dispatch('gui/saveSetting', {name: 'gcodeViewer.hdRendering', value: newVal})\n    }\n\n    @Watch('hdRendering')\n    async hdRenderingChanged(newVal: boolean) {\n        if (viewer) {\n            viewer.gcodeProcessor.useHighQualityExtrusion(newVal)\n            await this.reloadViewer()\n        }\n    }\n\n    get forceLineRendering() {\n        return this.$store.state.gui.gcodeViewer.forceLineRendering\n    }\n\n    set forceLineRendering(newVal) {\n        this.$store.dispatch('gui/saveSetting', {name: 'gcodeViewer.forceLineRendering', value: newVal})\n    }\n\n    @Watch('forceLineRendering')\n    async forceLineRenderingChanged(newVal: boolean) {\n        if (viewer) {\n            viewer.gcodeProcessor.updateForceWireMode(newVal)\n            await this.reloadViewer()\n        }\n    }\n\n    get transparency() {\n        return this.$store.state.gui.gcodeViewer.transparency\n    }\n\n    set transparency(newVal) {\n        this.$store.dispatch('gui/saveSetting', {name: 'gcodeViewer.transparency', value: newVal})\n    }\n\n    @Watch('transparency')\n    async transparencyChanged(newVal: boolean) {\n        if (viewer) {\n            viewer.gcodeProcessor.setAlpha(newVal)\n            await this.reloadViewer()\n        }\n    }\n\n    get voxelMode() {\n        return this.$store.state.gui.gcodeViewer.voxelMode\n    }\n\n    set voxelMode(newVal) {\n        this.$store.dispatch('gui/saveSetting', {name: 'gcodeViewer.voxelMode', value: newVal})\n    }\n\n    @Watch('voxelMode')\n    async voxelModeChanged(newVal: boolean) {\n        if (viewer) {\n            viewer.gcodeProcessor.setVoxelMode(newVal)\n            viewer.gcodeProcessor.voxelWidth = this.voxelWidth\n            viewer.gcodeProcessor.voxelHeight = this.voxelHeight\n            await this.reloadViewer()\n        }\n    }\n\n    get voxelWidth() {\n        return this.$store.state.gui.gcodeViewer.voxelWidth ?? 1\n    }\n\n    set voxelWidth(newVal) {\n        this.$store.dispatch('gui/saveSetting', {name: 'gcodeViewer.voxelWidth', value: newVal})\n    }\n\n    get voxelHeight() {\n        return this.$store.state.gui.gcodeViewer.voxelHeight ?? 1\n    }\n\n    set voxelHeight(newVal) {\n        this.$store.dispatch('gui/saveSetting', {name: 'gcodeViewer.voxelHeight', value: newVal})\n    }\n\n    get specularLighting() {\n        return this.$store.state.gui.gcodeViewer.specularLighting\n    }\n\n    set specularLighting(newVal) {\n        this.$store.dispatch('gui/saveSetting', {name: 'gcodeViewer.specularLighting', value: newVal})\n    }\n\n    @Watch('specularLighting')\n    async specularLightingChanged(newVal: boolean) {\n        if (viewer) {\n            viewer.gcodeProcessor.useSpecularColor(newVal)\n            //await this.reloadViewer()\n        }\n    }\n\n    get extruderColors() {\n        return this.$store.state.gui.gcodeViewer?.extruderColors ?? false\n    }\n\n    loadToolColors(colors: string[]) {\n        if (viewer && colors.length) {\n            viewer.gcodeProcessor.resetTools()\n            colors.forEach((color: string) => {\n                viewer.gcodeProcessor.addTool(color, this.nozzle_diameter)\n            })\n            this.setReloadRequiredFlag()\n        }\n    }\n\n    @Watch('extruderColors')\n    extruderColorsChanged(newVal: string[]) {\n        if (viewer && newVal && newVal.length) {\n            this.loadToolColors(newVal)\n            this.setReloadRequiredFlag()\n        }\n    }\n\n    private colorModes = [\n        {text: 'Extruder', value: 0},\n        {text: 'Feed Rate', value: 1},\n        {text: 'Feature', value: 2},\n    ]\n\n    get colorMode(): number {\n        return this.$store.state.gui.gcodeViewer?.colorMode ?? 2\n    }\n\n    set colorMode(newVal: number) {\n        this.$store.dispatch('gui/saveSetting', {name: 'gcodeViewer.colorMode', value: newVal})\n\n        if (viewer) {\n            if (viewer.gcodeProcessor.colorMode !== newVal) {\n                viewer.gcodeProcessor.setColorMode(newVal)\n                this.reloadViewer()\n            }\n        }\n    }\n\n    get backgroundColor() {\n        return this.$store.state.gui.gcodeViewer?.backgroundColor ?? '#121212'\n    }\n\n    @Watch('backgroundColor')\n    backgroundColorChanged(newVal: string) {\n        if (!viewer) return\n        viewer.setBackgroundColor(newVal)\n    }\n\n    get gridColor() {\n        return this.$store.state.gui.gcodeViewer?.gridColor ?? '#B3B3B3'\n    }\n\n    @Watch('gridColor')\n    gridColorChanged(newVal: string) {\n        if (!viewer) return\n        viewer.bed.setBedColor(newVal)\n    }\n\n    get showAxes() {\n        return this.$store.state.gui.gcodeViewer?.showAxes ?? true\n    }\n\n    @Watch('showAxes')\n    showAxesChanged(newVal: boolean) {\n        if (!viewer) return\n        viewer.axes.show(newVal)\n    }\n\n    get minFeed() {\n        return this.$store.state.gui.gcodeViewer?.minFeed ?? 20\n    }\n\n    @Watch('minFeed')\n    minFeedChanged(newVal: number) {\n        if (!viewer) return\n        viewer.gcodeProcessor.updateColorRate(newVal * 60, this.maxFeed * 60)\n    }\n\n    get maxFeed() {\n        return this.$store.state.gui.gcodeViewer?.maxFeed ?? 100\n    }\n\n    @Watch('maxFeed')\n    maxFeedChanged(newVal: number) {\n        if (!viewer) return\n        viewer.gcodeProcessor.updateColorRate(this.minFeed * 60, newVal * 60)\n    }\n\n    get minFeedColor() {\n        return this.$store.state.gui.gcodeViewer?.minFeedColor ?? '#0000FF'\n    }\n\n    @Watch('minFeedColor')\n    minFeedColorUpdated(newVal: string) {\n        if (!viewer) return\n        viewer.gcodeProcessor.updateMinFeedColor(newVal)\n        this.setReloadRequiredFlag()\n    }\n\n    get maxFeedColor() {\n        return this.$store.state.gui.gcodeViewer?.maxFeedColor ?? '#FF0000'\n    }\n\n    @Watch('maxFeedColor')\n    maxFeedColorUpdated(newVal: string) {\n        if (!viewer) return\n        viewer.gcodeProcessor.updateMaxFeedColor(newVal)\n        this.setReloadRequiredFlag()\n    }\n\n    get kinematics() {\n        return this.$store.state.printer.configfile?.settings?.printer?.kinematics ?? ''\n    }\n\n    @Watch('kinematics')\n    kinematicsChanged(newVal: string) {\n        if (viewer && newVal) {\n            viewer.bed.setDelta(newVal.includes('delta'))\n        }\n    }\n\n    get bedMinSize() {\n        return this.$store.state.printer.toolhead?.axis_minimum ?? null\n    }\n\n    @Watch('bedMinSize', {deep: true})\n    bedMinSizeChanged(newVal: number[] | null) {\n        if (viewer && newVal) {\n            viewer.bed.buildVolume['x'].min = newVal[0]\n            viewer.bed.buildVolume['y'].min = newVal[1]\n            viewer.bed.buildVolume['z'].min = newVal[2]\n        }\n    }\n\n    get bedMaxSize() {\n        return this.$store.state.printer.toolhead?.axis_maximum ?? null\n    }\n\n    @Watch('bedMaxSize', {deep: true})\n    bedMaxSizeChanged(newVal: number[] | null) {\n        if (newVal && viewer) {\n            viewer.bed.buildVolume['x'].max = newVal[0]\n            viewer.bed.buildVolume['y'].max = newVal[1]\n            viewer.bed.buildVolume['z'].max = newVal[2]\n        }\n    }\n\n    @Watch('zSlider')\n    zSliderChanged(newVal: number) {\n        viewer?.setZClipPlane(newVal, -1)\n        viewer?.forceRender()\n    }\n\n    get progressColor() {\n        return this.$store.state.gui.gcodeViewer?.progressColor ?? '#FFFFFF'\n    }\n\n    @Watch('progressColor')\n    progressColorChanged(newVal: string) {\n        viewer?.setProgressColor(newVal)\n    }\n\n    updateZSlider(newVal: any) {\n        this.zSlider = newVal\n    }\n}\n"],"sourceRoot":""}]}