{"remainingRequest":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/components/panels/ControlPanelExtruder.vue?vue&type=style&index=0&id=92996ed8&lang=scss&scoped=true&","dependencies":[{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/components/panels/ControlPanelExtruder.vue","mtime":1644874918000},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1645990066541},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1645990070825},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/postcss-loader/src/index.js","mtime":1645990067674},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/sass-loader/dist/cjs.js","mtime":1645990064431},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js","mtime":1645990064605},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1645990069130}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5idG5Ib21lQXhpcyB7CiAgICB3aWR0aDogMzZweDsKICAgIG1pbi13aWR0aDogMzZweCAhaW1wb3J0YW50Owp9CgouYnRuTWluV2lkdGhBdXRvIHsKICAgIG1pbi13aWR0aDogYXV0byAhaW1wb3J0YW50Owp9Cgouc3RlcHMgewogICAgd2lkdGg6IDEwMCU7CiAgICA+IGRpdiB7CiAgICAgICAgd2lkdGg6IDEwMCU7CiAgICAgICAgZGlzcGxheTogZmxleDsKICAgICAgICA+IGJ1dHRvbiB7CiAgICAgICAgICAgIGZsZXgtZ3JvdzogMTsKICAgICAgICB9CiAgICB9Cn0K"},{"version":3,"sources":["ControlPanelExtruder.vue"],"names":[],"mappings":";AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ControlPanelExtruder.vue","sourceRoot":"src/components/panels","sourcesContent":["<style lang=\"scss\" scoped>\n.btnHomeAxis {\n    width: 36px;\n    min-width: 36px !important;\n}\n\n.btnMinWidthAuto {\n    min-width: auto !important;\n}\n\n.steps {\n    width: 100%;\n    > div {\n        width: 100%;\n        display: flex;\n        > button {\n            flex-grow: 1;\n        }\n    }\n}\n</style>\n\n<template>\n    <div class=\"mt-6\">\n        <v-row>\n            <v-col class=\"pa-0\">\n                <v-divider></v-divider>\n            </v-col>\n        </v-row>\n        <v-row class=\"\">\n            <v-col class=\"col col-md-6 pt-2\">\n                <span class=\"text--disabled\" style=\"font-size: .9em\">{{ $t(\"Panels.ControlPanel.FeedAmountIn\") }} [mm]</span>\n                <v-btn-toggle class=\"mt-1\" dense no-gutters style=\"flex-wrap: nowrap; width: 100%;\" >\n                    <v-btn v-for=\"amount in feedamountsSorted\" v-bind:key=\"amount\" @click=\"setFeedAmount(amount)\" dense :class=\"(amount === currentFeedAmount ? 'v-btn--active' : '') + ' btnMinWidthAuto flex-grow-1 px-0 _btnFeedrate'\">{{ amount }}</v-btn>\n                </v-btn-toggle>\n            </v-col>\n            <v-col class=\"col col-md-6 pt-2\">\n                <span class=\"text--disabled\" style=\"font-size: .9em\">{{ $t(\"Panels.ControlPanel.FeedrateIn\") }} [mm/s]</span>\n                <v-btn-toggle class=\"mt-1\" dense no-gutters style=\"flex-wrap: nowrap; width: 100%;\" >\n                    <v-tooltip top v-for=\"rate in feedratesSorted\" v-bind:key=\"rate\" color=\"panel\">\n                        <template v-slot:activator=\"{ on, attrs }\">\n                            <v-btn v-bind=\"attrs\" v-on=\"on\" @click=\"setFeedrate(rate)\" dense :class=\"(rate === currentFeedRate ? 'v-btn--active' : '') + ' btnMinWidthAuto flex-grow-1 px-0 _btnFeedrate'\">{{ rate }}</v-btn>\n                        </template>\n                        <span v-if=\"filamentDiameter\">{{ Math.round(Math.pow(filamentDiameter / 2, 2) * Math.PI * rate * 10) / 10 }} mm&sup3;/s</span>\n                    </v-tooltip>\n                </v-btn-toggle>\n            </v-col>\n        </v-row>\n        <v-row class=\"\">\n            <v-col class=\"col text-center pt-0\">\n                <v-tooltip top :disabled=\"boolExtrudePossible\" color=\"panel\">\n                    <template v-slot:activator=\"{ on }\">\n                        <div v-on=\"on\" class=\"d-inline-block\">\n                            <v-btn small @click=\"sendRetract()\" class=\"mx-3\" :loading=\"loadings.includes('btnRetract')\" :disabled=\"!boolExtrudePossible\"><v-icon small class=\"mr-1\">mdi-arrow-up-bold</v-icon> {{ $t('Panels.ControlPanel.Retract') }}</v-btn>\n                        </div>\n                    </template>\n                    <span>\n                        {{ $t(\"Panels.ControlPanel.HotendTooCold\") }} {{ minExtrudeTemp }} °C\n                    </span>\n                </v-tooltip>\n                <v-tooltip top :disabled=\"boolExtrudePossible\" color=\"panel\">\n                    <template v-slot:activator=\"{ on }\">\n                        <div v-on=\"on\" class=\"d-inline-block\">\n                            <v-btn small @click=\"sendDetract()\" class=\"mx-3\" :loading=\"loadings.includes('btnDetract')\" :disabled=\"!boolExtrudePossible\"><v-icon small class=\"mr-1\">mdi-arrow-down-bold</v-icon> {{ $t('Panels.ControlPanel.Extrude') }}</v-btn>\n                        </div>\n                    </template>\n                    <span>\n                        {{ $t(\"Panels.ControlPanel.HotendTooCold\") }} {{ minExtrudeTemp }} °C\n                    </span>\n                </v-tooltip>\n            </v-col>\n        </v-row>\n    </div>\n</template>\n\n<script lang=\"ts\">\nimport {Component, Mixins} from 'vue-property-decorator'\nimport BaseMixin from '../mixins/base'\n\n@Component\nexport default class ControlPanelExtruder extends Mixins(BaseMixin) {\n\n    get filamentDiameter() {\n        return this.$store.state.printer.configfile?.settings?.extruder?.filament_diameter ?? 1.75\n    }\n\n    get feedamounts() {\n        return this.$store.state.gui.control.extruder?.feedamounts ?? []\n    }\n\n    get feedrates() {\n        return this.$store.state.gui.control.extruder?.feedrates ?? []\n    }\n\n    get feedamountsSorted() {\n        return [...this.feedamounts].sort((a,b) => { return b-a })\n    }\n\n    get feedratesSorted () {\n        return [...this.feedrates].sort((a,b) => { return b-a })\n    }\n\n    get currentFeedAmount() {\n        return parseFloat(this.$store.state.gui.control.extruder.feedamount)\n    }\n\n    set currentFeedAmount(newVal) {\n        this.$store.dispatch('gui/saveSetting', { name: 'control.extruder.feedamount', value: newVal })\n    }\n\n    get currentFeedRate() {\n        return parseFloat(this.$store.state.gui.control.extruder.feedrate)\n    }\n\n    set currentFeedRate(newVal) {\n        this.$store.dispatch('gui/saveSetting', { name: 'control.extruder.feedrate', value: newVal })\n    }\n\n    get boolExtrudePossible() {\n        return this.$store.getters['printer/getExtrudePossible']\n    }\n\n    get minExtrudeTemp() {\n        return this.$store.state.printer.configfile.settings.extruder.min_extrude_temp\n    }\n\n    doSend(gcode: string) {\n        this.$store.dispatch('server/addEvent', { message: gcode, type: 'command' })\n        this.$socket.emit('printer.gcode.script', { script: gcode })\n    }\n\n    setFeedAmount(value: number) {\n        this.currentFeedAmount = value\n    }\n\n    setFeedrate(value: number) {\n        this.currentFeedRate = value\n    }\n\n    sendRetract() {\n        const gcode = 'M83\\nG1 E-'+this.currentFeedAmount+' F'+(this.currentFeedRate * 60)\n        this.$store.dispatch('server/addEvent', { message: gcode, type: 'command' })\n        this.$socket.emit('printer.gcode.script', { script: gcode }, { loading: 'btnRetract' })\n    }\n\n    sendDetract() {\n        const gcode = 'M83\\nG1 E'+this.currentFeedAmount+' F'+(this.currentFeedRate * 60)\n        this.$store.dispatch('server/addEvent', { message: gcode, type: 'command' })\n        this.$socket.emit('printer.gcode.script', { script: gcode }, { loading: 'btnDetract' })\n    }\n}\n</script>\n"]}]}