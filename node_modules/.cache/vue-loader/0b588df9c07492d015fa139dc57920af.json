{"remainingRequest":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/components/inputs/Codemirror.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/components/inputs/Codemirror.vue","mtime":1644874918000},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js","mtime":1645990064605},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/babel-loader/lib/index.js","mtime":1645990067759},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/ts-loader/index.js","mtime":1645990068168},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js","mtime":1645990064605},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1645990069130}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCi8vIEluc3BpcmVkIGJ5IHRoZXNlIHJlcG86IGh0dHBzOi8vZ2l0aHViLmNvbS9zdXJtb24tY2hpbmEvdnVlLWNvZGVtaXJyb3IKCmltcG9ydCB7Q29tcG9uZW50LCBNaXhpbnMsIFByb3AsIFdhdGNofSBmcm9tICd2dWUtcHJvcGVydHktZGVjb3JhdG9yJwppbXBvcnQgQmFzZU1peGluIGZyb20gJy4uL21peGlucy9iYXNlJwppbXBvcnQge2Jhc2ljU2V0dXAsIEVkaXRvclN0YXRlfSBmcm9tICdAY29kZW1pcnJvci9iYXNpYy1zZXR1cCcKaW1wb3J0IHttYWluc2FpbFRoZW1lfSBmcm9tICdAL3BsdWdpbnMvY29kZW1pcnJvclRoZW1lJwppbXBvcnQge1N0cmVhbUxhbmd1YWdlfSBmcm9tICdAY29kZW1pcnJvci9zdHJlYW0tcGFyc2VyJwppbXBvcnQgeyBrbGlwcGVyX2NvbmZpZyB9IGZyb20gJ0AvcGx1Z2lucy9TdHJlYW1QYXJzZXJLbGlwcGVyQ29uZmlnJwppbXBvcnQgeyBnY29kZSB9IGZyb20gJ0AvcGx1Z2lucy9TdHJlYW1QYXJzZXJHY29kZScKaW1wb3J0IHtFZGl0b3JWaWV3LCBrZXltYXB9IGZyb20gJ0Bjb2RlbWlycm9yL3ZpZXcnCmltcG9ydCB7aW5kZW50V2l0aFRhYn0gZnJvbSAnQGNvZGVtaXJyb3IvY29tbWFuZHMnCmltcG9ydCB7anNvbn0gZnJvbSAnQGNvZGVtaXJyb3IvbGFuZy1qc29uJwoKQENvbXBvbmVudApleHBvcnQgZGVmYXVsdCBjbGFzcyBDb2RlbWlycm9yIGV4dGVuZHMgTWl4aW5zKEJhc2VNaXhpbikgewogICAgcHJpdmF0ZSBjb250ZW50ID0gJycKICAgIHByaXZhdGUgY29kZW1pcnJvcjogbnVsbCB8IEVkaXRvclZpZXcgPSBudWxsCiAgICBwcml2YXRlIGNtaW5zdGFuY2U6IG51bGwgfCBFZGl0b3JWaWV3ID0gbnVsbAoKICAgICRyZWZzITogewogICAgICAgIGNvZGVtaXJyb3I6IEhUTUxFbGVtZW50CiAgICB9CgogICAgQFByb3AoeyByZXF1aXJlZDogZmFsc2UsIGRlZmF1bHQ6ICcnIH0pCiAgICByZWFkb25seSBjb2RlITogc3RyaW5nCgogICAgQFByb3AoeyByZXF1aXJlZDogZmFsc2UsIGRlZmF1bHQ6ICcnIH0pCiAgICB2YWx1ZSE6IHN0cmluZwoKICAgIEBQcm9wKHsgcmVxdWlyZWQ6IGZhbHNlLCBkZWZhdWx0OiAnY29kZW1pcnJvcicgfSkKICAgIHJlYWRvbmx5IG5hbWUhOiBzdHJpbmcKCiAgICBAUHJvcCh7IHJlcXVpcmVkOiBmYWxzZSwgZGVmYXVsdDogJycgfSkKICAgIHJlYWRvbmx5IGZpbGVFeHRlbnNpb24hOiBzdHJpbmcKCiAgICBAV2F0Y2goJ3ZhbHVlJykKICAgIHZhbHVlQ2hhbmdlZChuZXdWYWw6IHN0cmluZykgewogICAgICAgIGNvbnN0IGNtX3ZhbHVlID0gdGhpcy5jbWluc3RhbmNlPy5zdGF0ZT8uZG9jLnRvU3RyaW5nKCkKICAgICAgICBpZiAobmV3VmFsICE9PSBjbV92YWx1ZSkgewogICAgICAgICAgICB0aGlzLnNldENtVmFsdWUobmV3VmFsKQogICAgICAgIH0KICAgIH0KCiAgICBtb3VudGVkKCk6IHZvaWQgewogICAgICAgIHRoaXMuaW5pdGlhbGl6ZSgpCiAgICB9CgogICAgYmVmb3JlRGVzdHJveSgpIHsKICAgICAgICB0aGlzLmRlc3Ryb3koKQogICAgfQoKICAgIGRlc3Ryb3koKSB7CiAgICAgICAgdGhpcy5jbWluc3RhbmNlPy5kZXN0cm95KCkKICAgIH0KCiAgICBpbml0aWFsaXplKCkgewogICAgICAgIHRoaXMuY29kZW1pcnJvciA9IG5ldyBFZGl0b3JWaWV3KHsKICAgICAgICAgICAgcGFyZW50OiB0aGlzLiRyZWZzLmNvZGVtaXJyb3IsCiAgICAgICAgfSkKICAgICAgICB0aGlzLmNtaW5zdGFuY2UgPSB0aGlzLmNvZGVtaXJyb3IKCiAgICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4gewogICAgICAgICAgICB0aGlzLnNldENtVmFsdWUodGhpcy5jb2RlIHx8IHRoaXMudmFsdWUgfHwgdGhpcy5jb250ZW50KQoKICAgICAgICAgICAgdGhpcy4kZW1pdCgncmVhZHknLCB0aGlzLmNvZGVtaXJyb3IpCiAgICAgICAgfSkKICAgIH0KCiAgICBzZXRDbVZhbHVlKGNvbnRlbnQ6IHN0cmluZykgewogICAgICAgIHRoaXMuY21pbnN0YW5jZT8uc2V0U3RhdGUoRWRpdG9yU3RhdGUuY3JlYXRlKHsgZG9jOiBjb250ZW50LCBleHRlbnNpb25zOiB0aGlzLmNtRXh0ZW5zaW9ucyB9KSkKICAgIH0KCiAgICBnZXQgY21FeHRlbnNpb25zKCkgewogICAgICAgIGNvbnN0IGV4dGVuc2lvbnMgPSBbCiAgICAgICAgICAgIGJhc2ljU2V0dXAsCiAgICAgICAgICAgIG1haW5zYWlsVGhlbWUsCiAgICAgICAgICAgIGtleW1hcC5vZihbaW5kZW50V2l0aFRhYl0pLAogICAgICAgICAgICBFZGl0b3JWaWV3LnVwZGF0ZUxpc3RlbmVyLm9mKHVwZGF0ZSA9PiB7CiAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnQgPSB1cGRhdGUuc3RhdGU/LmRvYy50b1N0cmluZygpCiAgICAgICAgICAgICAgICBpZiAodGhpcy4kZW1pdCkgewogICAgICAgICAgICAgICAgICAgIHRoaXMuJGVtaXQoJ2lucHV0JywgdGhpcy5jb250ZW50KQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSwKICAgICAgICBdCgogICAgICAgIGlmIChbJ2NmZycsICdjb25mJ10uaW5jbHVkZXModGhpcy5maWxlRXh0ZW5zaW9uKSkKICAgICAgICAgICAgZXh0ZW5zaW9ucy5wdXNoKFN0cmVhbUxhbmd1YWdlLmRlZmluZShrbGlwcGVyX2NvbmZpZykpCiAgICAgICAgZWxzZSBpZiAoWydnY29kZSddLmluY2x1ZGVzKHRoaXMuZmlsZUV4dGVuc2lvbikpCiAgICAgICAgICAgIGV4dGVuc2lvbnMucHVzaChTdHJlYW1MYW5ndWFnZS5kZWZpbmUoZ2NvZGUpKQogICAgICAgIGVsc2UgaWYgKFsnanNvbiddLmluY2x1ZGVzKHRoaXMuZmlsZUV4dGVuc2lvbikpCiAgICAgICAgICAgIGV4dGVuc2lvbnMucHVzaChqc29uKCkpCgogICAgICAgIHJldHVybiBleHRlbnNpb25zCiAgICB9CgogICAgdmlzaWJpbGl0eUNoYW5nZWQoaXNWaXNpYmxlOiBib29sZWFuKSB7CiAgICAgICAgaWYgKGlzVmlzaWJsZSkgdGhpcy5jbWluc3RhbmNlPy5mb2N1cygpCiAgICB9Cn0K"},{"version":3,"sources":["Codemirror.vue"],"names":[],"mappings":";;;;;;;;;;;;;AAaA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA","file":"Codemirror.vue","sourceRoot":"src/components/inputs","sourcesContent":["<style>\n    .vue-codemirror .cm-editor {\n\n    }\n</style>\n\n<template>\n    <div class=\"vue-codemirror\">\n        <div ref=\"codemirror\" v-observe-visibility=\"visibilityChanged\"></div>\n    </div>\n</template>\n\n<script lang=\"ts\">\n// Inspired by these repo: https://github.com/surmon-china/vue-codemirror\n\nimport {Component, Mixins, Prop, Watch} from 'vue-property-decorator'\nimport BaseMixin from '../mixins/base'\nimport {basicSetup, EditorState} from '@codemirror/basic-setup'\nimport {mainsailTheme} from '@/plugins/codemirrorTheme'\nimport {StreamLanguage} from '@codemirror/stream-parser'\nimport { klipper_config } from '@/plugins/StreamParserKlipperConfig'\nimport { gcode } from '@/plugins/StreamParserGcode'\nimport {EditorView, keymap} from '@codemirror/view'\nimport {indentWithTab} from '@codemirror/commands'\nimport {json} from '@codemirror/lang-json'\n\n@Component\nexport default class Codemirror extends Mixins(BaseMixin) {\n    private content = ''\n    private codemirror: null | EditorView = null\n    private cminstance: null | EditorView = null\n\n    $refs!: {\n        codemirror: HTMLElement\n    }\n\n    @Prop({ required: false, default: '' })\n    readonly code!: string\n\n    @Prop({ required: false, default: '' })\n    value!: string\n\n    @Prop({ required: false, default: 'codemirror' })\n    readonly name!: string\n\n    @Prop({ required: false, default: '' })\n    readonly fileExtension!: string\n\n    @Watch('value')\n    valueChanged(newVal: string) {\n        const cm_value = this.cminstance?.state?.doc.toString()\n        if (newVal !== cm_value) {\n            this.setCmValue(newVal)\n        }\n    }\n\n    mounted(): void {\n        this.initialize()\n    }\n\n    beforeDestroy() {\n        this.destroy()\n    }\n\n    destroy() {\n        this.cminstance?.destroy()\n    }\n\n    initialize() {\n        this.codemirror = new EditorView({\n            parent: this.$refs.codemirror,\n        })\n        this.cminstance = this.codemirror\n\n        this.$nextTick(() => {\n            this.setCmValue(this.code || this.value || this.content)\n\n            this.$emit('ready', this.codemirror)\n        })\n    }\n\n    setCmValue(content: string) {\n        this.cminstance?.setState(EditorState.create({ doc: content, extensions: this.cmExtensions }))\n    }\n\n    get cmExtensions() {\n        const extensions = [\n            basicSetup,\n            mainsailTheme,\n            keymap.of([indentWithTab]),\n            EditorView.updateListener.of(update => {\n                this.content = update.state?.doc.toString()\n                if (this.$emit) {\n                    this.$emit('input', this.content)\n                }\n            }),\n        ]\n\n        if (['cfg', 'conf'].includes(this.fileExtension))\n            extensions.push(StreamLanguage.define(klipper_config))\n        else if (['gcode'].includes(this.fileExtension))\n            extensions.push(StreamLanguage.define(gcode))\n        else if (['json'].includes(this.fileExtension))\n            extensions.push(json())\n\n        return extensions\n    }\n\n    visibilityChanged(isVisible: boolean) {\n        if (isVisible) this.cminstance?.focus()\n    }\n}\n</script>\n"]}]}