{"remainingRequest":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/pages/Console.vue?vue&type=style&index=0&id=057b863a&scoped=true&lang=css&","dependencies":[{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/pages/Console.vue","mtime":1644874918000},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1645990066541},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1645990070825},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/postcss-loader/src/index.js","mtime":1645990067674},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js","mtime":1645990064605},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1645990069130}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgouY29uc29sZVNjcm9sbENvbnRhaW5lciB7CiAgICBtaW4taGVpZ2h0OiAyMDBweDsKICAgIGhlaWdodDogY2FsYyh2YXIoLS1hcHAtaGVpZ2h0KSAtIDE4MHB4KTsKfQoKLmdjb2RlLWNvbW1hbmQtZmllbGQgewogICAgZm9udC1mYW1pbHk6ICdSb2JvdG8gTW9ubycsIG1vbm9zcGFjZTsKfQo="},{"version":3,"sources":["Console.vue"],"names":[],"mappings":";;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"Console.vue","sourceRoot":"src/pages","sourcesContent":["<style scoped>\n\n.consoleScrollContainer {\n    min-height: 200px;\n    height: calc(var(--app-height) - 180px);\n}\n\n.gcode-command-field {\n    font-family: 'Roboto Mono', monospace;\n}\n</style>\n\n<template>\n    <div class=\"d-flex flex-column\">\n        <v-row :class=\"this.consoleDirection === 'table' ? 'order-0' : 'order-1 mt-3'\">\n            <v-col>\n                <v-textarea\n                    v-model=\"gcode\"\n                    :items=\"items\"\n                    :label=\"$t('Console.SendCode')\"\n                    solo\n                    class=\"gcode-command-field\"\n                    ref=\"gcodeCommandField\"\n                    autocomplete=\"off\"\n                    no-resize\n                    auto-grow\n                    :rows=\"rows\"\n                    @keydown.enter.prevent.stop=\"doSend\"\n                    @keyup.up=\"onKeyUp\"\n                    @keyup.down=\"onKeyDown\"\n                    @keydown.tab=\"getAutocomplete\"\n                    hide-details\n                    outlined\n                    dense\n                    :prepend-icon=\"isTouchDevice ? 'mdi-chevron-double-right' : ''\"\n                    @click:prepend=\"getAutocomplete\"\n                    append-icon=\"mdi-send\"\n                    @click:append=\"doSend\"\n                ></v-textarea>\n            </v-col>\n\n            <v-col class=\"col-auto d-flex align-center\">\n                <command-help-modal\n                    @onCommand=\"gcode = $event\"\n                ></command-help-modal>\n                <v-menu offset-y :top=\"consoleDirection === 'shell'\" :close-on-content-click=\"false\" :title=\"$t('Console.SetupConsole')\">\n                    <template v-slot:activator=\"{ on, attrs }\">\n                        <v-btn class=\"ml-3 px-2 minwidth-0\" color=\"lightgray\" v-bind=\"attrs\" v-on=\"on\"><v-icon>mdi-filter</v-icon></v-btn>\n                    </template>\n                    <v-list>\n                        <v-list-item class=\"minHeight36\">\n                            <v-checkbox class=\"mt-0\" v-model=\"hideWaitTemperatures\" hide-details :label=\"$t('Console.HideTemperatures')\"></v-checkbox>\n                        </v-list-item>\n                        <v-list-item class=\"minHeight36\" v-if=\"moonrakerComponents.includes('timelapse')\">\n                            <v-checkbox class=\"mt-0\" v-model=\"hideTlCommands\" hide-details :label=\"$t('Console.HideTimelapse')\"></v-checkbox>\n                        </v-list-item>\n                        <v-list-item class=\"minHeight36\" v-for=\"(filter, index) in customFilters\" v-bind:key=\"index\">\n                            <v-checkbox class=\"mt-0\" v-model=\"filter.bool\" @change=\"toggleFilter(filter)\" hide-details :label=\"filter.name\"></v-checkbox>\n                        </v-list-item>\n                    </v-list>\n                </v-menu>\n            </v-col>\n        </v-row>\n        <v-row :class=\"this.consoleDirection === 'table' ? 'order-1' : 'order-0 mt-0'\">\n            <v-col :class=\"this.consoleDirection === 'table' ? 'col' : 'col pt-0'\">\n                <v-card>\n                    <v-card-text class=\"pa-0\">\n                        <overlay-scrollbars ref=\"consoleScroll\" class=\"consoleScrollContainer d-flex flex-column\">\n                            <console-table ref=\"console\"\n                                           :is-mini=\"false\"\n                                           :events=\"events\"\n                                           @command-click=\"commandClick\"\n                            />\n                        </overlay-scrollbars>\n                    </v-card-text>\n                </v-card>\n            </v-col>\n        </v-row>\n    </div>\n</template>\n\n<script lang=\"ts\">\nimport {Component, Mixins, Watch} from 'vue-property-decorator'\nimport BaseMixin from '@/components/mixins/base'\nimport ConsoleTable from '@/components/console/ConsoleTable.vue'\nimport {CommandHelp, VTextareaType} from '@/store/printer/types'\nimport {reverseString, strLongestEqual} from '@/plugins/helpers'\nimport CommandHelpModal from '@/components/CommandHelpModal.vue'\n\n@Component({\n    components: {\n        CommandHelpModal,\n        ConsoleTable,\n    }\n})\nexport default class PageConsole extends Mixins(BaseMixin) {\n    private gcode = ''\n    private lastCommandNumber: number | null = null\n    private items = []\n\n    $refs!: {\n        gcodeCommandField: VTextareaType,\n        console: ConsoleTable,\n        consoleScroll: any\n    }\n\n    get helplist(): CommandHelp[] {\n        return this.$store.state.printer.helplist ?? []\n    }\n\n    get consoleDirection() {\n        return this.$store.state.gui.console.direction ?? 'table'\n    }\n\n    get events() {\n        return this.$store.getters['server/getConsoleEvents'](this.consoleDirection === 'table')\n    }\n\n    @Watch('events')\n    eventsChanged() {\n        if (this.consoleDirection === 'shell') {\n            setTimeout(() => {\n                this.scrollToBottom()\n            }, 50)\n        }\n    }\n\n    get hideWaitTemperatures(): boolean {\n        return this.$store.state.gui.console.hideWaitTemperatures\n    }\n\n    set hideWaitTemperatures(newVal) {\n        this.$store.dispatch('gui/saveSetting', { name: 'console.hideWaitTemperatures', value: newVal })\n    }\n\n    get hideTlCommands(): boolean {\n        return this.$store.state.gui.console.hideWaitTemperatures\n    }\n\n    set hideTlCommands(newVal) {\n        this.$store.dispatch('gui/saveSetting', { name: 'console.hideTlCommands', value: newVal })\n    }\n\n    get rows(): number {\n        return this.gcode?.split('\\n').length ?? 1\n    }\n\n    get customFilters(): any[] {\n        return this.$store.state.gui.console.consolefilters\n    }\n\n    get lastCommands(): string[] {\n        return this.$store.state.gui.gcodehistory.entries ?? []\n    }\n\n    commandClick(msg: string): void {\n        this.gcode = msg\n\n        this.$nextTick(() => {\n            this.$refs.gcodeCommandField.focus()\n        })\n    }\n\n    doSend(cmd: KeyboardEvent): void {\n        if (!cmd.shiftKey) {\n            if (this.gcode !== '') {\n                this.$store.dispatch('printer/sendGcode', this.gcode)\n                this.$store.dispatch('gui/gcodehistory/addToHistory', this.gcode)\n                this.gcode = ''\n                this.lastCommandNumber = null\n                setTimeout(() => {\n                    this.$refs.console.$el.scroll({\n                        top: 0,\n                        left: 0,\n                        behavior: 'smooth'\n                    })\n                }, 20)\n            }\n        } else this.gcode += '\\n'\n    }\n\n    onKeyUp(): void {\n        if (this.lastCommandNumber === null && this.lastCommands.length) {\n            this.lastCommandNumber = this.lastCommands.length - 1\n            this.gcode = this.lastCommands[this.lastCommandNumber]\n        } else if (this.lastCommandNumber && this.lastCommandNumber > 0) {\n            this.lastCommandNumber--\n            this.gcode = this.lastCommands[this.lastCommandNumber]\n        }\n    }\n\n    onKeyDown(): void {\n        if (this.lastCommandNumber !== null && this.lastCommandNumber < (this.lastCommands.length - 1)) {\n            this.lastCommandNumber++\n            this.gcode = this.lastCommands[this.lastCommandNumber]\n        } else if (this.lastCommandNumber !== null && this.lastCommandNumber === (this.lastCommands.length - 1)) {\n            this.lastCommandNumber = null\n            this.gcode = ''\n        }\n    }\n\n    getAutocomplete(e: Event): void {\n        e.preventDefault()\n        if (this.gcode.length) {\n            let check = this.gcode.toLowerCase()\n            const textarea = this.$refs.gcodeCommandField.$refs.input\n            const sentence = textarea.value\n            const len = sentence.length\n            const pos = textarea.selectionStart\n            const currentLinePos = len - reverseString(sentence).indexOf('\\n', len - pos)\n            const currentEndPos = sentence.indexOf('\\n', currentLinePos) > -1 ? sentence.indexOf('\\n', currentLinePos) - 1 : Number.MAX_SAFE_INTEGER\n            if (this.rows > 1) {\n                check = sentence.substr(currentLinePos, currentEndPos - currentLinePos)\n            }\n            let commands = this.helplist.filter((element) => element.commandLow.startsWith(check.toLowerCase()))\n            if (commands?.length === 1) {\n                if (this.rows > 1) {\n                    this.gcode = this.gcode.replace(check, commands[0].command)\n                } else {\n                    this.gcode = commands[0].command\n                }\n            } else if(commands?.length > 1) {\n                let commands = this.helplist.filter((element) => element.commandLow.startsWith(check.toLowerCase()))\n                if (this.rows > 1) {\n                    this.gcode = this.gcode.replace(check, commands.reduce((acc, val) => {\n                        return strLongestEqual(acc, val.command)\n                    }, commands[0].command))\n                } else {\n                    this.gcode = commands.reduce((acc, val) => {\n                        return strLongestEqual(acc, val.command)\n                    }, commands[0].command)\n                }\n                if (commands && commands.length) {\n                    let output = ''\n                    commands.forEach(command => output += '<a class=\\'command blue--text\\'>'+command.command+'</a>: '+command.description+'<br />')\n\n                    this.$store.dispatch('server/addEvent', { message: output, type: 'autocomplete' })\n                }\n            }\n        }\n        this.$refs.gcodeCommandField.focus()\n    }\n\n    toggleFilter(filter: string): void {\n        this.$store.dispatch('gui/updateConsoleFilter',  filter)\n    }\n\n    mounted() {\n        if (this.consoleDirection === 'shell') this.scrollToBottom()\n    }\n\n    scrollToBottom() {\n        this.$nextTick(() => {\n            if (this.$refs.consoleScroll) {\n                const overlayscroll = this.$refs.consoleScroll.osInstance()\n                overlayscroll?.scroll({ y: '100%' })\n            }\n        })\n    }\n}\n</script>\n"]}]}