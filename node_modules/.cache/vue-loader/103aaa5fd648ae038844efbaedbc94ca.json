{"remainingRequest":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/components/panels/GcodefilesPanel.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/components/panels/GcodefilesPanel.vue","mtime":1644874918000},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js","mtime":1645990064605},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/thread-loader/dist/cjs.js","mtime":1645990064416},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/babel-loader/lib/index.js","mtime":1645990067759},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/ts-loader/index.js","mtime":1645990068168},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js","mtime":1645990064605},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1645990069130}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgppbXBvcnQge0NvbXBvbmVudCwgTWl4aW5zLCBXYXRjaH0gZnJvbSAndnVlLXByb3BlcnR5LWRlY29yYXRvcicKaW1wb3J0IEJhc2VNaXhpbiBmcm9tICdAL2NvbXBvbmVudHMvbWl4aW5zL2Jhc2UnCmltcG9ydCBheGlvcyBmcm9tICdheGlvcycKaW1wb3J0IHt0aHVtYm5haWxTbWFsbE1pbiwgdGh1bWJuYWlsU21hbGxNYXgsIHRodW1ibmFpbEJpZ01pbiwgdmFsaWRHY29kZUV4dGVuc2lvbnN9IGZyb20gJ0Avc3RvcmUvdmFyaWFibGVzJwppbXBvcnQge2Zvcm1hdEZpbGVzaXplLCBmb3JtYXREYXRlLCBzb3J0RmlsZXMsIGZvcm1hdFByaW50VGltZX0gZnJvbSAnQC9wbHVnaW5zL2hlbHBlcnMnCmltcG9ydCB7RmlsZVN0YXRlRmlsZX0gZnJvbSAnQC9zdG9yZS9maWxlcy90eXBlcycKaW1wb3J0IFBhbmVsIGZyb20gJ0AvY29tcG9uZW50cy91aS9QYW5lbC52dWUnCmltcG9ydCBTZXR0aW5nc1JvdyBmcm9tICdAL2NvbXBvbmVudHMvc2V0dGluZ3MvU2V0dGluZ3NSb3cudnVlJwoKaW50ZXJmYWNlIGRyYWdnaW5nRmlsZSB7CiAgICBzdGF0dXM6IGJvb2xlYW4KICAgIGl0ZW06IEZpbGVTdGF0ZUZpbGUKfQoKaW50ZXJmYWNlIHVwbG9hZFNuYWNrYmFyIHsKICAgIHN0YXR1czogYm9vbGVhbgogICAgZmlsZW5hbWU6IHN0cmluZwogICAgcGVyY2VudDogbnVtYmVyCiAgICBzcGVlZDogbnVtYmVyCiAgICB0b3RhbDogbnVtYmVyCiAgICBudW1iZXI6IG51bWJlcgogICAgbWF4OiBudW1iZXIKICAgIGNhbmNlbFRva2VuU291cmNlOiBhbnkKICAgIGxhc3RQcm9ncmVzczogewogICAgICAgIHRpbWU6IG51bWJlcgogICAgICAgIGxvYWRlZDogbnVtYmVyCiAgICB9Cn0KCmludGVyZmFjZSBkaWFsb2dQcmludEZpbGUgewogICAgc2hvdzogYm9vbGVhbgogICAgaXRlbTogRmlsZVN0YXRlRmlsZQp9CgppbnRlcmZhY2UgZGlhbG9nUmVuYW1lT2JqZWN0IHsKICAgIHNob3c6IGJvb2xlYW4KICAgIG5ld05hbWU6IHN0cmluZwogICAgaXRlbTogRmlsZVN0YXRlRmlsZQp9CgpAQ29tcG9uZW50KHsKICAgIGNvbXBvbmVudHM6IHtQYW5lbCxTZXR0aW5nc1Jvd30KfSkKZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2NvZGVmaWxlc1BhbmVsIGV4dGVuZHMgTWl4aW5zKEJhc2VNaXhpbikgewogICAgdmFsaWRHY29kZUV4dGVuc2lvbnMgPSB2YWxpZEdjb2RlRXh0ZW5zaW9ucwogICAgZm9ybWF0RGF0ZSA9IGZvcm1hdERhdGUKICAgIGZvcm1hdEZpbGVzaXplID0gZm9ybWF0RmlsZXNpemUKICAgIGZvcm1hdFByaW50VGltZSA9IGZvcm1hdFByaW50VGltZQogICAgc29ydEZpbGVzID0gc29ydEZpbGVzCgogICAgJHJlZnMhOiB7CiAgICAgICAgZmlsZVVwbG9hZDogSFRNTElucHV0RWxlbWVudCwKICAgICAgICBpbnB1dEZpZWxkUmVuYW1lRmlsZTogSFRNTElucHV0RWxlbWVudCwKICAgICAgICBpbnB1dEZpZWxkQ3JlYXRlRGlyZWN0b3J5OiBIVE1MSW5wdXRFbGVtZW50LAogICAgICAgIGlucHV0RmllbGRSZW5hbWVEaXJlY3Rvcnk6IEhUTUxJbnB1dEVsZW1lbnQsCiAgICB9CgogICAgcHJpdmF0ZSBUaW1lbGFwc2VNb2RlT3B0aW9ucyA9IFsKICAgICAgICB7CiAgICAgICAgICAgIHRleHQ6ICdsYXllcm1hY3JvJywKICAgICAgICAgICAgdmFsdWU6ICdsYXllcm1hY3JvJwogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgICB0ZXh0OiAnaHlwZXJsYXBzZScsCiAgICAgICAgICAgIHZhbHVlOiAnaHlwZXJsYXBzZScKICAgICAgICB9CiAgICBdCgogICAgcHJpdmF0ZSBzZWFyY2ggPSAnJwogICAgcHJpdmF0ZSBzZWxlY3RlZCA9IFtdCiAgICBwcml2YXRlIGhpZGVIZWFkZXJDb2x1bXMgPSBbXQogICAgcHJpdmF0ZSBkcm9wem9uZSA9IHsKICAgICAgICB2aXNpYmlsaXR5OiAnaGlkZGVuJywKICAgICAgICBvcGFjaXR5OiAwLAogICAgfQogICAgcHJpdmF0ZSBkcmFnZ2luZ0ZpbGU6IGRyYWdnaW5nRmlsZSA9IHsKICAgICAgICBzdGF0dXM6IGZhbHNlLAogICAgICAgIGl0ZW06IHsKICAgICAgICAgICAgaXNEaXJlY3Rvcnk6IGZhbHNlLAogICAgICAgICAgICBmaWxlbmFtZTogJycsCiAgICAgICAgICAgIHBlcm1pc3Npb25zOiAnJywKICAgICAgICAgICAgbW9kaWZpZWQ6IG5ldyBEYXRlKCkKICAgICAgICB9CiAgICB9CiAgICBwcml2YXRlIHVwbG9hZFNuYWNrYmFyOiB1cGxvYWRTbmFja2JhciA9IHsKICAgICAgICBzdGF0dXM6IGZhbHNlLAogICAgICAgIGZpbGVuYW1lOiAnJywKICAgICAgICBwZXJjZW50OiAwLAogICAgICAgIHNwZWVkOiAwLAogICAgICAgIHRvdGFsOiAwLAogICAgICAgIG51bWJlcjogMCwKICAgICAgICBtYXg6IDAsCiAgICAgICAgY2FuY2VsVG9rZW5Tb3VyY2U6IHt9LAogICAgICAgIGxhc3RQcm9ncmVzczogewogICAgICAgICAgICB0aW1lOiAwLAogICAgICAgICAgICBsb2FkZWQ6IDAKICAgICAgICB9CiAgICB9CiAgICBwcml2YXRlIGRpYWxvZ0NyZWF0ZURpcmVjdG9yeSA9IHsKICAgICAgICBzaG93OiBmYWxzZSwKICAgICAgICBuYW1lOiAnJwogICAgfQogICAgcHJpdmF0ZSBjb250ZXh0TWVudSA9IHsKICAgICAgICBzaG93bjogZmFsc2UsCiAgICAgICAgaXNEaXJlY3Rvcnk6IGZhbHNlLAogICAgICAgIHRvdWNoVGltZXI6IHVuZGVmaW5lZCwKICAgICAgICB4OiAwLAogICAgICAgIHk6IDAsCiAgICAgICAgaXRlbTogewogICAgICAgICAgICBpc0RpcmVjdG9yeTogZmFsc2UsCiAgICAgICAgICAgIGZpbGVuYW1lOiAnJywKICAgICAgICAgICAgcGVybWlzc2lvbnM6ICcnLAogICAgICAgICAgICBtb2RpZmllZDogbmV3IERhdGUoKQogICAgICAgIH0KICAgIH0KCiAgICBwcml2YXRlIGRpYWxvZ1ByaW50RmlsZTogZGlhbG9nUHJpbnRGaWxlID0gewogICAgICAgIHNob3c6IGZhbHNlLAogICAgICAgIGl0ZW06IHsKICAgICAgICAgICAgaXNEaXJlY3Rvcnk6IGZhbHNlLAogICAgICAgICAgICBmaWxlbmFtZTogJycsCiAgICAgICAgICAgIHBlcm1pc3Npb25zOiAnJywKICAgICAgICAgICAgbW9kaWZpZWQ6IG5ldyBEYXRlKCkKICAgICAgICB9CiAgICB9CgogICAgcHJpdmF0ZSBkaWFsb2dSZW5hbWVGaWxlOiBkaWFsb2dSZW5hbWVPYmplY3QgPSB7CiAgICAgICAgc2hvdzogZmFsc2UsCiAgICAgICAgbmV3TmFtZTogJycsCiAgICAgICAgaXRlbTogewogICAgICAgICAgICBpc0RpcmVjdG9yeTogZmFsc2UsCiAgICAgICAgICAgIGZpbGVuYW1lOiAnJywKICAgICAgICAgICAgcGVybWlzc2lvbnM6ICcnLAogICAgICAgICAgICBtb2RpZmllZDogbmV3IERhdGUoKQogICAgICAgIH0KICAgIH0KCiAgICBwcml2YXRlIGRpYWxvZ1JlbmFtZURpcmVjdG9yeTogZGlhbG9nUmVuYW1lT2JqZWN0ID0gewogICAgICAgIHNob3c6IGZhbHNlLAogICAgICAgIG5ld05hbWU6ICcnLAogICAgICAgIGl0ZW06IHsKICAgICAgICAgICAgaXNEaXJlY3Rvcnk6IGZhbHNlLAogICAgICAgICAgICBmaWxlbmFtZTogJycsCiAgICAgICAgICAgIHBlcm1pc3Npb25zOiAnJywKICAgICAgICAgICAgbW9kaWZpZWQ6IG5ldyBEYXRlKCkKICAgICAgICB9CiAgICB9CgogICAgcHJpdmF0ZSBkaWFsb2dEZWxldGVEaXJlY3Rvcnk6IGRpYWxvZ1JlbmFtZU9iamVjdCA9IHsKICAgICAgICBzaG93OiBmYWxzZSwKICAgICAgICBuZXdOYW1lOiAnJywKICAgICAgICBpdGVtOiB7CiAgICAgICAgICAgIGlzRGlyZWN0b3J5OiBmYWxzZSwKICAgICAgICAgICAgZmlsZW5hbWU6ICcnLAogICAgICAgICAgICBwZXJtaXNzaW9uczogJycsCiAgICAgICAgICAgIG1vZGlmaWVkOiBuZXcgRGF0ZSgpCiAgICAgICAgfQogICAgfQoKICAgIHByaXZhdGUgaW5wdXRfcnVsZXMgPSBbCiAgICAgICAgKHZhbHVlOiBzdHJpbmcpID0+IHZhbHVlLmluZGV4T2YoJyAnKSA9PT0gLTEgfHwgJ05hbWUgY29udGFpbnMgc3BhY2VzIScKICAgIF0KCiAgICBnZXQgY3VycmVudFBhdGgoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLmd1aS52aWV3Lmdjb2RlZmlsZXMuY3VycmVudFBhdGgKICAgIH0KCiAgICBzZXQgY3VycmVudFBhdGgobmV3VmFsKSB7CiAgICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2d1aS9zYXZlU2V0dGluZ1dpdGhvdXRVcGxvYWQnLCB7IG5hbWU6ICd2aWV3Lmdjb2RlZmlsZXMuY3VycmVudFBhdGgnLCB2YWx1ZTogbmV3VmFsIH0pCiAgICB9CgogICAgZ2V0IGhlYWRlcnMoKSB7CiAgICAgICAgY29uc3QgaGVhZGVycyA9IFsKICAgICAgICAgICAgeyB0ZXh0OiAnJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICcnLCAgICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ246ICdsZWZ0JywgIGNvbmZpZ2FibGU6IGZhbHNlLCAgdmlzaWJsZTogdHJ1ZSwgZmlsdGVyYWJsZTogZmFsc2UgfSwKICAgICAgICAgICAgeyB0ZXh0OiB0aGlzLiR0KCdGaWxlcy5OYW1lJyksICAgICAgICAgICAgICAgICAgdmFsdWU6ICdmaWxlbmFtZScsICAgICAgICAgICAgICAgICAgYWxpZ246ICdsZWZ0JywgIGNvbmZpZ2FibGU6IGZhbHNlLCAgdmlzaWJsZTogdHJ1ZSB9LAogICAgICAgICAgICB7IHRleHQ6ICcnLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJ3N0YXR1cycsICAgICAgICAgICAgICAgICAgICBhbGlnbjogJ2xlZnQnLCAgY29uZmlnYWJsZTogZmFsc2UsICB2aXNpYmxlOiB0cnVlIH0sCiAgICAgICAgICAgIHsgdGV4dDogdGhpcy4kdCgnRmlsZXMuRmlsZXNpemUnKSwgICAgICAgICAgICAgIHZhbHVlOiAnc2l6ZScsICAgICAgICAgICAgICAgICAgICAgIGFsaWduOiAncmlnaHQnLCBjb25maWdhYmxlOiB0cnVlLCAgIHZpc2libGU6IHRydWUgfSwKICAgICAgICAgICAgeyB0ZXh0OiB0aGlzLiR0KCdGaWxlcy5MYXN0TW9kaWZpZWQnKSwgICAgICAgICAgdmFsdWU6ICdtb2RpZmllZCcsICAgICAgICAgICAgICAgICAgYWxpZ246ICdyaWdodCcsIGNvbmZpZ2FibGU6IHRydWUsICAgdmlzaWJsZTogdHJ1ZSB9LAogICAgICAgICAgICB7IHRleHQ6IHRoaXMuJHQoJ0ZpbGVzLk9iamVjdEhlaWdodCcpLCAgICAgICAgICB2YWx1ZTogJ29iamVjdF9oZWlnaHQnLCAgICAgICAgICAgICBhbGlnbjogJ3JpZ2h0JywgY29uZmlnYWJsZTogdHJ1ZSwgICB2aXNpYmxlOiB0cnVlIH0sCiAgICAgICAgICAgIHsgdGV4dDogdGhpcy4kdCgnRmlsZXMuTGF5ZXJIZWlnaHQnKSwgICAgICAgICAgIHZhbHVlOiAnbGF5ZXJfaGVpZ2h0JywgICAgICAgICAgICAgIGFsaWduOiAncmlnaHQnLCBjb25maWdhYmxlOiB0cnVlLCAgIHZpc2libGU6IHRydWUgfSwKICAgICAgICAgICAgeyB0ZXh0OiB0aGlzLiR0KCdGaWxlcy5Ob3p6bGVEaWFtZXRlcicpLCAgICAgICAgdmFsdWU6ICdub3p6bGVfZGlhbWV0ZXInLCAgICAgICAgICAgYWxpZ246ICdyaWdodCcsIGNvbmZpZ2FibGU6IHRydWUsICAgdmlzaWJsZTogdHJ1ZSB9LAogICAgICAgICAgICB7IHRleHQ6IHRoaXMuJHQoJ0ZpbGVzLkZpbGFtZW50TmFtZScpLCAgICAgICAgICB2YWx1ZTogJ2ZpbGFtZW50X25hbWUnLCAgICAgICAgICAgICBhbGlnbjogJ3JpZ2h0JywgY29uZmlnYWJsZTogdHJ1ZSwgICB2aXNpYmxlOiB0cnVlIH0sCiAgICAgICAgICAgIHsgdGV4dDogdGhpcy4kdCgnRmlsZXMuRmlsYW1lbnRUeXBlJyksICAgICAgICAgIHZhbHVlOiAnZmlsYW1lbnRfdHlwZScsICAgICAgICAgICAgIGFsaWduOiAncmlnaHQnLCBjb25maWdhYmxlOiB0cnVlLCAgIHZpc2libGU6IHRydWUgfSwKICAgICAgICAgICAgeyB0ZXh0OiB0aGlzLiR0KCdGaWxlcy5GaWxhbWVudFVzYWdlJyksICAgICAgICAgdmFsdWU6ICdmaWxhbWVudF90b3RhbCcsICAgICAgICAgICAgYWxpZ246ICdyaWdodCcsIGNvbmZpZ2FibGU6IHRydWUsICAgdmlzaWJsZTogdHJ1ZSB9LAogICAgICAgICAgICB7IHRleHQ6IHRoaXMuJHQoJ0ZpbGVzLkZpbGFtZW50V2VpZ2h0JyksICAgICAgICB2YWx1ZTogJ2ZpbGFtZW50X3dlaWdodF90b3RhbCcsICAgICBhbGlnbjogJ3JpZ2h0JywgY29uZmlnYWJsZTogdHJ1ZSwgICB2aXNpYmxlOiB0cnVlIH0sCiAgICAgICAgICAgIHsgdGV4dDogdGhpcy4kdCgnRmlsZXMuUHJpbnRUaW1lJyksICAgICAgICAgICAgIHZhbHVlOiAnZXN0aW1hdGVkX3RpbWUnLCAgICAgICAgICAgIGFsaWduOiAncmlnaHQnLCBjb25maWdhYmxlOiB0cnVlLCAgIHZpc2libGU6IHRydWUgfSwKICAgICAgICAgICAgeyB0ZXh0OiB0aGlzLiR0KCdGaWxlcy5TbGljZXInKSwgICAgICAgICAgICAgICAgdmFsdWU6ICdzbGljZXInLCAgICAgICAgICAgICAgICAgICAgYWxpZ246ICdyaWdodCcsIGNvbmZpZ2FibGU6IHRydWUsICAgdmlzaWJsZTogdHJ1ZSB9LAogICAgICAgIF0KCiAgICAgICAgaGVhZGVycy5mb3JFYWNoKChoZWFkZXIpID0+IHsKICAgICAgICAgICAgaWYgKGhlYWRlci52aXNpYmxlICYmIHRoaXMuaGlkZU1ldGFkYXRhQ29sdW1zLmluY2x1ZGVzKGhlYWRlci52YWx1ZSkpIHsKICAgICAgICAgICAgICAgIGhlYWRlci52aXNpYmxlID0gZmFsc2UKICAgICAgICAgICAgfSBlbHNlIGlmICghaGVhZGVyLnZpc2libGUgJiYgIXRoaXMuaGlkZU1ldGFkYXRhQ29sdW1zLmluY2x1ZGVzKGhlYWRlci52YWx1ZSkpIHsKICAgICAgICAgICAgICAgIGhlYWRlci52aXNpYmxlID0gdHJ1ZQogICAgICAgICAgICB9CiAgICAgICAgfSkKCiAgICAgICAgcmV0dXJuIGhlYWRlcnMKICAgIH0KCiAgICBnZXQgZGlyZWN0b3J5KCkgewogICAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5nZXR0ZXJzWydmaWxlcy9nZXREaXJlY3RvcnknXSh0aGlzLmN1cnJlbnRQYXRoKQogICAgfQoKICAgIGdldCBkaXNrX3VzYWdlKCkgewogICAgICAgIHJldHVybiB0aGlzLmRpcmVjdG9yeT8uZGlza191c2FnZSA/PyB7IHVzZWQ6IDAsIGZyZWU6IDAsIHRvdGFsOiAwfQogICAgfQoKICAgIGdldCBmaWxlcygpIHsKICAgICAgICBsZXQgZmlsZXMgPSBbLi4udGhpcy5kaXJlY3Rvcnk/LmNoaWxkcmVucyA/PyBbXV0KCiAgICAgICAgaWYgKCF0aGlzLnNob3dIaWRkZW5GaWxlcykgewogICAgICAgICAgICBmaWxlcyA9IGZpbGVzLmZpbHRlcihmaWxlID0+IGZpbGUuZmlsZW5hbWUgIT09ICd0aHVtYnMnICYmIGZpbGUuZmlsZW5hbWUuc3Vic3RyKDAsIDEpICE9PSAnLicpCiAgICAgICAgfQoKICAgICAgICBpZiAoIXRoaXMuc2hvd1ByaW50ZWRGaWxlcykgewogICAgICAgICAgICBmaWxlcyA9IGZpbGVzLmZpbHRlcihmaWxlID0+IHsKICAgICAgICAgICAgICAgIGlmIChmaWxlLmlzRGlyZWN0b3J5KSByZXR1cm4gdHJ1ZQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICh0aGlzLiRzdG9yZS5nZXR0ZXJzWydzZXJ2ZXIvaGlzdG9yeS9nZXRQcmludFN0YXR1c0J5RmlsZW5hbWUnXSgKICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuY3VycmVudFBhdGgrJy8nK2ZpbGUuZmlsZW5hbWUpLnN1YnN0cig3KSwKICAgICAgICAgICAgICAgICAgICAgICAgZmlsZS5tb2RpZmllZC5nZXRUaW1lKCkKICAgICAgICAgICAgICAgICAgICApICE9PSAnY29tcGxldGVkJykKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkKICAgICAgICB9CgogICAgICAgIHJldHVybiBmaWxlcwogICAgfQoKICAgIGdldCBjb25maWdIZWFkZXJzKCkgewogICAgICAgIHJldHVybiB0aGlzLmhlYWRlcnMuZmlsdGVyKGhlYWRlciA9PiBoZWFkZXIuY29uZmlnYWJsZSkKICAgIH0KCiAgICBnZXQgZmlsdGVyZWRIZWFkZXJzKCkgewogICAgICAgIHJldHVybiB0aGlzLmhlYWRlcnMuZmlsdGVyKGhlYWRlciA9PiBoZWFkZXIudmlzaWJsZSkKICAgIH0KCiAgICBnZXQgaGlkZU1ldGFkYXRhQ29sdW1zKCkgewogICAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS5ndWkudmlldy5nY29kZWZpbGVzLmhpZGVNZXRhZGF0YUNvbHVtcwogICAgfQoKICAgIHNldCBoaWRlTWV0YWRhdGFDb2x1bXMobmV3VmFsKSB7CiAgICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2d1aS9zYXZlU2V0dGluZycsIHsgbmFtZTogJ3ZpZXcuZ2NvZGVmaWxlcy5oaWRlTWV0YWRhdGFDb2x1bXMnLCB2YWx1ZTogbmV3VmFsIH0pCiAgICB9CgogICAgZ2V0IHNob3dIaWRkZW5GaWxlcygpIHsKICAgICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUuZ3VpLnZpZXcuZ2NvZGVmaWxlcy5zaG93SGlkZGVuRmlsZXMKICAgIH0KCiAgICBzZXQgc2hvd0hpZGRlbkZpbGVzKG5ld1ZhbCkgewogICAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdndWkvc2F2ZVNldHRpbmcnLCB7IG5hbWU6ICd2aWV3Lmdjb2RlZmlsZXMuc2hvd0hpZGRlbkZpbGVzJywgdmFsdWU6IG5ld1ZhbCB9KQogICAgfQoKICAgIGdldCBzaG93UHJpbnRlZEZpbGVzKCkgewogICAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS5ndWkudmlldy5nY29kZWZpbGVzLnNob3dQcmludGVkRmlsZXMKICAgIH0KCiAgICBzZXQgc2hvd1ByaW50ZWRGaWxlcyhuZXdWYWwpIHsKICAgICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgnZ3VpL3NhdmVTZXR0aW5nJywgeyBuYW1lOiAndmlldy5nY29kZWZpbGVzLnNob3dQcmludGVkRmlsZXMnLCB2YWx1ZTogbmV3VmFsIH0pCiAgICB9CgogICAgZ2V0IHNvcnRCeSgpIHsKICAgICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUuZ3VpLnZpZXcuZ2NvZGVmaWxlcy5zb3J0QnkKICAgIH0KCiAgICBzZXQgc29ydEJ5KG5ld1ZhbCkgewogICAgICAgIGlmIChuZXdWYWwgPT09IHVuZGVmaW5lZCkgbmV3VmFsID0gJ21vZGlmaWVkJwoKICAgICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgnZ3VpL3NhdmVTZXR0aW5nJywgeyBuYW1lOiAndmlldy5nY29kZWZpbGVzLnNvcnRCeScsIHZhbHVlOiBuZXdWYWwgfSkKICAgIH0KCiAgICBnZXQgc29ydERlc2MoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLmd1aS52aWV3Lmdjb2RlZmlsZXMuc29ydERlc2MKICAgIH0KCiAgICBzZXQgc29ydERlc2MobmV3VmFsKSB7CiAgICAgICAgaWYgKG5ld1ZhbCA9PT0gdW5kZWZpbmVkKSBuZXdWYWwgPSBmYWxzZQoKICAgICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgnZ3VpL3NhdmVTZXR0aW5nJywgeyBuYW1lOiAndmlldy5nY29kZWZpbGVzLnNvcnREZXNjJywgdmFsdWU6IG5ld1ZhbCB9KQogICAgfQoKICAgIGdldCBjb3VudFBlclBhZ2UoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLmd1aS52aWV3Lmdjb2RlZmlsZXMuY291bnRQZXJQYWdlCiAgICB9CgogICAgc2V0IGNvdW50UGVyUGFnZShuZXdWYWwpIHsKICAgICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgnZ3VpL3NhdmVTZXR0aW5nJywgeyBuYW1lOiAndmlldy5nY29kZWZpbGVzLmNvdW50UGVyUGFnZScsIHZhbHVlOiBuZXdWYWwgfSkKICAgIH0KCiAgICBnZXQgdGltZWxhcHNlRW5hYmxlZCgpIHsKICAgICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUuc2VydmVyLnRpbWVsYXBzZT8uc2V0dGluZ3M/LmVuYWJsZWQgPz8gZmFsc2UKICAgIH0KCiAgICBzZXQgdGltZWxhcHNlRW5hYmxlZChuZXdWYWwpIHsKICAgICAgICB0aGlzLiRzb2NrZXQuZW1pdCgnbWFjaGluZS50aW1lbGFwc2UucG9zdF9zZXR0aW5ncycsIHsgZW5hYmxlZDogbmV3VmFsIH0sIHsgYWN0aW9uOiAnc2VydmVyL3RpbWVsYXBzZS9pbml0U2V0dGluZ3MnIH0pCiAgICB9CgogICAgZ2V0Sm9iU3RhdHVzKGl0ZW06IEZpbGVTdGF0ZUZpbGUpIHsKICAgICAgICByZXR1cm4gdGhpcy4kc3RvcmUuZ2V0dGVyc1snc2VydmVyL2hpc3RvcnkvZ2V0UHJpbnRTdGF0dXMnXShpdGVtLmpvYl9pZCkKICAgIH0KCiAgICBnZXRTdGF0dXNJY29uKHN0YXR1czogc3RyaW5nKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLmdldHRlcnNbJ3NlcnZlci9oaXN0b3J5L2dldFByaW50U3RhdHVzQ2hpcEljb24nXShzdGF0dXMpCiAgICB9CgogICAgZ2V0U3RhdHVzQ29sb3Ioc3RhdHVzOiBzdHJpbmcpIHsKICAgICAgICByZXR1cm4gdGhpcy4kc3RvcmUuZ2V0dGVyc1snc2VydmVyL2hpc3RvcnkvZ2V0UHJpbnRTdGF0dXNDaGlwQ29sb3InXShzdGF0dXMpCiAgICB9CgogICAgZHJhZ092ZXJVcGxvYWQoZTogRXZlbnQpIHsKICAgICAgICBpZiAoIXRoaXMuZHJhZ2dpbmdGaWxlLnN0YXR1cykgewogICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCkKICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKQoKICAgICAgICAgICAgdGhpcy5kcm9wem9uZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnCiAgICAgICAgICAgIHRoaXMuZHJvcHpvbmUub3BhY2l0eSA9IDEKICAgICAgICB9CiAgICB9CgogICAgZHJhZ0xlYXZlVXBsb2FkKGU6IEV2ZW50KSB7CiAgICAgICAgaWYgKCF0aGlzLmRyYWdnaW5nRmlsZS5zdGF0dXMpIHsKICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpCiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCkKCiAgICAgICAgICAgIHRoaXMuZHJvcHpvbmUudmlzaWJpbGl0eSA9ICdoaWRkZW4nCiAgICAgICAgICAgIHRoaXMuZHJvcHpvbmUub3BhY2l0eSA9IDAKICAgICAgICB9CiAgICB9CgogICAgYXN5bmMgZHJhZ0Ryb3BVcGxvYWQoZTogYW55KSB7CiAgICAgICAgaWYgKCF0aGlzLmRyYWdnaW5nRmlsZS5zdGF0dXMpIHsKICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpCgogICAgICAgICAgICB0aGlzLmRyb3B6b25lLnZpc2liaWxpdHkgPSAnaGlkZGVuJwogICAgICAgICAgICB0aGlzLmRyb3B6b25lLm9wYWNpdHkgPSAwCgogICAgICAgICAgICBpZiAoZS5kYXRhVHJhbnNmZXIuZmlsZXMubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICBjb25zdCBmaWxlcyA9IFsuLi5lLmRhdGFUcmFuc2Zlci5maWxlc10uZmlsdGVyKChmaWxlOiBGaWxlKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgY29uc3QgZm9ybWF0ID0gZmlsZS5uYW1lLnNsaWNlKGZpbGUubmFtZS5sYXN0SW5kZXhPZignLicpKQoKICAgICAgICAgICAgICAgICAgICBpZiAoIXZhbGlkR2NvZGVFeHRlbnNpb25zLmluY2x1ZGVzKGZvcm1hdCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kdG9hc3QuZXJyb3IodGhpcy4kdCgnRmlsZXMuV3JvbmdGaWxlVXBsb2FkZWQnLCB7IGZpbGVuYW1lOiBmaWxlLm5hbWUgfSkudG9TdHJpbmcoKSkKCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWUKICAgICAgICAgICAgICAgIH0pCgogICAgICAgICAgICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ3NvY2tldC9hZGRMb2FkaW5nJywgeyBuYW1lOiAnZ2NvZGVVcGxvYWQnIH0pCiAgICAgICAgICAgICAgICBsZXQgc3VjY2Vzc0ZpbGVzID0gW10KICAgICAgICAgICAgICAgIHRoaXMudXBsb2FkU25hY2tiYXIubnVtYmVyID0gMAogICAgICAgICAgICAgICAgdGhpcy51cGxvYWRTbmFja2Jhci5tYXggPSBmaWxlcy5sZW5ndGgKICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykgewogICAgICAgICAgICAgICAgICAgIHRoaXMudXBsb2FkU25hY2tiYXIubnVtYmVyKysKICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLmRvVXBsb2FkRmlsZShmaWxlKQogICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NGaWxlcy5wdXNoKHJlc3VsdCkKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgnc29ja2V0L3JlbW92ZUxvYWRpbmcnLCB7IG5hbWU6ICdnY29kZVVwbG9hZCcgfSkKICAgICAgICAgICAgICAgIGZvcihjb25zdCBmaWxlIG9mIHN1Y2Nlc3NGaWxlcykgewogICAgICAgICAgICAgICAgICAgIHRoaXMuJHRvYXN0LnN1Y2Nlc3ModGhpcy4kdCgnRmlsZXMuU3VjY2Vzc2Z1bGx5VXBsb2FkZWQnLCB7IGZpbGVuYW1lOiBmaWxlIH0pLnRvU3RyaW5nKCkpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgZG9VcGxvYWRGaWxlKGZpbGU6IEZpbGUpIHsKICAgICAgICBsZXQgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKQogICAgICAgIGxldCBmaWxlbmFtZSA9IGZpbGUubmFtZQoKICAgICAgICB0aGlzLnVwbG9hZFNuYWNrYmFyLmZpbGVuYW1lID0gZmlsZW5hbWUKICAgICAgICB0aGlzLnVwbG9hZFNuYWNrYmFyLnN0YXR1cyA9IHRydWUKICAgICAgICB0aGlzLnVwbG9hZFNuYWNrYmFyLnBlcmNlbnQgPSAwCiAgICAgICAgdGhpcy51cGxvYWRTbmFja2Jhci5zcGVlZCA9IDAKICAgICAgICB0aGlzLnVwbG9hZFNuYWNrYmFyLmxhc3RQcm9ncmVzcy5sb2FkZWQgPSAwCiAgICAgICAgdGhpcy51cGxvYWRTbmFja2Jhci5sYXN0UHJvZ3Jlc3MudGltZSA9IDAKCiAgICAgICAgZm9ybURhdGEuYXBwZW5kKCdmaWxlJywgZmlsZSwgKHRoaXMuY3VycmVudFBhdGgrJy8nK2ZpbGVuYW1lKS5zdWJzdHJpbmcoNykpCgogICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHsKICAgICAgICAgICAgdGhpcy51cGxvYWRTbmFja2Jhci5jYW5jZWxUb2tlblNvdXJjZSA9IGF4aW9zLkNhbmNlbFRva2VuLnNvdXJjZSgpCiAgICAgICAgICAgIGF4aW9zLnBvc3QodGhpcy5hcGlVcmwgKyAnL3NlcnZlci9maWxlcy91cGxvYWQnLAogICAgICAgICAgICAgICAgZm9ybURhdGEsIHsKICAgICAgICAgICAgICAgICAgICBjYW5jZWxUb2tlbjogdGhpcy51cGxvYWRTbmFja2Jhci5jYW5jZWxUb2tlblNvdXJjZS50b2tlbiwKICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnbXVsdGlwYXJ0L2Zvcm0tZGF0YScgfSwKICAgICAgICAgICAgICAgICAgICBvblVwbG9hZFByb2dyZXNzOiAocHJvZ3Jlc3NFdmVudDogYW55KSA9PiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXBsb2FkU25hY2tiYXIucGVyY2VudCA9IChwcm9ncmVzc0V2ZW50LmxvYWRlZCAqIDEwMCkgLyBwcm9ncmVzc0V2ZW50LnRvdGFsCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnVwbG9hZFNuYWNrYmFyLmxhc3RQcm9ncmVzcy50aW1lKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0aW1lID0gcHJvZ3Jlc3NFdmVudC50aW1lU3RhbXAgLSB0aGlzLnVwbG9hZFNuYWNrYmFyLmxhc3RQcm9ncmVzcy50aW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gcHJvZ3Jlc3NFdmVudC5sb2FkZWQgLSB0aGlzLnVwbG9hZFNuYWNrYmFyLmxhc3RQcm9ncmVzcy5sb2FkZWQKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGltZSkgdGhpcy51cGxvYWRTbmFja2Jhci5zcGVlZCA9IGRhdGEgLyAodGltZSAvIDEwMDApCiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXBsb2FkU25hY2tiYXIubGFzdFByb2dyZXNzLnRpbWUgPSBwcm9ncmVzc0V2ZW50LnRpbWVTdGFtcAogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwbG9hZFNuYWNrYmFyLmxhc3RQcm9ncmVzcy5sb2FkZWQgPSBwcm9ncmVzc0V2ZW50LmxvYWRlZAogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwbG9hZFNuYWNrYmFyLnRvdGFsID0gcHJvZ3Jlc3NFdmVudC50b3RhbAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgKS50aGVuKChyZXN1bHQ6IGFueSkgPT4gewogICAgICAgICAgICAgICAgY29uc3QgZmlsZW5hbWUgPSByZXN1bHQuZGF0YS5pdGVtLnBhdGguc3Vic3RyKHJlc3VsdC5kYXRhLml0ZW0ucGF0aC5pbmRleE9mKCcvJykrMSkKICAgICAgICAgICAgICAgIHRoaXMudXBsb2FkU25hY2tiYXIuc3RhdHVzID0gZmFsc2UKICAgICAgICAgICAgICAgIHJlc29sdmUoZmlsZW5hbWUpCiAgICAgICAgICAgIH0pLmNhdGNoKCgpID0+IHsKICAgICAgICAgICAgICAgIHRoaXMudXBsb2FkU25hY2tiYXIuc3RhdHVzID0gZmFsc2UKICAgICAgICAgICAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdzb2NrZXQvcmVtb3ZlTG9hZGluZycsIHsgbmFtZTogJ2djb2RlVXBsb2FkJyB9KQogICAgICAgICAgICAgICAgdGhpcy4kdG9hc3QuZXJyb3IoJ0Nhbm5vdCB1cGxvYWQgdGhlIGZpbGUhJykKICAgICAgICAgICAgfSkKICAgICAgICB9KQogICAgfQoKICAgIGRyYWdPdmVyRmlsZWxpc3QoZTogYW55LCByb3c6IGFueSkgewogICAgICAgIGlmICh0aGlzLmRyYWdnaW5nRmlsZS5zdGF0dXMpIHsKICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpCiAgICAgICAgICAgIC8vZS5zdG9wUHJvcGFnYXRpb24oKQoKICAgICAgICAgICAgaWYgKHJvdy5pc0RpcmVjdG9yeSkgewogICAgICAgICAgICAgICAgZS50YXJnZXQucGFyZW50RWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnIzQzQTA0NzIwJwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIGRyYWdMZWF2ZUZpbGVsaXN0KGU6IGFueSkgewogICAgICAgIGlmICh0aGlzLmRyYWdnaW5nRmlsZS5zdGF0dXMpIHsKICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpCiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCkKCiAgICAgICAgICAgIGUudGFyZ2V0LnBhcmVudEVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJ3RyYW5zcGFyZW50JwogICAgICAgIH0KICAgIH0KCiAgICBhc3luYyBkcmFnRHJvcEZpbGVsaXN0KGU6IGFueSwgcm93OiBhbnkpIHsKICAgICAgICBpZiAodGhpcy5kcmFnZ2luZ0ZpbGUuc3RhdHVzKSB7CiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKQogICAgICAgICAgICBlLnRhcmdldC5wYXJlbnRFbGVtZW50LnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICd0cmFuc3BhcmVudCcKCiAgICAgICAgICAgIGxldCBkZXN0ID0gJycKICAgICAgICAgICAgaWYgKHJvdy5maWxlbmFtZSA9PT0gJy4uJykgewogICAgICAgICAgICAgICAgZGVzdCA9IHRoaXMuY3VycmVudFBhdGguc3Vic3RyaW5nKDAsIHRoaXMuY3VycmVudFBhdGgubGFzdEluZGV4T2YoJy8nKSArIDEpK3RoaXMuZHJhZ2dpbmdGaWxlLml0ZW0uZmlsZW5hbWUKICAgICAgICAgICAgfSBlbHNlIGRlc3QgPSB0aGlzLmN1cnJlbnRQYXRoKycvJytyb3cuZmlsZW5hbWUrJy8nK3RoaXMuZHJhZ2dpbmdGaWxlLml0ZW0uZmlsZW5hbWUKCiAgICAgICAgICAgIHRoaXMuJHNvY2tldC5lbWl0KCdzZXJ2ZXIuZmlsZXMubW92ZScsIHsKICAgICAgICAgICAgICAgIHNvdXJjZTogdGhpcy5jdXJyZW50UGF0aCsnLycrdGhpcy5kcmFnZ2luZ0ZpbGUuaXRlbS5maWxlbmFtZSwKICAgICAgICAgICAgICAgIGRlc3Q6IGRlc3QKICAgICAgICAgICAgfSwgeyBhY3Rpb246ICdmaWxlcy9nZXRNb3ZlJyB9KQogICAgICAgIH0KICAgIH0KCiAgICBhc3luYyB1cGxvYWRGaWxlKCkgewogICAgICAgIGlmICh0aGlzLiRyZWZzLmZpbGVVcGxvYWQuZmlsZXM/Lmxlbmd0aCkgewogICAgICAgICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgnc29ja2V0L2FkZExvYWRpbmcnLCB7IG5hbWU6ICdnY29kZVVwbG9hZCcgfSkKICAgICAgICAgICAgbGV0IHN1Y2Nlc3NGaWxlcyA9IFtdCiAgICAgICAgICAgIHRoaXMudXBsb2FkU25hY2tiYXIubnVtYmVyID0gMAogICAgICAgICAgICB0aGlzLnVwbG9hZFNuYWNrYmFyLm1heCA9IHRoaXMuJHJlZnMuZmlsZVVwbG9hZC5maWxlcy5sZW5ndGgKICAgICAgICAgICAgZm9yIChjb25zdCBmaWxlIG9mIHRoaXMuJHJlZnMuZmlsZVVwbG9hZC5maWxlcykgewogICAgICAgICAgICAgICAgdGhpcy51cGxvYWRTbmFja2Jhci5udW1iZXIrKwogICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5kb1VwbG9hZEZpbGUoZmlsZSkKICAgICAgICAgICAgICAgIHN1Y2Nlc3NGaWxlcy5wdXNoKHJlc3VsdCkKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ3NvY2tldC9yZW1vdmVMb2FkaW5nJywgeyBuYW1lOiAnZ2NvZGVVcGxvYWQnIH0pCiAgICAgICAgICAgIGZvcihjb25zdCBmaWxlIG9mIHN1Y2Nlc3NGaWxlcykgewogICAgICAgICAgICAgICAgdGhpcy4kdG9hc3Quc3VjY2Vzcyh0aGlzLiR0KCdGaWxlcy5TdWNjZXNzZnVsbHlVcGxvYWRlZCcsIHsgZmlsZW5hbWU6IGZpbGUgfSkudG9TdHJpbmcoKSkKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdGhpcy4kcmVmcy5maWxlVXBsb2FkLnZhbHVlID0gJycKICAgICAgICB9CiAgICB9CgogICAgY2xpY2tVcGxvYWRCdXR0b24oKSB7CiAgICAgICAgdGhpcy4kcmVmcy5maWxlVXBsb2FkLmNsaWNrKCkKICAgIH0KCiAgICBjcmVhdGVEaXJlY3RvcnkoKSB7CiAgICAgICAgdGhpcy5kaWFsb2dDcmVhdGVEaXJlY3RvcnkubmFtZSA9ICcnCiAgICAgICAgdGhpcy5kaWFsb2dDcmVhdGVEaXJlY3Rvcnkuc2hvdyA9IHRydWUKCiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7CiAgICAgICAgICAgIHRoaXMuJHJlZnMuaW5wdXRGaWVsZENyZWF0ZURpcmVjdG9yeT8uZm9jdXMoKQogICAgICAgIH0sIDIwMCkKICAgIH0KCiAgICBjcmVhdGVEaXJlY3RvcnlBY3Rpb24oKSB7CiAgICAgICAgaWYgKHRoaXMuZGlhbG9nQ3JlYXRlRGlyZWN0b3J5Lm5hbWUubGVuZ3RoICYmIHRoaXMuZGlhbG9nQ3JlYXRlRGlyZWN0b3J5Lm5hbWUuaW5kZXhPZignICcpID09PSAtMSkgewogICAgICAgICAgICB0aGlzLmRpYWxvZ0NyZWF0ZURpcmVjdG9yeS5zaG93ID0gZmFsc2UKICAgICAgICAgICAgdGhpcy4kc29ja2V0LmVtaXQoJ3NlcnZlci5maWxlcy5wb3N0X2RpcmVjdG9yeScsIHsgcGF0aDogdGhpcy5jdXJyZW50UGF0aCsnLycrdGhpcy5kaWFsb2dDcmVhdGVEaXJlY3RvcnkubmFtZSB9LCB7IGFjdGlvbjogJ2ZpbGVzL2dldENyZWF0ZURpcicgfSkKICAgICAgICB9CiAgICB9CgogICAgcmVmcmVzaEZpbGVMaXN0KCkgewogICAgICAgIHRoaXMuJHNvY2tldC5lbWl0KCdzZXJ2ZXIuZmlsZXMuZ2V0X2RpcmVjdG9yeScsIHsgcGF0aDogdGhpcy5jdXJyZW50UGF0aCB9LCB7IGFjdGlvbjogJ2ZpbGVzL2dldERpcmVjdG9yeScgfSkKICAgIH0KCiAgICBhZHZhbmNlZFNlYXJjaCh2YWx1ZTogc3RyaW5nIHwgbnVtYmVyLCBzZWFyY2g6IHN0cmluZykgewogICAgICAgIHJldHVybiB2YWx1ZSAhPSBudWxsICYmCiAgICAgICAgICAgIHNlYXJjaCAhPSBudWxsICYmCiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYKICAgICAgICAgICAgdmFsdWUudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpLmluZGV4T2Yoc2VhcmNoLnRvTG93ZXJDYXNlKCkpICE9PSAtMQogICAgfQoKICAgIHJlZnJlc2hNZXRhZGF0YShkYXRhOiBGaWxlU3RhdGVGaWxlW10pIHsKICAgICAgICBjb25zdCBpdGVtcyA9IGRhdGEuZmlsdGVyKChmaWxlKSA9PiAhZmlsZS5pc0RpcmVjdG9yeSAmJiAhZmlsZS5tZXRhZGF0YVJlcXVlc3RlZCAmJiAhZmlsZS5tZXRhZGF0YVB1bGxlZCkKICAgICAgICBpdGVtcy5mb3JFYWNoKChmaWxlOiBGaWxlU3RhdGVGaWxlKSA9PiB7CiAgICAgICAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdmaWxlcy9yZXF1ZXN0TWV0YWRhdGEnLCB7CiAgICAgICAgICAgICAgICBmaWxlbmFtZTogKHRoaXMuY3VycmVudFBhdGgrJy8nK2ZpbGUuZmlsZW5hbWUpCiAgICAgICAgICAgIH0pCiAgICAgICAgfSkKICAgIH0KCiAgICBjcmVhdGVkKCkgewogICAgICAgIHRoaXMuJHNvY2tldC5lbWl0KCdzZXJ2ZXIuZmlsZXMuZ2V0X2RpcmVjdG9yeScsIHsgcGF0aDogdGhpcy5jdXJyZW50UGF0aCB9LCB7IGFjdGlvbjogJ2ZpbGVzL2dldERpcmVjdG9yeScgfSkKICAgIH0KCiAgICBnZXRTbWFsbFRodW1ibmFpbChpdGVtOiBGaWxlU3RhdGVGaWxlKSB7CiAgICAgICAgaWYgKGl0ZW0udGh1bWJuYWlscz8ubGVuZ3RoKSB7CiAgICAgICAgICAgIGNvbnN0IHRodW1ibmFpbCA9IGl0ZW0udGh1bWJuYWlscy5maW5kKHRodW1iID0+CiAgICAgICAgICAgICAgICB0aHVtYi53aWR0aCA+PSB0aHVtYm5haWxTbWFsbE1pbiAmJiB0aHVtYi53aWR0aCA8PSB0aHVtYm5haWxTbWFsbE1heCAmJgogICAgICAgICAgICAgICAgdGh1bWIuaGVpZ2h0ID49IHRodW1ibmFpbFNtYWxsTWluICYmIHRodW1iLmhlaWdodCA8PSB0aHVtYm5haWxTbWFsbE1heAogICAgICAgICAgICApCgogICAgICAgICAgICBpZiAodGh1bWJuYWlsICYmICdyZWxhdGl2ZV9wYXRoJyBpbiB0aHVtYm5haWwpIHsKICAgICAgICAgICAgICAgIHJldHVybiBgJHt0aGlzLmFwaVVybH0vc2VydmVyL2ZpbGVzLyR7ZW5jb2RlVVJJKHRoaXMuY3VycmVudFBhdGgpfS8ke2VuY29kZVVSSSh0aHVtYm5haWwucmVsYXRpdmVfcGF0aCl9P3RpbWVzdGFtcD0ke2l0ZW0ubW9kaWZpZWQuZ2V0VGltZSgpfWAKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuICcnCiAgICB9CgogICAgZ2V0QmlnVGh1bWJuYWlsKGl0ZW06IEZpbGVTdGF0ZUZpbGUpIHsKICAgICAgICBpZiAoaXRlbS50aHVtYm5haWxzPy5sZW5ndGgpIHsKICAgICAgICAgICAgY29uc3QgdGh1bWJuYWlsID0gaXRlbS50aHVtYm5haWxzLmZpbmQodGh1bWIgPT4gdGh1bWIud2lkdGggPj0gdGh1bWJuYWlsQmlnTWluKQoKICAgICAgICAgICAgaWYgKHRodW1ibmFpbCAmJiAncmVsYXRpdmVfcGF0aCcgaW4gdGh1bWJuYWlsKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gYCR7dGhpcy5hcGlVcmx9L3NlcnZlci9maWxlcy8ke2VuY29kZVVSSSh0aGlzLmN1cnJlbnRQYXRoKX0vJHtlbmNvZGVVUkkodGh1bWJuYWlsLnJlbGF0aXZlX3BhdGgpfT90aW1lc3RhbXA9JHtpdGVtLm1vZGlmaWVkLmdldFRpbWUoKX1gCiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHJldHVybiAnJwogICAgfQoKICAgIGdldFRodW1ibmFpbFdpZHRoKGl0ZW06IEZpbGVTdGF0ZUZpbGUpIHsKICAgICAgICBpZiAodGhpcy5nZXRCaWdUaHVtYm5haWwoaXRlbSkpIHsKICAgICAgICAgICAgY29uc3QgdGh1bWJuYWlsID0gaXRlbT8udGh1bWJuYWlscz8uZmluZCh0aHVtYiA9PiB0aHVtYi53aWR0aCA+PSB0aHVtYm5haWxCaWdNaW4pCgogICAgICAgICAgICBpZiAodGh1bWJuYWlsKSByZXR1cm4gdGh1bWJuYWlsLndpZHRoCiAgICAgICAgfQoKICAgICAgICByZXR1cm4gNDAwCiAgICB9CgogICAgY2xpY2tSb3coaXRlbTogRmlsZVN0YXRlRmlsZSwgZm9yY2UgPSBmYWxzZSkgewogICAgICAgIGlmICghdGhpcy5jb250ZXh0TWVudS5zaG93biB8fCBmb3JjZSkgewogICAgICAgICAgICBpZiAoZm9yY2UpIHRoaXMuY29udGV4dE1lbnUuc2hvd24gPSBmYWxzZQoKICAgICAgICAgICAgaWYgKGl0ZW0uaXNEaXJlY3RvcnkpIHsKICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFBhdGggKz0gJy8nICsgaXRlbS5maWxlbmFtZQogICAgICAgICAgICB9IGVsc2UgaWYgKCFbJ2Vycm9yJywgJ3ByaW50aW5nJywgJ3BhdXNlZCddLmluY2x1ZGVzKHRoaXMucHJpbnRlcl9zdGF0ZSkgJiYgdGhpcy5pc0djb2RlRmlsZShpdGVtKSkgewogICAgICAgICAgICAgICAgdGhpcy5kaWFsb2dQcmludEZpbGUuc2hvdyA9IHRydWUKICAgICAgICAgICAgICAgIHRoaXMuZGlhbG9nUHJpbnRGaWxlLml0ZW0gPSBpdGVtCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgY2xpY2tSb3dHb0JhY2soKSB7CiAgICAgICAgdGhpcy5jdXJyZW50UGF0aCA9IHRoaXMuY3VycmVudFBhdGguc3Vic3RyKDAsIHRoaXMuY3VycmVudFBhdGgubGFzdEluZGV4T2YoJy8nKSkKICAgIH0KCiAgICBhZGRUb1F1ZXVlKGl0ZW06IEZpbGVTdGF0ZUZpbGUpIHsKICAgICAgICBsZXQgcGF0aCA9IHRoaXMuY3VycmVudFBhdGguc2xpY2UoNykKICAgICAgICBpZiAocGF0aCAhPSAnJykgcGF0aCArPSAnLycKICAgICAgICBjb25zdCBmaWxlbmFtZSA9IHBhdGgraXRlbS5maWxlbmFtZQoKICAgICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgnc2VydmVyL2pvYlF1ZXVlL2FkZFRvUXVldWUnLCBbZmlsZW5hbWVdKQogICAgfQoKICAgIGNoYW5nZU1ldGFkYXRhVmlzaWJsZShuYW1lOiBzdHJpbmcpIHsKICAgICAgICBpZiAodGhpcy5oZWFkZXJzLmZpbHRlcihoZWFkZXIgPT4gaGVhZGVyLnZhbHVlID09PSBuYW1lKS5sZW5ndGgpIHsKICAgICAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmhlYWRlcnMuZmlsdGVyKGhlYWRlciA9PiBoZWFkZXIudmFsdWUgPT09IG5hbWUpWzBdLnZpc2libGUKCiAgICAgICAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdndWkvc2V0R2NvZGVmaWxlc01ldGFkYXRhJywge25hbWU6IG5hbWUsIHZhbHVlOiB2YWx1ZX0pCiAgICAgICAgfQogICAgfQoKICAgIGNhbmNlbFVwbG9hZCgpIHsKICAgICAgICB0aGlzLnVwbG9hZFNuYWNrYmFyLmNhbmNlbFRva2VuU291cmNlLmNhbmNlbCgpCiAgICAgICAgdGhpcy51cGxvYWRTbmFja2Jhci5zdGF0dXMgPSBmYWxzZQogICAgICAgIHRoaXMuJHJlZnMuZmlsZVVwbG9hZC52YWx1ZSA9ICcnCiAgICB9CgogICAgc2hvd0NvbnRleHRNZW51IChlOiBhbnksIGl0ZW06IEZpbGVTdGF0ZUZpbGUpIHsKICAgICAgICBpZiAoIXRoaXMuY29udGV4dE1lbnUuc2hvd24pIHsKICAgICAgICAgICAgZT8ucHJldmVudERlZmF1bHQoKQogICAgICAgICAgICB0aGlzLmNvbnRleHRNZW51LnNob3duID0gdHJ1ZQogICAgICAgICAgICB0aGlzLmNvbnRleHRNZW51LnggPSBlPy5jbGllbnRYIHx8IGU/LnBhZ2VYIHx8IHdpbmRvdy5zY3JlZW5YIC8gMgogICAgICAgICAgICB0aGlzLmNvbnRleHRNZW51LnkgPSBlPy5jbGllbnRZIHx8IGU/LnBhZ2VZIHx8IHdpbmRvdy5zY3JlZW5ZIC8gMgogICAgICAgICAgICB0aGlzLmNvbnRleHRNZW51Lml0ZW0gPSBpdGVtCiAgICAgICAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHsKICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dE1lbnUuc2hvd24gPSB0cnVlCiAgICAgICAgICAgIH0pCiAgICAgICAgfQogICAgfQoKICAgIHByZWhlYXQoKSB7CiAgICAgICAgY29uc3QgZmlsZTogYW55ID0gdGhpcy5jb250ZXh0TWVudS5pdGVtCgogICAgICAgIGlmICgKICAgICAgICAgICAgJ2ZpcnN0X2xheWVyX2V4dHJfdGVtcCcgaW4gZmlsZSAmJgogICAgICAgICAgICAnZmlyc3RfbGF5ZXJfYmVkX3RlbXAnIGluIGZpbGUgJiYKICAgICAgICAgICAgIVsnZXJyb3InLCAncHJpbnRpbmcnLCAncGF1c2VkJ10uaW5jbHVkZXModGhpcy5wcmludGVyX3N0YXRlKQogICAgICAgICkgewogICAgICAgICAgICBsZXQgZ2NvZGUgPSAnJwogICAgICAgICAgICBpZiAoZmlsZS5maXJzdF9sYXllcl9leHRyX3RlbXAgPiAwKSB7CiAgICAgICAgICAgICAgICBnY29kZSA9ICdNMTA0IFMnK2ZpbGUuZmlyc3RfbGF5ZXJfZXh0cl90ZW1wCiAgICAgICAgICAgICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgnc2VydmVyL2FkZEV2ZW50JywgeyBtZXNzYWdlOiBnY29kZSwgdHlwZTogJ2NvbW1hbmQnIH0pCiAgICAgICAgICAgICAgICB0aGlzLiRzb2NrZXQuZW1pdCgncHJpbnRlci5nY29kZS5zY3JpcHQnLCB7IHNjcmlwdDogZ2NvZGUgfSkKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKGZpbGUuZmlyc3RfbGF5ZXJfYmVkX3RlbXAgPiAwKSB7CiAgICAgICAgICAgICAgICBnY29kZSA9ICdNMTQwIFMnK2ZpbGUuZmlyc3RfbGF5ZXJfYmVkX3RlbXAKICAgICAgICAgICAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdzZXJ2ZXIvYWRkRXZlbnQnLCB7IG1lc3NhZ2U6IGdjb2RlLCB0eXBlOiAnY29tbWFuZCcgfSkKICAgICAgICAgICAgICAgIHRoaXMuJHNvY2tldC5lbWl0KCdwcmludGVyLmdjb2RlLnNjcmlwdCcsIHsgc2NyaXB0OiBnY29kZSB9KQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIGVkaXRGaWxlKGl0ZW06IEZpbGVTdGF0ZUZpbGUpIHsKICAgICAgICBjb25zdCBwYXRoID0gdGhpcy5jdXJyZW50UGF0aCA9PT0gJ2djb2RlcycgPyAnJyA6IHRoaXMuY3VycmVudFBhdGguc2xpY2UoNykKCiAgICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2VkaXRvci9vcGVuRmlsZScsIHsKICAgICAgICAgICAgcm9vdDogJ2djb2RlcycsCiAgICAgICAgICAgIHBhdGg6IHBhdGggIT09ICcnID8gJy8nK3BhdGggOiAnJywKICAgICAgICAgICAgZmlsZW5hbWU6IGl0ZW0uZmlsZW5hbWUsCiAgICAgICAgICAgIHNpemU6IGl0ZW0uc2l6ZSwKICAgICAgICAgICAgcGVybWlzc2lvbnM6IGl0ZW0ucGVybWlzc2lvbnMKICAgICAgICB9KQogICAgfQoKICAgIGRvd25sb2FkRmlsZSgpIHsKICAgICAgICBjb25zdCBmaWxlbmFtZSA9ICh0aGlzLmN1cnJlbnRQYXRoKycvJyt0aGlzLmNvbnRleHRNZW51Lml0ZW0uZmlsZW5hbWUpCiAgICAgICAgY29uc3QgaHJlZiA9IHRoaXMuYXBpVXJsICsgJy9zZXJ2ZXIvZmlsZXMvJyArIGVuY29kZVVSSShmaWxlbmFtZSkKCiAgICAgICAgd2luZG93Lm9wZW4oaHJlZikKICAgIH0KCiAgICByZW5hbWVGaWxlKGl0ZW06IEZpbGVTdGF0ZUZpbGUpIHsKICAgICAgICB0aGlzLmRpYWxvZ1JlbmFtZUZpbGUuaXRlbSA9IGl0ZW0KICAgICAgICB0aGlzLmRpYWxvZ1JlbmFtZUZpbGUubmV3TmFtZSA9IGl0ZW0uZmlsZW5hbWUKICAgICAgICB0aGlzLmRpYWxvZ1JlbmFtZUZpbGUuc2hvdyA9IHRydWUKCiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7CiAgICAgICAgICAgIHRoaXMuJHJlZnMuaW5wdXRGaWVsZFJlbmFtZUZpbGU/LmZvY3VzKCkKICAgICAgICB9LCAyMDApCiAgICB9CgogICAgcmVuYW1lRmlsZUFjdGlvbigpIHsKICAgICAgICB0aGlzLmRpYWxvZ1JlbmFtZUZpbGUuc2hvdyA9IGZhbHNlCiAgICAgICAgdGhpcy4kc29ja2V0LmVtaXQoJ3NlcnZlci5maWxlcy5tb3ZlJywgewogICAgICAgICAgICBzb3VyY2U6IHRoaXMuY3VycmVudFBhdGgrJy8nK3RoaXMuZGlhbG9nUmVuYW1lRmlsZS5pdGVtLmZpbGVuYW1lLAogICAgICAgICAgICBkZXN0OiB0aGlzLmN1cnJlbnRQYXRoKycvJyt0aGlzLmRpYWxvZ1JlbmFtZUZpbGUubmV3TmFtZQogICAgICAgIH0sIHsgYWN0aW9uOiAnZmlsZXMvZ2V0TW92ZScgfSkKICAgIH0KCiAgICByZW5hbWVEaXJlY3RvcnkoaXRlbTogRmlsZVN0YXRlRmlsZSkgewogICAgICAgIHRoaXMuZGlhbG9nUmVuYW1lRGlyZWN0b3J5Lml0ZW0gPSBpdGVtCiAgICAgICAgdGhpcy5kaWFsb2dSZW5hbWVEaXJlY3RvcnkubmV3TmFtZSA9IGl0ZW0uZmlsZW5hbWUKICAgICAgICB0aGlzLmRpYWxvZ1JlbmFtZURpcmVjdG9yeS5zaG93ID0gdHJ1ZQoKICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsKICAgICAgICAgICAgdGhpcy4kcmVmcy5pbnB1dEZpZWxkUmVuYW1lRGlyZWN0b3J5Py5mb2N1cygpCiAgICAgICAgfSwgMjAwKQogICAgfQoKICAgIHJlbmFtZURpcmVjdG9yeUFjdGlvbigpIHsKICAgICAgICB0aGlzLmRpYWxvZ1JlbmFtZURpcmVjdG9yeS5zaG93ID0gZmFsc2UKICAgICAgICB0aGlzLiRzb2NrZXQuZW1pdCgnc2VydmVyLmZpbGVzLm1vdmUnLCB7CiAgICAgICAgICAgIHNvdXJjZTogdGhpcy5jdXJyZW50UGF0aCsnLycrdGhpcy5kaWFsb2dSZW5hbWVEaXJlY3RvcnkuaXRlbS5maWxlbmFtZSwKICAgICAgICAgICAgZGVzdDogdGhpcy5jdXJyZW50UGF0aCsnLycrdGhpcy5kaWFsb2dSZW5hbWVEaXJlY3RvcnkubmV3TmFtZQogICAgICAgIH0sIHsgYWN0aW9uOiAnZmlsZXMvZ2V0TW92ZScgfSkKICAgIH0KCiAgICByZW1vdmVGaWxlKCkgewogICAgICAgIHRoaXMuJHNvY2tldC5lbWl0KCdzZXJ2ZXIuZmlsZXMuZGVsZXRlX2ZpbGUnLCB7IHBhdGg6IHRoaXMuY3VycmVudFBhdGgrJy8nK3RoaXMuY29udGV4dE1lbnUuaXRlbS5maWxlbmFtZSB9LCB7IGFjdGlvbjogJ2ZpbGVzL2dldERlbGV0ZUZpbGUnIH0pCiAgICB9CgogICAgZGVsZXRlRGlyZWN0b3J5KGl0ZW06IEZpbGVTdGF0ZUZpbGUpIHsKICAgICAgICB0aGlzLmRpYWxvZ0RlbGV0ZURpcmVjdG9yeS5pdGVtID0gaXRlbQogICAgICAgIHRoaXMuZGlhbG9nRGVsZXRlRGlyZWN0b3J5LnNob3cgPSB0cnVlCiAgICB9CgogICAgZGVsZXRlRGlyZWN0b3J5QWN0aW9uKCkgewogICAgICAgIHRoaXMuZGlhbG9nRGVsZXRlRGlyZWN0b3J5LnNob3cgPSBmYWxzZQogICAgICAgIHRoaXMuJHNvY2tldC5lbWl0KCdzZXJ2ZXIuZmlsZXMuZGVsZXRlX2RpcmVjdG9yeScsIHsgcGF0aDogdGhpcy5jdXJyZW50UGF0aCsnLycrdGhpcy5jb250ZXh0TWVudS5pdGVtLmZpbGVuYW1lLCBmb3JjZTogdHJ1ZSB9LCB7IGFjdGlvbjogJ2ZpbGVzL2dldERlbGV0ZURpcicgfSkKICAgIH0KCiAgICBzdGFydFByaW50KGZpbGVuYW1lID0gJycpIHsKICAgICAgICBmaWxlbmFtZSA9ICh0aGlzLmN1cnJlbnRQYXRoKycvJytmaWxlbmFtZSkuc3Vic3RyaW5nKDcpCiAgICAgICAgdGhpcy5kaWFsb2dQcmludEZpbGUuc2hvdyA9IGZhbHNlCiAgICAgICAgdGhpcy4kc29ja2V0LmVtaXQoJ3ByaW50ZXIucHJpbnQuc3RhcnQnLCB7IGZpbGVuYW1lOiBmaWxlbmFtZSB9LCB7IGFjdGlvbjogJ3N3aXRjaFRvRGFzaGJvYXJkJyB9KQogICAgfQoKICAgIGRyYWdGaWxlKGU6IEV2ZW50LCBpdGVtOiBGaWxlU3RhdGVGaWxlKSB7CiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpCiAgICAgICAgdGhpcy5kcmFnZ2luZ0ZpbGUuc3RhdHVzID0gdHJ1ZQogICAgICAgIHRoaXMuZHJhZ2dpbmdGaWxlLml0ZW0gPSBpdGVtCiAgICB9CgogICAgZHJhZ2VuZEZpbGUoZTogRXZlbnQpIHsKICAgICAgICBlLnByZXZlbnREZWZhdWx0KCkKICAgICAgICB0aGlzLmRyYWdnaW5nRmlsZS5zdGF0dXMgPSBmYWxzZQogICAgICAgIHRoaXMuZHJhZ2dpbmdGaWxlLml0ZW0gPSB7CiAgICAgICAgICAgIGlzRGlyZWN0b3J5OiBmYWxzZSwKICAgICAgICAgICAgZmlsZW5hbWU6ICcnLAogICAgICAgICAgICBwZXJtaXNzaW9uczogJycsCiAgICAgICAgICAgIG1vZGlmaWVkOiBuZXcgRGF0ZSgpCiAgICAgICAgfQogICAgfQoKICAgIEBXYXRjaCgnaGlkZU1ldGFkYXRhQ29sdW1zJykKICAgIGhpZGVNZXRhZGF0YUNvbHVtc0NhbmdlZChuZXdWYWw6IHN0cmluZ1tdKSB7CiAgICAgICAgbmV3VmFsLmZvckVhY2goKGtleSkgPT4gewogICAgICAgICAgICBsZXQgaGVhZGVyRWxlbWVudCA9IHRoaXMuaGVhZGVycy5maW5kKGVsZW1lbnQgPT4gZWxlbWVudC52YWx1ZSA9PT0ga2V5KQogICAgICAgICAgICBpZiAoaGVhZGVyRWxlbWVudCkgaGVhZGVyRWxlbWVudC52aXNpYmxlID0gZmFsc2UKICAgICAgICB9KQogICAgfQoKICAgIGlzR2NvZGVGaWxlKGZpbGU6IEZpbGVTdGF0ZUZpbGUpIHsKICAgICAgICBjb25zdCBmb3JtYXQgPSBmaWxlLmZpbGVuYW1lLnNsaWNlKGZpbGUuZmlsZW5hbWUubGFzdEluZGV4T2YoJy4nKSkKCiAgICAgICAgcmV0dXJuIHZhbGlkR2NvZGVFeHRlbnNpb25zLmluY2x1ZGVzKGZvcm1hdCkKICAgIH0KCiAgICB2aWV3M0QoaXRlbTogRmlsZVN0YXRlRmlsZSkgewogICAgICAgIHRoaXMuJHJvdXRlci5wdXNoKHtwYXRoOiAnL3ZpZXdlcicsIHF1ZXJ5OiB7ZmlsZW5hbWU6IHRoaXMuY3VycmVudFBhdGggKyAnLycgKyBpdGVtLmZpbGVuYW1lfX0pCiAgICB9Cn0K"},null]}