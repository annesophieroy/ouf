{"remainingRequest":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/components/TheTopCornerMenu.vue?vue&type=style&index=0&id=81512870&scoped=true&lang=css&","dependencies":[{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/components/TheTopCornerMenu.vue","mtime":1644874918000},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1645990066541},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1645990070825},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/postcss-loader/src/index.js","mtime":1645990067674},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js","mtime":1645990064605},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1645990069130}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5taW5oZWlnaHQzMCB7CiAgICBtaW4taGVpZ2h0OiAzMHB4Owp9Cg=="},{"version":3,"sources":["TheTopCornerMenu.vue"],"names":[],"mappings":";AACA;AACA;AACA","file":"TheTopCornerMenu.vue","sourceRoot":"src/components","sourcesContent":["<style scoped>\n    .minheight30 {\n        min-height: 30px;\n    }\n</style>\n\n<template>\n    <div>\n        <v-menu bottom left :offset-y=\"true\" :close-on-content-click=\"false\" v-model=\"showMenu\">\n            <template v-slot:activator=\"{ on, attrs }\">\n                <v-btn icon tile v-bind=\"attrs\" v-on=\"on\">\n                    <v-icon>mdi-power-standby</v-icon>\n                </v-btn>\n            </template>\n            <v-list dense>\n                <template v-if=\"klipperState !== 'disconnected'\">\n                    <v-subheader class=\"\" style=\"height: auto;\">{{ $t(\"App.TopCornerMenu.KlipperControl\") }}</v-subheader>\n                    <v-list-item class=\"minheight30 pr-2\" link @click=\"checkDialog(klipperRestart, 'klipper', 'restart')\">\n                        <v-list-item-title>{{ $t(\"App.TopCornerMenu.KlipperRestart\") }}</v-list-item-title>\n                        <v-list-item-action class=\"my-0 d-flex flex-row\" style=\"min-width: auto;\">\n                            <v-icon class=\"mr-2\" small>mdi-restart</v-icon>\n                        </v-list-item-action>\n                    </v-list-item>\n                    <v-list-item class=\"minheight30 pr-2\" link @click=\"checkDialog(klipperFirmwareRestart, 'klipper', 'firmwareRestart')\">\n                        <v-list-item-title>{{ $t(\"App.TopCornerMenu.KlipperFirmwareRestart\") }}</v-list-item-title>\n                        <v-list-item-action class=\"my-0 d-flex flex-row\" style=\"min-width: auto;\">\n                            <v-icon class=\"mr-2\" small>mdi-restart</v-icon>\n                        </v-list-item-action>\n                    </v-list-item>\n                </template>\n                <template v-if=\"services.length\">\n                    <v-divider class=\"mt-0\" v-if=\"klipperState !== 'disconnected'\"></v-divider>\n                    <v-subheader class=\"pt-2\" style=\"height: auto;\">{{ $t(\"App.TopCornerMenu.ServiceControl\") }}</v-subheader>\n                    <v-list-item class=\"minheight30 pr-2\" v-for=\"service in services\" v-bind:key=\"service\">\n                        <v-list-item-title>\n                            <v-tooltip left>\n                                <template v-slot:activator=\"{ on, attrs }\">\n                                    <span v-bind=\"attrs\" v-on=\"on\">{{ service.charAt(0).toUpperCase() + service.slice(1) }}</span>\n                                </template>\n                                <span>{{ getServiceState(service) }} ({{ getServiceSubState(service) }})</span>\n                            </v-tooltip>\n                        </v-list-item-title>\n                        <v-list-item-action class=\"my-0 d-flex flex-row\" style=\"min-width: auto;\">\n                            <v-btn icon small v-if=\"getServiceState(service) === 'inactive'\" @click=\"checkDialog(serviceStart, service, 'start')\"><v-icon small>mdi-play</v-icon></v-btn>\n                            <v-btn icon small v-else @click=\"checkDialog(serviceRestart, service, 'restart')\"><v-icon small>mdi-restart</v-icon></v-btn>\n                            <v-btn icon small :disabled=\"getServiceState(service) === 'inactive' || service === 'moonraker'\" @click=\"checkDialog(serviceStop, service, 'stop')\" :style=\"service === 'moonraker' ? 'visibility: hidden;' : ''\"><v-icon small>mdi-stop</v-icon></v-btn>\n                        </v-list-item-action>\n                    </v-list-item>\n                </template>\n                <template v-if=\"powerDevices.length\">\n                    <v-divider class=\"mt-0\"></v-divider>\n                    <v-subheader class=\"pt-2\" style=\"height: auto;\">{{ $t(\"App.TopCornerMenu.PowerDevices\") }}</v-subheader>\n                    <v-list-item v-for=\"(device, index) in powerDevices\" v-bind:key=\"index\" class=\"minheight30 pr-2\" @click=\"changeSwitch(device, device.status)\" :disabled=\"(device.status === 'error' || device.locked_while_printing && ['printing', 'paused'].includes(printer_state))\">\n                        <v-list-item-title>{{ device.device }}</v-list-item-title>\n                        <v-list-item-action class=\"my-0 d-flex flex-row\" style=\"min-width: auto;\">\n                            <v-icon class=\"mr-2\" :color=\"device.status === 'on' ? '' : 'grey darken-2'\">mdi-{{ device.status === 'on' ? 'toggle-switch' : 'toggle-switch-off' }}</v-icon>\n                        </v-list-item-action>\n                    </v-list-item>\n                </template>\n                <v-divider class=\"mt-0\"></v-divider>\n                <v-subheader class=\"pt-2\" style=\"height: auto;\">{{ $t(\"App.TopCornerMenu.HostControl\") }}</v-subheader>\n                <v-list-item class=\"minheight30 pr-2\" link @click=\"checkDialog(hostReboot, 'host', 'reboot')\">\n                    <v-list-item-title>{{ $t(\"App.TopCornerMenu.Reboot\") }}</v-list-item-title>\n                    <v-list-item-action class=\"my-0 d-flex flex-row\" style=\"min-width: auto;\">\n                        <v-icon class=\"mr-2\" small>mdi-power</v-icon>\n                    </v-list-item-action>\n                </v-list-item>\n                <v-list-item class=\"minheight30 pr-2\" link @click=\"checkDialog(hostShutdown, 'host', 'shutdown')\">\n                    <v-list-item-title>{{ $t(\"App.TopCornerMenu.Shutdown\") }}</v-list-item-title>\n                    <v-list-item-action class=\"my-0 d-flex flex-row\" style=\"min-width: auto;\">\n                        <v-icon class=\"mr-2\" small>mdi-power</v-icon>\n                    </v-list-item-action>\n                </v-list-item>\n            </v-list>\n        </v-menu>\n        <v-dialog v-model=\"dialogPowerDeviceChange.show\" width=\"400\" :fullscreen=\"isMobile\">\n            <v-card>\n                <v-card-title class=\"headline\">{{ this.dialogPowerDeviceChange.value === 'off' ? $t('PowerDeviceChangeDialog.TurnDeviceOn', {'device': dialogPowerDeviceChange.device}) : $t('PowerDeviceChangeDialog.TurnDeviceOff', {'device': dialogPowerDeviceChange.device}) }}</v-card-title>\n                <v-card-text>{{ $t('PowerDeviceChangeDialog.AreYouSure') }}</v-card-text>\n                <v-card-actions>\n                    <v-spacer></v-spacer>\n                    <v-btn color=\"red darken-1\" text @click=\"dialogPowerDeviceChange.show = false\">{{ $t('PowerDeviceChangeDialog.No')}}</v-btn>\n                    <v-btn color=\"green darken-1\" text @click=\"powerDeviceToggle\">{{$t('PowerDeviceChangeDialog.Yes')}}</v-btn>\n                </v-card-actions>\n            </v-card>\n        </v-dialog>\n        <v-dialog v-model=\"dialogConfirmation.show\" width=\"400\" :fullscreen=\"isMobile\">\n            <panel card-class=\"confirm-top-corner-menu-dialog\" icon=\"mdi-alert\" :title=\"dialogConfirmation.title\" :margin-bottom=\"false\">\n                <template v-slot:buttons>\n                    <v-btn icon tile @click=\"dialogConfirmation.show = false\"><v-icon>mdi-close-thick</v-icon></v-btn>\n                </template>\n                <v-card-text class=\"pt-3\">\n                    <v-row>\n                        <v-col>\n                            <p class=\"body-2\">{{ dialogConfirmation.description }}</p>\n                        </v-col>\n                    </v-row>\n                </v-card-text>\n                <v-card-actions>\n                    <v-spacer></v-spacer>\n                    <v-btn text @click=\"dialogConfirmation.show = false\">\n                        {{ $t('App.TopCornerMenu.Cancel') }}\n                    </v-btn>\n                    <v-btn text color=\"error\" @click=\"executeDialog\">\n                        {{ dialogConfirmation.actionButtonText }}\n                    </v-btn>\n                </v-card-actions>\n            </panel>\n        </v-dialog>\n    </div>\n</template>\n\n<script lang=\"ts\">\n\nimport Component from 'vue-class-component'\nimport { Mixins } from 'vue-property-decorator'\nimport BaseMixin from '@/components/mixins/base'\nimport {ServerPowerStateDevice} from '@/store/server/power/types'\nimport Panel from '@/components/ui/Panel.vue'\n\ninterface dialogPowerDeviceChange {\n    show: boolean\n    device: string\n    value: string\n}\n\ninterface dialogConfirmation {\n    show: boolean\n    serviceName: string | null\n    executableFunction: any | null\n    title: string\n    description: string\n    actionButtonText: string\n}\n\n@Component({\n    components: {Panel}\n})\nexport default class TheTopCornerMenu extends Mixins(BaseMixin) {\n\n    showMenu = false\n    dialogPowerDeviceChange : dialogPowerDeviceChange = {\n        show: false,\n        device: '',\n        value: ''\n    }\n\n    dialogConfirmation: dialogConfirmation = {\n        show: false,\n        serviceName: null,\n        executableFunction: null,\n        title: '',\n        description: '',\n        actionButtonText: ''\n    }\n\n    get services() {\n        const services = this.$store.state.server.system_info?.available_services?.filter((name: string) => name !== 'klipper_mcu') ?? []\n        services.sort()\n        return services\n    }\n\n    get powerDevices() {\n        return this.$store.getters['server/power/getDevices']\n    }\n\n    get service_states() {\n        return this.$store.state.server.system_info?.service_state ?? {}\n    }\n\n    getServiceState(name: string) {\n        if (name in this.service_states) return this.service_states[name].active_state\n\n        return null\n    }\n\n    getServiceSubState(name: string) {\n        if (name in this.service_states) return this.service_states[name].sub_state\n\n        return null\n    }\n\n    checkDialog(executableFunction: any, serviceName: string, action: string) {\n        if (this.printerIsPrinting) {\n            this.dialogConfirmation.executableFunction = executableFunction\n            this.dialogConfirmation.serviceName = serviceName\n\n            const actionUppercase = action.trim().charAt(0).toUpperCase() + action.trim().slice(1)\n            let titleKey = 'App.TopCornerMenu.ConfirmationDialog.Title.Service' + actionUppercase\n            let descriptionKey = 'App.TopCornerMenu.ConfirmationDialog.Description.Service' + actionUppercase\n            let buttonKey = 'App.TopCornerMenu.' + actionUppercase\n\n            if (serviceName === 'klipper' && ['stop', 'restart', 'firmwareRestart'].includes(action)){\n                titleKey = 'App.TopCornerMenu.ConfirmationDialog.Title.' + (action !== 'stop' ? 'Klipper' : 'Service') + actionUppercase\n                descriptionKey = 'App.TopCornerMenu.ConfirmationDialog.Description.Klipper' + actionUppercase\n\n                if (action === 'firmwareRestart') buttonKey = 'App.TopCornerMenu.KlipperFirmwareRestart'\n            } else if (serviceName === 'host') {\n                titleKey = 'App.TopCornerMenu.ConfirmationDialog.Title.Host' + actionUppercase\n                descriptionKey = 'App.TopCornerMenu.ConfirmationDialog.Description.Host' + actionUppercase\n            }\n\n            this.dialogConfirmation.title = this.$t(titleKey).toString()\n            this.dialogConfirmation.description = this.$t(descriptionKey).toString()\n            this.dialogConfirmation.actionButtonText = this.$t(buttonKey).toString()\n            this.dialogConfirmation.show = true\n        } else executableFunction(serviceName)\n    }\n\n    executeDialog() {\n        this.dialogConfirmation.executableFunction(this.dialogConfirmation.serviceName)\n        this.dialogConfirmation.show = false\n    }\n\n    klipperRestart() {\n        this.showMenu = false\n        this.$store.dispatch('server/addEvent', { message: 'RESTART', type: 'command' })\n        this.$socket.emit('printer.gcode.script', { script: 'RESTART' })\n    }\n\n    klipperFirmwareRestart() {\n        this.showMenu = false\n        this.$store.dispatch('server/addEvent', { message: 'FIRMWARE_RESTART', type: 'command' })\n        this.$socket.emit('printer.gcode.script', { script: 'FIRMWARE_RESTART' })\n    }\n\n    serviceStart(service: string) {\n        this.showMenu = false\n        this.$socket.emit('machine.services.start', { service: service })\n    }\n\n    serviceRestart(service: string) {\n        this.showMenu = false\n        this.$socket.emit('machine.services.restart', { service: service })\n    }\n\n    serviceStop(service: string) {\n        this.showMenu = false\n        this.$socket.emit('machine.services.stop', { service: service })\n    }\n\n    changeSwitch(device: ServerPowerStateDevice, value: string) {\n        this.dialogPowerDeviceChange.device = device.device\n        this.dialogPowerDeviceChange.value = value\n\n        const confirmOnPowerDeviceChange = this.$store.state.gui.uiSettings.confirmOnPowerDeviceChange\n        if (confirmOnPowerDeviceChange) {\n            this.dialogPowerDeviceChange.show = true\n        } else {\n            this.powerDeviceToggle()\n        }\n    }\n\n    powerDeviceToggle() {\n        this.dialogPowerDeviceChange.show = false\n        const rpc = (this.dialogPowerDeviceChange.value === 'off' ? 'machine.device_power.on' : 'machine.device_power.off')\n        this.$socket.emit(rpc,{ [this.dialogPowerDeviceChange.device]: null },{ action: 'server/power/responseToggle' })\n    }\n\n    hostReboot() {\n        this.showMenu = false\n        this.$socket.emit('machine.reboot', { })\n    }\n\n    hostShutdown() {\n        this.showMenu = false\n        this.$socket.emit('machine.shutdown', { })\n    }\n}\n</script>"]}]}