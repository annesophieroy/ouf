{"remainingRequest":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/pages/Heightmap.vue?vue&type=style&index=0&id=37696b3e&scoped=true&lang=css&","dependencies":[{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/pages/Heightmap.vue","mtime":1644874918000},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1645990066541},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1645990070825},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/postcss-loader/src/index.js","mtime":1645990067674},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js","mtime":1645990064605},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1645990069130}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5yZW5hbWUtcHJvZmlsZSB7CiAgICB0ZXh0LXRyYW5zZm9ybTogbm9uZTsKfQo="},{"version":3,"sources":["Heightmap.vue"],"names":[],"mappings":";AACA;AACA;AACA","file":"Heightmap.vue","sourceRoot":"src/pages","sourcesContent":["<style scoped>\n.rename-profile {\n    text-transform: none;\n}\n</style>\n\n<template>\n    <div>\n        <v-row v-if=\"klipperReadyForGui\">\n            <v-col class=\"col-12 col-md-8 pb-0\">\n                <panel card-class=\"heightmap-map-panel\" :title=\"$t('Heightmap.Heightmap')\" icon=\"mdi-grid\">\n                    <template v-slot:buttons-title>\n                        <v-btn text tile color=\"primary\" class=\"ml-1 d-none d-sm-inline-flex rename-profile\" v-if=\"meshLoaded\" @click=\"openRenameProfile()\">{{ bed_mesh.profile_name }}</v-btn>\n                    </template>\n                    <template v-slot:buttons>\n                        <v-btn text tile color=\"primary\" class=\"d-sm-none\" v-if=\"meshLoaded\" @click=\"openRenameProfile()\">{{ bed_mesh ? bed_mesh.profile_name : \"\" }}</v-btn>\n                        <v-btn icon tile class=\"d-none d-sm-flex\" @click=\"homePrinter\" :color=\"homedAxes.includes('xyz') ? 'primary' : 'warning'\" :loading=\"loadings.includes('homeAll')\" :title=\"$t('Heightmap.TitleHomeAll')\" :ripple=\"true\"><v-icon>mdi-home</v-icon></v-btn>\n                        <v-btn text tile class=\"d-none d-sm-flex\" @click=\"clearBedMesh\" :loading=\"loadings.includes('bedMeshClear')\" v-if=\"meshLoaded\" :title=\"$t('Heightmap.TitleClear')\">{{ $t('Heightmap.Clear') }}</v-btn>\n                        <v-btn text tile class=\"d-none d-sm-flex\" @click=\"calibrateDialog = true\" :loading=\"loadings.includes('bedMeshCalibrate')\" :disabled=\"printerIsPrinting\" :title=\"$t('Heightmap.TitleCalibrate')\">{{ $t('Heightmap.Calibrate') }}</v-btn>\n                    </template>\n                    <v-card-text class=\"d-sm-none text-center pb-0\">\n                        <v-item-group tile class=\"v-btn-toggle\" name=\"controllers\">\n                            <v-btn text small class=\"px-2 minwidth-0\" :color=\"homedAxes.includes('xyz') ? 'primary' : 'warning'\" @click=\"homePrinter\" :loading=\"loadings.includes('homeAll')\" :title=\"$t('Heightmap.TitleHomeAll')\"><v-icon :color=\"homedAxes.includes('xyz') ? 'primary' : 'warning'\" small>mdi-home</v-icon></v-btn>\n                            <v-btn text small class=\"px-2 minwidth-0\" color=\"primary\" @click=\"clearBedMesh\" :loading=\"loadings.includes('bedMeshClear')\" v-if=\"bed_mesh\" :title=\"$t('Heightmap.TitleClear')\">{{ $t('Heightmap.Clear') }}</v-btn>\n                            <v-btn text small class=\"px-2 minwidth-0\" color=\"primary\" @click=\"calibrateDialog = true\" :loading=\"loadings.includes('bedMeshCalibrate')\" :disabled=\"printerIsPrinting\" :title=\"$t('Heightmap.TitleCalibrate')\">{{ $t('Heightmap.Calibrate') }}</v-btn>\n                        </v-item-group>\n                    </v-card-text>\n                    <template v-if=\"!(meshLoaded)\">\n                        <v-card-text class=\"text-center py-3 font-italic\">\n                            {{ $t('Heightmap.NoBedMeshHasBeenLoadedYet') }}\n                        </v-card-text>\n                    </template>\n                    <template v-else>\n                        <v-card-text class=\"py-0 px-0\">\n                            <v-row>\n                                <v-col class=\"\">\n                                    <ECharts\n                                        ref=\"heightmap\"\n                                        :option=\"chartOptions\"\n                                        :init-options=\"{ renderer: 'svg' }\"\n                                        style=\"height: 400px; width: 100%; overflow: hidden;\"\n                                    ></ECharts>\n                                </v-col>\n                            </v-row>\n                            <v-row>\n                                <v-col class=\"col-12 col-sm-auto pt-0 pb-0 pl-sm-6 d-flex justify-center justify-sm-start\">\n                                    <v-switch v-model=\"scaleVisualMap\" :label=\"$t('Heightmap.Scale')\" class=\"mt-0 ml-5\"></v-switch>\n                                </v-col>\n                                <v-col class=\"d-flex justify-center pt-0 pb-6 pb-sm-3 pr-sm-16\">\n                                    <v-checkbox v-model=\"showProbed\" :label=\"$t('Heightmap.Probed')\" hide-details class=\"mx-3 mt-0\" ></v-checkbox>\n                                    <v-checkbox v-model=\"showMesh\" :label=\"$t('Heightmap.Mesh')\" hide-details class=\"mx-3 mt-0\" ></v-checkbox>\n                                    <v-checkbox v-model=\"showFlat\" :label=\"$t('Heightmap.Flat')\" hide-details class=\"mx-3 mt-0\" ></v-checkbox>\n                                </v-col>\n                            </v-row>\n                        </v-card-text>\n                        <v-divider></v-divider>\n                        <v-card-text class=\"pt-0 pb-3\">\n                            <v-row>\n                                <v-col class=\"col-4\">\n                                    <v-checkbox v-model=\"wireframe\" :label=\"$t('Heightmap.Wireframe')\" hide-details ></v-checkbox>\n                                </v-col>\n                                <v-col class=\"col-8\">\n                                    <v-slider :label=\"$t('Heightmap.Scale')\" :min=\"heightmapRangeLimit[0]\" :max=\"heightmapRangeLimit[1]\" v-model=\"heightmapScale\" :step=\"0.1\" ticks=\"always\" class=\"mt-4\" hide-details ></v-slider>\n                                </v-col>\n                            </v-row>\n                        </v-card-text>\n                    </template>\n                </panel>\n            </v-col>\n            <v-col class=\"col-12 col-md-4\">\n                <panel :title=\"$t('Heightmap.CurrentMesh.Headline')\" v-if=\"meshLoaded\" card-class=\"heightmap-current-mesh-panel\" icon=\"mdi-information\" :collapsible=\"true\" class=\"mt-0\">\n                    <v-card-text class=\"py-3 px-0\">\n                        <v-row class=\"px-3\">\n                            <v-col>{{ $t('Heightmap.CurrentMesh.Name') }}</v-col>\n                            <v-col class=\"text-right\">{{ bed_mesh.profile_name }}</v-col>\n                        </v-row>\n                        <v-divider class=\"my-3\"></v-divider>\n                        <v-row class=\"px-3\">\n                            <v-col>{{ $t('Heightmap.CurrentMesh.Size') }}</v-col>\n                            <v-col class=\"text-right\">{{ bed_mesh.probed_matrix[0].length }}x{{ bed_mesh.probed_matrix.length }}</v-col>\n                        </v-row>\n                        <v-divider class=\"my-3\"></v-divider>\n                        <v-row class=\"px-3\">\n                            <v-col>{{ $t('Heightmap.CurrentMesh.Max') }} [{{ bedMeshMaxPoint.positionX }}, {{ bedMeshMaxPoint.positionY }}]</v-col>\n                            <v-col class=\"text-right\">{{ bedMeshMaxPoint.value }} mm</v-col>\n                        </v-row>\n                        <v-divider class=\"my-3\"></v-divider>\n                        <v-row class=\"px-3\">\n                            <v-col>{{ $t('Heightmap.CurrentMesh.Min') }} [{{ bedMeshMinPoint.positionX }}, {{ bedMeshMinPoint.positionY }}]</v-col>\n                            <v-col class=\"text-right\">{{ bedMeshMinPoint.value }} mm</v-col>\n                        </v-row>\n                        <v-divider class=\"my-3\"></v-divider>\n                        <v-row class=\"px-3\">\n                            <v-col>{{ $t('Heightmap.CurrentMesh.Variance') }}</v-col>\n                            <v-col class=\"text-right\">{{ Math.abs(bedMeshMinPoint.value - bedMeshMaxPoint.value).toFixed(3) }} mm</v-col>\n                        </v-row>\n                    </v-card-text>\n                </panel>\n                <panel :title=\"$t('Heightmap.Profiles')\" card-class=\"heightmap-profiles-panel\" icon=\"mdi-stack-overflow\" :collapsible=\"true\" class=\"mt-6 mt-md-0\">\n                    <v-card-text class=\"py-0 px-0\" v-if=\"profiles.length\">\n                        <v-simple-table>\n                            <template v-slot:default>\n                                <tbody>\n                                <tr v-for=\"(profile, index) in profiles\" :key=\"index\" >\n                                    <td><span @click=\"loadProfile(profile.name)\" :class=\"profile.is_active ? 'font-weight-bold' : ''\" style=\"cursor: pointer;\">{{ profile.name }}</span><small class=\"ml-2\" v-if=\"'deleted' in profile.data\">({{ $t('Heightmap.Deleted') }})</small></td>\n                                    <td>\n                                        <v-tooltip top color=\"rgba(0,0,0,0.8)\">\n                                            <template v-slot:activator=\"{ on, attrs }\">\n                                                <small v-bind=\"attrs\" v-on=\"on\">{{ profile.variance.toFixed(3) }}</small>\n                                            </template>\n                                            <span>max: {{ profile.max }}<br />min: {{ profile.min }}</span>\n                                        </v-tooltip>\n                                    </td>\n                                    <td class=\"text-right\">\n                                        <v-btn-toggle dense no-gutters>\n                                            <v-btn class=\"minwidth-0\" @click=\"loadProfile(profile.name)\" :loading=\"loadings.includes('bedMeshLoad_'+profile.name)\" :disabled=\"profile.is_active || 'deleted' in profile.data\" ><v-icon small>mdi-view-grid-plus</v-icon></v-btn>\n                                            <v-btn class=\"minwidth-0\" @click=\"openRemoveProfile(profile.name)\" :loading=\"loadings.includes('bedMeshRemove_'+profile.name)\" :disabled=\"'deleted' in profile.data\" :title=\"$t('Heightmap.DeleteBedMeshProfile')\" ><v-icon small>mdi-delete</v-icon></v-btn>\n                                        </v-btn-toggle>\n                                    </td>\n                                </tr>\n                                </tbody>\n                            </template>\n                        </v-simple-table>\n                    </v-card-text>\n                    <v-card-text v-else>\n                        <p>{{ $t('Heightmap.NoProfile') }}</p>\n                    </v-card-text>\n                </panel>\n            </v-col>\n        </v-row>\n        <v-row v-else>\n            <v-alert\n                border=\"left\"\n                colored-border\n                type=\"warning\"\n                elevation=\"2\"\n                class=\"mx-auto mt-6\"\n                max-width=\"500\"\n                icon=\"mdi-lock-outline\"\n            >{{ $t('Heightmap.ErrorKlipperNotReady') }}</v-alert>\n        </v-row>\n        <v-dialog v-model=\"renameDialog\" persistent :max-width=\"400\" @keydown.esc=\"renameDialog = false\">\n            <panel :title=\"$t('Heightmap.RenameBedMeshProfile')\" icon=\"mdi-grid\" card-class=\"heightmap-rename-dialog\" :margin-bottom=\"false\">\n                <v-card-text>\n                    <v-text-field\n                        :label=\"$t('Heightmap.Name')\" \n                        v-model=\"newName\"\n                        ref=\"inputDialogRenameHeightmapName\"\n                        @keyup.enter=\"renameProfile\"\n                        required\n                    ></v-text-field>\n                </v-card-text>\n                <v-card-actions>\n                    <v-spacer></v-spacer>\n                    <v-btn text @click=\"renameDialog = false\">{{ $t('Heightmap.Abort') }}</v-btn>\n                    <v-btn color=\"primary\" text @click=\"renameProfile\">{{ $t('Heightmap.Rename') }}</v-btn>\n                </v-card-actions>\n            </panel>\n        </v-dialog>\n        <v-dialog v-model=\"calibrateDialog\" persistent :max-width=\"400\" @keydown.esc=\"calibrateDialog = false\">\n            <panel :title=\"$t('Heightmap.BedMeshCalibrate')\" icon=\"mdi-grid\" card-class=\"heightmap-calibrate-dialog\" :margin-bottom=\"false\">\n                <v-card-text>\n                    <p>{{ $t('Heightmap.DoYouReallyWantToCalibrate') }}</p>\n                </v-card-text>\n                <v-card-actions>\n                    <v-spacer></v-spacer>\n                    <v-btn text @click=\"calibrateDialog = false\">{{ $t('Heightmap.Abort') }}</v-btn>\n                    <v-btn color=\"primary\" text @click=\"calibrateMesh\">{{ $t('Heightmap.Calibrate') }}</v-btn>\n                </v-card-actions>\n            </panel>\n        </v-dialog>\n        <v-dialog v-model=\"removeDialog\" persistent :max-width=\"400\" @keydown.esc=\"removeDialog = false\">\n            <panel :title=\"$t('Heightmap.BedMeshRemove')\" icon=\"mdi-grid\" card-class=\"heightmap-calibrate-dialog\" :margin-bottom=\"false\">\n                <v-card-text>\n                    <p>{{ $t('Heightmap.DoYouReallyWantToDelete', { name: removeDialogProfile })  }}</p>\n                </v-card-text>\n                <v-card-actions>\n                    <v-spacer></v-spacer>\n                    <v-btn text @click=\"removeDialog = false\">{{ $t('Heightmap.Abort') }}</v-btn>\n                    <v-btn color=\"error\" text @click=\"removeProfile\">{{ $t('Heightmap.Remove') }}</v-btn>\n                </v-card-actions>\n            </panel>\n        </v-dialog>\n    </div>\n</template>\n<script lang=\"ts\">\nimport {Component, Mixins, Watch} from 'vue-property-decorator'\nimport BaseMixin from '@/components/mixins/base'\nimport ControlMixin from '@/components/mixins/control'\n\nimport { createComponent } from 'echarts-for-vue'\nimport * as echarts from 'echarts'\nimport {ECharts} from 'echarts/core'\nimport 'echarts-gl'\nimport Panel from '@/components/ui/Panel.vue'\n\ninterface HeightmapSerie {\n    type: string\n    name: string\n    data: number[][]\n    dataShape?: number[]\n    itemStyle?: {\n        opacity?: number\n        color?: number[]\n    }\n    wireframe: {\n        show: boolean\n    }\n}\n\n@Component({\n    components: {\n        Panel,\n        ECharts: createComponent({ echarts }),\n    }\n})\nexport default class PageHeightmap extends Mixins(BaseMixin, ControlMixin) {\n\n    $refs!: {\n        // eslint-disable-next-line\n        heightmap: any,\n        inputDialogRenameHeightmapName: HTMLInputElement,\n    }\n\n    private renameDialog = false\n    private removeDialogProfile = ''\n    private removeDialog = false\n    private calibrateDialog = false\n    private newName = ''\n    private oldName = ''\n\n    private heightmapScale = 0.5\n    private probedOpacity = 1\n    private meshOpacity = 1\n    private flatOpacity = 0.5\n\n    private colorAxisName = 'rgba(255,255,255,0.5)'\n    private colorAxisLabel = 'rgba(255,255,255,0.5)'\n    private colorAxisLine = 'rgba(255,255,255,0.2)'\n    private colorAxisTick = 'rgba(255,255,255,0.2)'\n    private colorSplitLine = 'rgba(255,255,255,0.2)'\n\n    private colorAxisPointer = 'rgba(255,255,255,0.8)'\n\n    private colorVisualMap = 'rgba(255,255,255,0.8)'\n    private fontSizeVisualMap = 14\n\n    get chartOptions() {\n        return {\n            tooltip: {\n                backgroundColor: 'rgba(0,0,0,0.9)',\n                borderWidth: 0,\n                textStyle: {\n                    color: '#fff',\n                    fontSize: '14px'\n                },\n                padding: 15,\n                formatter: this.tooltipFormatter\n            },\n            darkMode: true,\n            animation: false,\n            legend: {\n                show: false,\n                selected: this.selected\n            },\n            visualMap: {\n                show: true,\n                min: this.visualMapRange[0],\n                max: this.visualMapRange[1],\n                calculable: true,\n                dimension: 2,\n                inRange: {\n                    color: ['#313695', '#4575b4', '#74add1', '#abd9e9', '#e0f3f8', '#ffffbf', '#fee090', '#fdae61', '#f46d43', '#d73027', '#a50026']\n                },\n                seriesIndex: this.visualMapSeriesIndex,\n                left: this.isMobile ? 10 : 30,\n                top: 20,\n                bottom: 0,\n                itemWidth: this.isMobile ? 10 : 30,\n                itemHeight: 350,\n                precision: 3,\n                textStyle: {\n                    color: this.colorVisualMap,\n                    fontSize: this.fontSizeVisualMap\n                },\n            },\n            xAxis3D: {\n                type: 'value',\n                nameTextStyle: {\n                    color: this.colorAxisName\n                },\n                min: this.rangeX[0],\n                max: this.rangeX[1],\n                minInterval: 1\n            },\n            yAxis3D: {\n                type: 'value',\n                nameTextStyle: {\n                    color: this.colorAxisName\n                },\n                min: this.rangeY[0],\n                max: this.rangeY[1],\n            },\n            zAxis3D: {\n                type: 'value',\n                min: this.heightmapScale * -1,\n                max: this.heightmapScale,\n                nameTextStyle: {\n                    color: this.colorAxisName\n                },\n                axisPointer: {\n                    label: {\n                        formatter: function(value: any) {\n                            value = parseFloat(value)\n                            return value.toFixed(2)\n                        }\n                    }\n                }\n\n            },\n            grid3D: {\n                axisLabel: {\n                    textStyle: {\n                        color: this.colorAxisLabel\n                    }\n                },\n                axisLine: {\n                    lineStyle: {\n                        color: this.colorAxisLine\n                    }\n                },\n                axisTick: {\n                    lineStyle: {\n                        color: this.colorAxisTick\n                    }\n                },\n                splitLine: {\n                    lineStyle: {\n                        color: this.colorSplitLine\n                    }\n                },\n                axisPointer: {\n                    lineStyle: {\n                        color: this.colorAxisPointer\n                    },\n                    label: {\n                        textStyle: {\n                            color: this.colorAxisPointer\n                        }\n                    }\n                }\n            },\n            series: this.series\n        }\n    }\n\n    get chart (): ECharts | null {\n        const heightmap = this.$refs.heightmap\n        return heightmap?.inst ?? null\n    }\n\n    get profiles () {\n        return this.$store.getters['printer/getBedMeshProfiles']\n    }\n\n    get bed_mesh() {\n        return this.$store.state.printer.bed_mesh ?? null\n    }\n\n    @Watch('bed_mesh', { deep: true })\n    bed_meshChanged() {\n        this.chart?.setOption(this.chartOptions)\n    }\n\n    get showProbed(): boolean {\n        return this.$store.state.gui.view.heightmap.probed ?? true\n    }\n\n    set showProbed(newVal) {\n        this.$store.dispatch('gui/saveSetting', { name: 'view.heightmap.probed', value: newVal })\n    }\n\n    get showMesh(): boolean {\n        return this.$store.state.gui.view.heightmap.mesh ?? true\n    }\n\n    set showMesh(newVal) {\n        this.$store.dispatch('gui/saveSetting', { name: 'view.heightmap.mesh', value: newVal })\n    }\n\n    get showFlat(): boolean {\n        return this.$store.state.gui.view.heightmap.flat ?? true\n    }\n\n    set showFlat(newVal) {\n        this.$store.dispatch('gui/saveSetting', { name: 'view.heightmap.flat', value: newVal })\n    }\n\n    get wireframe(): boolean {\n        return this.$store.state.gui.view.heightmap.wireframe ?? true\n    }\n\n    set wireframe(newVal) {\n        this.$store.dispatch('gui/saveSetting', { name: 'view.heightmap.wireframe', value: newVal })\n    }\n\n    get scale(): boolean {\n        return this.$store.state.gui.view.heightmap.scale ?? true\n    }\n\n    set scale(newVal) {\n        this.$store.dispatch('gui/saveSetting', { name: 'view.heightmap.scale', value: newVal })\n    }\n\n    get scaleVisualMap(): boolean {\n        return this.$store.state.gui.view.heightmap.scaleVisualMap ?? false\n    }\n\n    set scaleVisualMap(newVal) {\n        this.$store.dispatch('gui/saveSetting', { name: 'view.heightmap.scaleVisualMap', value: newVal })\n    }\n\n    get rangeX(): number[] {\n        const axis_minimum = this.$store.state.printer.toolhead?.axis_minimum\n        const axis_maximum = this.$store.state.printer.toolhead?.axis_maximum\n\n        return [axis_minimum[0] ?? 0, axis_maximum[0] ?? 0]\n    }\n\n    get rangeY(): number[] {\n        const axis_minimum = this.$store.state.printer.toolhead?.axis_minimum ?? [0,0]\n        const axis_maximum = this.$store.state.printer.toolhead?.axis_maximum ?? [0,0]\n\n        return [axis_minimum[1] ?? 0, axis_maximum[1] ?? 0]\n    }\n\n    get heightmapLimit(): number[] {\n        let min = 0\n        let max = 0\n\n        if (this.bed_mesh) {\n            const points = []\n            if (this.showProbed) {\n                for (const row of this.bed_mesh.probed_matrix) for (const col of row) points.push(col)\n            }\n            if (this.showMesh) {\n                for (const row of this.bed_mesh.mesh_matrix) for (const col of row) points.push(col)\n            }\n\n            min = Math.min(min, ...points)\n            max = Math.max(max, ...points)\n        }\n\n        return [min, max]\n    }\n\n    get probedHeightmapLimit(): number[] {\n        let min = 0\n        let max = 0\n\n        if (this.bed_mesh) {\n            const points = []\n            for (const row of this.bed_mesh.probed_matrix) for (const col of row) points.push(col)\n\n            min = Math.min(min, ...points)\n            max = Math.max(max, ...points)\n        }\n\n        return [min, max]\n    }\n\n    get heightmapRangeLimit(): number[] {\n        const [min, max] = this.heightmapLimit\n\n        const minRange = Math.round(Math.max(Math.abs(min), Math.abs(max)) * 10) / 10\n        const maxRange = Math.max(minRange, 0.5)\n\n        return [minRange, maxRange]\n    }\n\n    get selected(): { [key: string]: boolean } {\n        return {\n            'probed': this.showProbed,\n            'mesh': this.showMesh,\n            'flat': this.showFlat,\n        }\n    }\n\n    get series(): HeightmapSerie[] {\n        const series = []\n\n        if (this.bed_mesh) {\n            series.push(this.seriesProbed)\n            series.push(this.seriesMesh)\n            series.push(this.seriesFlat)\n        }\n\n        return series\n    }\n\n    get seriesProbed(): HeightmapSerie {\n        const serie: HeightmapSerie = {\n            type: 'surface',\n            name: 'probed',\n            data: [],\n            itemStyle: {\n                opacity: this.probedOpacity\n            },\n            wireframe: {\n                show: this.wireframe\n            }\n        }\n\n        if (this.bed_mesh) {\n            const xCount = this.bed_mesh.probed_matrix[0].length\n            const yCount = this.bed_mesh.probed_matrix.length\n            const xMin = this.bed_mesh.mesh_min[0]\n            const xMax = this.bed_mesh.mesh_max[0]\n            const yMin = this.bed_mesh.mesh_min[1]\n            const yMax = this.bed_mesh.mesh_max[1]\n            const xStep = (xMax - xMin) / (xCount - 1)\n            const yStep = (yMax - yMin) / (yCount - 1)\n\n            const data: any[] = []\n\n            let yPoint = 0\n            this.bed_mesh.probed_matrix.forEach((meshRow: number[]) => {\n                let xPoint = 0\n                meshRow.forEach((value: number) => {\n                    data.push([\n                        (xMin + xStep * xPoint),\n                        (yMin + yStep * yPoint),\n                        value\n                    ])\n                    xPoint++\n                })\n                yPoint++\n            })\n\n            serie.data = data\n            serie.dataShape = [yCount, xCount]\n        }\n\n        return serie\n    }\n\n    get seriesMesh(): HeightmapSerie {\n        const serie: HeightmapSerie = {\n            type: 'surface',\n            name: 'mesh',\n            data: [],\n            itemStyle: {\n                opacity: this.meshOpacity\n            },\n            wireframe: {\n                show: this.wireframe,\n            }\n        }\n\n        if (this.bed_mesh) {\n            const xCount = this.bed_mesh.mesh_matrix[0].length\n            const yCount = this.bed_mesh.mesh_matrix.length\n            const xMin = this.bed_mesh.mesh_min[0]\n            const xMax = this.bed_mesh.mesh_max[0]\n            const yMin = this.bed_mesh.mesh_min[1]\n            const yMax = this.bed_mesh.mesh_max[1]\n            const xStep = (xMax - xMin) / (xCount - 1)\n            const yStep = (yMax - yMin) / (yCount - 1)\n\n            const data: any[] = []\n\n            let yPoint = 0\n            this.bed_mesh.mesh_matrix.forEach((meshRow: number[]) => {\n                let xPoint = 0\n                meshRow.forEach((value: number) => {\n                    data.push([\n                        (xMin + xStep * xPoint),\n                        (yMin + yStep * yPoint),\n                        value\n                    ])\n                    xPoint++\n                })\n                yPoint++\n            })\n\n            serie.data = data\n            serie.dataShape = [yCount, xCount]\n        }\n\n        return serie\n    }\n\n    get seriesFlat(): HeightmapSerie {\n        const serie: HeightmapSerie = {\n            type: 'surface',\n            name: 'flat',\n            data: [],\n            itemStyle: {\n                color: [1, 1, 1, 1],\n                opacity: this.flatOpacity\n            },\n            wireframe: {\n                show: this.wireframe\n            }\n        }\n\n        const config = this.$store.state.printer.configfile?.settings?.bed_mesh\n        if (config) {\n            let probe_count = [1,1]\n            if (config.probe_count && typeof config.probe_count === 'string') {\n                probe_count = config.probe_count.split(',')\n            } else if (config.probe_count) {\n                probe_count = config.probe_count\n            } else if (config.round_probe_count) {\n                probe_count = [config.round_probe_count, config.round_probe_count]\n            }\n\n            let mesh_min = []\n            let mesh_max = []\n\n            if (config.mesh_min && config.mesh_max) {\n                // is no delta\n                mesh_min = (typeof config.mesh_min === 'string') ? config.mesh_min.split(',') : config.mesh_min\n                mesh_max = (typeof config.mesh_max === 'string') ? config.mesh_max.split(',') : config.mesh_max\n            } else {\n                // delta min/max\n                mesh_min = [\n                    config.mesh_radius * -1,\n                    config.mesh_radius * -1\n                ]\n\n                mesh_max = [\n                    config.mesh_radius,\n                    config.mesh_radius\n                ]\n            }\n\n            const xCount = probe_count[0]\n            const yCount = probe_count[1]\n            const xMin = parseFloat(mesh_min[0])\n            const xMax = parseFloat(mesh_max[0])\n            const yMin = parseFloat(mesh_min[1])\n            const yMax = parseFloat(mesh_max[1])\n            const xStep = (xMax - xMin) / (xCount - 1)\n            const yStep = (yMax - yMin) / (yCount - 1)\n\n            const data: number[][] = []\n\n            for (let y = 0; y < yCount; y++) {\n                for (let x = 0; x < xCount; x++) {\n                    data.push([\n                        xMin + xStep * x,\n                        yMin + yStep * y,\n                        0\n                    ])\n                }\n            }\n\n            serie.data = data\n            serie.dataShape = [yCount, xCount]\n        }\n\n        return serie\n    }\n\n    get visualMapRange(): number[] {\n        if (!this.scaleVisualMap) return [-0.1, 0.1]\n\n        return this.heightmapLimit\n    }\n\n    get visualMapSeriesIndex(): number[] {\n        const output = []\n\n        if (this.showProbed) output.push(0)\n        else if (this.showMesh) output.push(1)\n\n        return output\n    }\n\n    get bedMeshMaxPoint() {\n        if (this.bed_mesh.profile_name === '') return { row: 0, col: 0, positionX: 0, positionY: 0, value: 0 }\n\n        const [ , max] = this.probedHeightmapLimit\n\n        let row = 0\n        let col = 0\n        this.bed_mesh.probed_matrix.forEach((rowPoints: number[], index: number) => {\n            if (Math.max(...rowPoints) === max) {\n                row = index + 1\n                col = rowPoints.findIndex((point: number) => point === max) + 1\n            }\n        })\n\n        const positionX = Math.round((this.bed_mesh.mesh_min[0] + (this.bed_mesh.mesh_max[0] - this.bed_mesh.mesh_min[0]) / this.bed_mesh.probed_matrix[0].length * (col - 1)) * 10) / 10\n        const positionY = Math.round((this.bed_mesh.mesh_min[1] + (this.bed_mesh.mesh_max[1] - this.bed_mesh.mesh_min[1]) / this.bed_mesh.probed_matrix.length * (row - 1)) * 10) / 10\n\n        return {\n            row,\n            col,\n            positionX,\n            positionY,\n            value: Math.round(max * 1000) / 1000\n        }\n    }\n\n    get bedMeshMinPoint() {\n        if (this.bed_mesh.profile_name === '') return { row: 0, col: 0, positionX: 0, positionY: 0, value: 0 }\n\n        const [min, ] = this.probedHeightmapLimit\n\n        let row = 0\n        let col = 0\n        this.bed_mesh.probed_matrix.forEach((rowPoints: number[], index: number) => {\n            if (Math.min(...rowPoints) === min) {\n                row = index + 1\n                col = rowPoints.findIndex((point: number) => point === min) + 1\n            }\n        })\n\n        const positionX = Math.round((this.bed_mesh.mesh_min[0] + (this.bed_mesh.mesh_max[0] - this.bed_mesh.mesh_min[0]) / this.bed_mesh.probed_matrix[0].length * (col - 1)) * 10) / 10\n        const positionY = Math.round((this.bed_mesh.mesh_min[1] + (this.bed_mesh.mesh_max[1] - this.bed_mesh.mesh_min[1]) / this.bed_mesh.probed_matrix.length * (row - 1)) * 10) / 10\n\n        return {\n            row,\n            col,\n            positionX,\n            positionY,\n            value: Math.round(min * 1000) / 1000\n        }\n    }\n\n    get meshLoaded() {\n        if(this.bed_mesh !== null) {\n            return this.bed_mesh.profile_name !== ''\n        } else {\n            return false\n        }\n    }\n\n    tooltipFormatter(data: any): string {\n        const outputArray: string[] = []\n        outputArray.push('<b>'+data.seriesName+'</b>')\n\n        Object.keys(data.encode).sort().forEach((axisName: string) => {\n            outputArray.push('<b>' + axisName.toUpperCase() + '</b>: '+data.data[data.encode[axisName][0]].toFixed(axisName === 'z' ? 3 : 1) + ' mm')\n        })\n\n        return outputArray.join('<br />')\n    }\n\n    loadProfile(name: string): void {\n        this.$store.dispatch('server/addEvent', { message: 'BED_MESH_PROFILE LOAD='+name, type: 'command' })\n        this.$socket.emit('printer.gcode.script', { script: 'BED_MESH_PROFILE LOAD='+name }, { loading: 'bedMeshLoad_'+name })\n    }\n\n    openRenameProfile(): void {\n        this.newName = this.bed_mesh?.profile_name ?? ''\n        this.oldName = this.bed_mesh.profile_name\n        this.renameDialog = true\n\n        setTimeout(() => {\n            this.$refs.inputDialogRenameHeightmapName?.focus()\n        }, 200)\n    }\n\n    renameProfile(): void {\n        this.renameDialog = false\n\n        this.$store.dispatch('server/addEvent', { message: 'BED_MESH_PROFILE SAVE='+this.newName, type: 'command' })\n        this.$store.dispatch('server/addEvent', { message: 'BED_MESH_PROFILE REMOVE='+this.oldName, type: 'command' })\n\n        this.$socket.emit('printer.gcode.script', { script: 'BED_MESH_PROFILE SAVE='+this.newName }, { loading: 'bedMeshRename' })\n        this.$socket.emit('printer.gcode.script', { script: 'BED_MESH_PROFILE REMOVE='+this.oldName }, { loading: 'bedMeshRename' })\n\n        this.newName = ''\n        this.oldName = ''\n    }\n\n    openRemoveProfile(name: string): void {\n        this.removeDialogProfile = name\n        this.removeDialog = true\n    }\n\n    removeProfile(): void {\n        this.removeDialog = false\n        this.$store.dispatch('server/addEvent', { message: 'BED_MESH_PROFILE REMOVE='+this.removeDialogProfile, type: 'command' })\n        this.$socket.emit('printer.gcode.script', { script: 'BED_MESH_PROFILE REMOVE='+this.removeDialogProfile }, {\n            action: 'printer/removeBedMeshProfile',\n            actionPayload: {name: this.removeDialogProfile},\n            loading: 'bedMeshRename_'+this.removeDialogProfile\n        })\n        this.removeDialogProfile = ''\n    }\n\n    homePrinter(): void {\n        this.$store.dispatch('server/addEvent', { message: 'G28', type: 'command' })\n        this.$socket.emit('printer.gcode.script', { script: 'G28' }, { loading: 'homeAll' })\n    }\n\n    clearBedMesh(): void {\n        this.$store.dispatch('server/addEvent', { message: 'BED_MESH_CLEAR', type: 'command' })\n        this.$socket.emit('printer.gcode.script', { script: 'BED_MESH_CLEAR' }, { loading: 'bedMeshClear' })\n    }\n\n    calibrateMesh(): void {\n        this.calibrateDialog = false\n        this.$store.dispatch('server/addEvent', { message: 'BED_MESH_CALIBRATE', type: 'command' })\n        this.$socket.emit('printer.gcode.script', { script: 'BED_MESH_CALIBRATE' }, { loading: 'bedMeshCalibrate' })\n    }\n\n    beforeDestroy(): void {\n        if (typeof window === 'undefined') return\n        if (this.chart) this.chart.dispose()\n    }\n}\n</script>"]}]}