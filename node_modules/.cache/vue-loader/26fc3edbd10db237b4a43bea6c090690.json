{"remainingRequest":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/components/panels/StatusPanel.vue?vue&type=style&index=0&id=3a68cb02&lang=scss&scoped=true&","dependencies":[{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/components/panels/StatusPanel.vue","mtime":1644874918000},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1645990066541},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1645990070825},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/postcss-loader/src/index.js","mtime":1645990067674},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/sass-loader/dist/cjs.js","mtime":1645990064431},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js","mtime":1645990064605},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1645990069130}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5zdGF0dXNQYW5lbC1iaWctdGh1bWJuYWlsIHsKICAgIHRyYW5zaXRpb246IGhlaWdodCAwLjI1cyBlYXNlLW91dDsKfQo="},{"version":3,"sources":["StatusPanel.vue"],"names":[],"mappings":";AACA;AACA;AACA","file":"StatusPanel.vue","sourceRoot":"src/components/panels","sourcesContent":["<style lang=\"scss\" scoped>\n    .statusPanel-big-thumbnail {\n        transition: height 0.25s ease-out;\n    }\n</style>\n\n<template>\n    <div>\n        <dependencies-panel></dependencies-panel>\n        <min-settings-panel></min-settings-panel>\n        <moonraker-state-panel></moonraker-state-panel>\n        <klippy-state-panel></klippy-state-panel>\n        <klipper-warnings-panel></klipper-warnings-panel>\n        <panel\n            v-if=\"klipperState === 'ready'\"\n            icon=\"mdi-information\"\n            :title=\"printerStateOutput\"\n            :collapsible=\"true\"\n            card-class=\"status-panel\"\n        >\n            <template v-slot:icon>\n                <v-progress-circular\n                    :rotate=\"-90\"\n                    :size=\"30\"\n                    :width=\"5\"\n                    :value=\"printPercent\"\n                    color=\"primary\"\n                    class=\"mr-3\"\n                    v-if=\"['paused', 'printing'].includes(printer_state)\"\n                >\n                </v-progress-circular>\n            </template>\n            <template v-slot:buttons >\n                <v-btn\n                    v-for=\"button in filteredToolbarButtons\"\n                    v-bind:key=\"button.loadingName\"\n                    :color=\"button.color\"\n                    @click=\"button.click\"\n                    :loading=\"loadings.includes(button.loadingName)\"\n                    icon\n                    tile\n                >\n                    <v-tooltip top>\n                        <template v-slot:activator=\"{ on, attrs }\">\n                            <v-icon v-bind=\"attrs\" v-on=\"on\">{{ button.icon }}</v-icon>\n                        </template>\n                        <span>{{ button.text }}</span>\n                    </v-tooltip>\n                </v-btn>\n            </template>\n            <v-card-text class=\"px-0 py-0 content\">\n                <template v-if=\"boolBigThumbnail\">\n                    <v-img\n                        :src=\"thumbnailBig\"\n                        tabindex=\"-1\"\n                        class=\"d-flex align-end statusPanel-big-thumbnail\"\n                        ref=\"bigThumbnail\"\n                        height=\"200\"\n                        @focus=\"focusBigThumbnail\"\n                        @blur=\"blurBigThumbnail\"\n                    >\n                        <v-card-title class=\"white--text py-2 px-2\" style=\"background-color: rgba(0,0,0,0.3); backdrop-filter: blur(3px);\">\n                            <v-row>\n                                <v-col style=\"width: 100px\">\n                                    <span class=\"subtitle-2 text-truncate px-0 text--disabled d-block\"><v-icon small class=\"mr-2\">mdi-file-outline</v-icon>{{ current_filename }}</span>\n                                </v-col>\n                            </v-row>\n                        </v-card-title>\n                    </v-img>\n                </template>\n                <status-panel-exclude-object\n                    :show-dialog.sync=\"boolShowObjects\"\n                    @update:showDialog=\"updateShowDialog\"\n                ></status-panel-exclude-object>\n                <template v-if=\"display_message || print_stats_message\">\n                    <v-container>\n                        <v-row>\n                            <v-col class=\"py-2\">\n                                <span class=\"subtitle-2 d-block px-0 text--disabled\"><v-icon class=\"mr-2\" small>mdi-message-processing-outline</v-icon>{{ print_stats_message ? print_stats_message : display_message }}</span>\n                            </v-col>\n                            <v-col class=\"col-auto py-2\">\n                                <v-icon class=\"text--disabled cursor-pointer\" @click=\"clearDisplayMessage\" small>mdi-close-circle</v-icon>\n                            </v-col>\n                        </v-row>\n                    </v-container>\n                    <v-divider class=\"mt-0 mb-0\" ></v-divider>\n                </template>\n                <template v-if=\"current_filename && !boolBigThumbnail\">\n                    <v-container>\n                        <v-row>\n                            <v-col :class=\"thumbnailSmall ? 'py-3' : 'py-2'\" :style=\"(thumbnailSmall ? 'width: calc(100% - 40px);' : '')\">\n                                <span class=\"subtitle-2 text-truncate d-block px-0 text--disabled\"><v-icon small class=\"mr-2\">mdi-file-outline</v-icon>{{ current_filename }}</span>\n                            </v-col>\n                            <v-col class=\"pa-2 pl-0 col-auto\" v-if=\"thumbnailSmall\">\n                                <template v-if=\"thumbnailSmall && thumbnailBig\">\n                                    <v-tooltip top content-class=\"tooltip__content-opacity1\">\n                                        <template v-slot:activator=\"{ on, attrs }\">\n                                            <vue-load-image class=\"d-flex\">\n                                                <img slot=\"image\" :src=\"thumbnailSmall\" width=\"32\" height=\"32\" v-bind=\"attrs\" v-on=\"on\" />\n                                                <v-progress-circular slot=\"preloader\" indeterminate color=\"primary\"></v-progress-circular>\n                                                <v-icon slot=\"error\">mdi-file</v-icon>\n                                            </vue-load-image>\n                                        </template>\n                                        <span><img :src=\"thumbnailBig\" width=\"250\" /></span>\n                                    </v-tooltip>\n                                </template>\n                                <template v-else-if=\"thumbnailSmall\">\n                                    <vue-load-image>\n                                        <img slot=\"image\" :src=\"thumbnailSmall\" width=\"32\" height=\"32\" />\n                                        <v-progress-circular slot=\"preloader\" indeterminate color=\"primary\"></v-progress-circular>\n                                        <v-icon slot=\"error\">mdi-file</v-icon>\n                                    </vue-load-image>\n                                </template>\n                            </v-col>\n                        </v-row>\n                    </v-container>\n                    <v-divider class=\"mt-0 mb-0\" ></v-divider>\n                </template>\n                <v-container class=\"py-0\">\n                    <v-row :class=\"'text-center '+(!['printing', 'paused', 'error', 'complete', 'cancelled'].includes(printer_state) ? 'pt-5 pb-2 mb-0' : 'py-5')\" align=\"center\">\n                        <v-col class=\"col-3 pa-0\">\n                            <strong>{{ $t(\"Panels.StatusPanel.Position\") }}</strong><br />\n                            {{ coordinates }}\n                        </v-col>\n                        <v-col class=\"col-3 pa-0\">\n                            <strong>{{ $t(\"Panels.StatusPanel.X\") }}</strong><br />\n                            {{ positions.x }}\n                        </v-col>\n                        <v-col class=\"col-3 pa-0\">\n                            <strong>{{ $t(\"Panels.StatusPanel.Y\") }}</strong><br />\n                            {{ positions.y }}\n                        </v-col>\n                        <v-col class=\"col-3 pa-0\">\n                            <v-tooltip top>\n                                <template v-slot:activator=\"{ on, attrs }\">\n                                    <div v-bind=\"attrs\" v-on=\"on\" class=\"text-center\">\n                                        <strong>{{ $t(\"Panels.StatusPanel.Z\") }}</strong><br />\n                                        {{ positions.z }}\n                                    </div>\n                                </template>\n                                <span>G-Code: {{ positions.gcode_z }}mm</span>\n                            </v-tooltip>\n                        </v-col>\n                    </v-row>\n                </v-container>\n                <template v-if=\"['printing', 'paused', 'error', 'cancelled'].includes(printer_state)\">\n                    <v-divider class=\"my-0\"></v-divider>\n                    <v-container class=\"py-0\">\n                        <v-row class=\"text-center py-5\" align=\"center\">\n                            <v-col class=\"col-3 pa-0\">\n                                <template v-if=\"live_velocity !== null\">\n                                    <v-tooltip top>\n                                        <template v-slot:activator=\"{ on, attrs }\">\n                                            <div v-bind=\"attrs\" v-on=\"on\">\n                                                <strong>{{ $t(\"Panels.StatusPanel.Speed\") }}</strong><br />\n                                                <span class=\"text-no-wrap\">{{ live_velocity }} mm/s</span>\n                                            </div>\n                                        </template>\n                                        <span>{{ $t(\"Panels.StatusPanel.Requested\") }}: {{ requested_speed+\" mm/s\" }}</span>\n                                    </v-tooltip>\n                                </template>\n                                <template v-else>\n                                    <strong>{{ $t(\"Panels.StatusPanel.Speed\") }}</strong><br />\n                                    <span class=\"text-no-wrap\">{{ requested_speed }} mm/s</span>\n                                </template>\n                            </v-col>\n                            <v-col class=\"col-3 pa-0\">\n                                <v-tooltip top>\n                                    <template v-slot:activator=\"{ on, attrs }\">\n                                        <div v-bind=\"attrs\" v-on=\"on\">\n                                            <strong>{{ $t(\"Panels.StatusPanel.Flow\") }}</strong><br />\n                                            <span class=\"d-block text-center text-no-wrap\">{{ live_flow+\" mm&sup3;/s\" }}</span>\n                                        </div>\n                                    </template>\n                                    <span>{{ $t(\"Panels.StatusPanel.Max\") }}: {{ maxFlow ? maxFlow+\" mm&sup3;/s\" : \"--\" }}</span>\n                                </v-tooltip>\n                            </v-col>\n                            <v-col class=\"col-3 pa-0\">\n                                <v-tooltip top>\n                                    <template v-slot:activator=\"{ on, attrs }\">\n                                        <div v-bind=\"attrs\" v-on=\"on\">\n                                            <strong>{{ $t(\"Panels.StatusPanel.Filament\") }}</strong><br />\n                                            <span class=\"d-block text-center text-no-wrap\">{{ filament_used >= 1000 ? (filament_used / 1000).toFixed(2)+\" m\" : filament_used.toFixed(2)+\" mm\" }}</span>\n                                        </div>\n                                    </template>\n                                    <span v-if=\"'filament_total' in current_file\">{{ (filament_used / 1000).toFixed(2) }} / {{ (current_file.filament_total / 1000).toFixed(2) }} m = {{ ( 100 / current_file.filament_total * filament_used).toFixed(0) }} % </span>\n                                </v-tooltip>\n                            </v-col>\n                            <v-col class=\"col-3 pa-0 text-center\">\n                                <v-tooltip top>\n                                    <template v-slot:activator=\"{ on, attrs }\">\n                                        <div v-bind=\"attrs\" v-on=\"on\" class=\"text-center\">\n                                            <strong>{{ $t(\"Panels.StatusPanel.Layer\") }}</strong><br />\n                                            <span class=\"text-no-wrap\">{{ current_layer }} of {{ max_layers }}</span>\n                                        </div>\n                                    </template>\n                                    <span v-if=\"'object_height' in current_file && current_file.object_height > 0\">{{ $t(\"Panels.StatusPanel.ObjectHeight\") }}: {{ current_file.object_height }} mm</span>\n                                </v-tooltip>\n                            </v-col>\n                        </v-row>\n                    </v-container>\n                    <v-divider class=\"my-0\"></v-divider>\n                    <v-container class=\"py-0\">\n                        <v-row class=\"text-center pt-5 pb-2 mb-0\" align=\"center\">\n                            <v-col class=\"col-3 pa-0\">\n                                <v-tooltip top>\n                                    <template v-slot:activator=\"{ on, attrs }\">\n                                        <div v-bind=\"attrs\" v-on=\"on\" class=\"text-center\">\n                                            <strong>{{ $t(\"Panels.StatusPanel.Estimate\") }}</strong><br />\n                                            <span class=\"text-no-wrap\">{{ estimated_time_avg ? formatTime(estimated_time_avg) : '--' }}</span>\n                                        </div>\n                                    </template>\n                                    <div class=\"text-right\">\n                                        {{ $t(\"Panels.StatusPanel.File\") }}: {{ estimated_time_file ? formatTime(estimated_time_file) : '--' }}<br />\n                                        {{ $t(\"Panels.StatusPanel.Filament\") }}: {{ estimated_time_filament ? formatTime(estimated_time_filament) : '--' }}\n                                    </div>\n                                </v-tooltip>\n                            </v-col>\n                            <v-col class=\"col-3 pa-0\">\n                                <strong>{{ $t(\"Panels.StatusPanel.Slicer\") }}</strong><br />\n                                <span class=\"text-no-wrap\">{{ estimated_time_slicer ? formatTime(estimated_time_slicer) : '--' }}</span>\n                            </v-col>\n                            <v-col class=\"col-3 pa-0\">\n                                <v-tooltip top>\n                                    <template v-slot:activator=\"{ on, attrs }\">\n                                        <div v-bind=\"attrs\" v-on=\"on\" class=\"text-center\">\n                                            <strong>{{ $t(\"Panels.StatusPanel.Total\") }}</strong><br />\n                                            <span class=\"text-no-wrap\">{{ print_time_total ? formatTime(print_time_total) : '--' }}</span>\n                                        </div>\n                                    </template>\n                                    <div class=\"text-right\">\n                                        {{ $t(\"Panels.StatusPanel.Print\") }}: {{ print_time ? formatTime(print_time) : '--' }}<br />\n                                        {{ $t(\"Panels.StatusPanel.Difference\") }}: {{ print_time && print_time_total ? formatTime(print_time_total - print_time) : '--' }}\n                                    </div>\n                                </v-tooltip>\n                            </v-col>\n                            <v-col class=\"col-3 pa-0\">\n                                <strong>{{ $t(\"Panels.StatusPanel.ETA\") }}</strong><br />\n                                <span class=\"text-no-wrap\">{{ eta ? formatDateTime(eta) : '--' }}</span>\n                            </v-col>\n                        </v-row>\n                    </v-container>\n                </template>\n                <template v-if=\"['complete'].includes(printer_state)\">\n                    <v-divider class=\"my-0\"></v-divider>\n                    <v-container class=\"py-0\">\n                        <v-row class=\"text-center pt-5 pb-2 mb-0\" align=\"center\">\n                            <v-col class=\"col-3 pa-0\">\n                                <strong>{{ $t(\"Panels.StatusPanel.Filament\") }}</strong><br />\n                                <span class=\"text-no-wrap\">{{ filament_used >= 1000 ? (filament_used / 1000).toFixed(2)+\" m\" : filament_used.toFixed(2)+\" mm\" }}</span>\n                            </v-col>\n                            <v-col class=\"col-3 pa-0\">\n                                <strong>{{ $t(\"Panels.StatusPanel.Slicer\") }}</strong><br />\n                                <span class=\"text-no-wrap\">{{ 'estimated_time' in current_file ? formatTime(current_file.estimated_time) : '--' }}</span>\n                            </v-col>\n                            <v-col class=\"col-3 pa-0\">\n                                <strong>{{ $t(\"Panels.StatusPanel.Print\") }}</strong><br />\n                                <span class=\"text-no-wrap\">{{ print_time ? formatTime(print_time) : '--' }}</span>\n                            </v-col>\n                            <v-col class=\"col-3 pa-0\">\n                                <strong>{{ $t(\"Panels.StatusPanel.Total\") }}</strong><br />\n                                <span class=\"text-no-wrap\">{{ print_time_total ? formatTime(print_time_total) : '--' }}</span>\n                            </v-col>\n                        </v-row>\n                    </v-container>\n                </template>\n            </v-card-text>\n        </panel>\n    </div>\n</template>\n\n<script lang=\"ts\">\nimport Component from 'vue-class-component'\nimport { Mixins, Watch } from 'vue-property-decorator'\nimport { thumbnailSmallMin, thumbnailSmallMax, thumbnailBigMin } from '@/store/variables'\nimport BaseMixin from '@/components/mixins/base'\nimport DependenciesPanel from '@/components/panels/DependenciesPanel.vue'\nimport MinSettingsPanel from '@/components/panels/MinSettingsPanel.vue'\nimport MoonrakerStatePanel from '@/components/panels/MoonrakerStatePanel.vue'\nimport KlippyStatePanel from '@/components/panels/KlippyStatePanel.vue'\nimport KlipperWarningsPanel from '@/components/panels/KlipperWarningsPanel.vue'\nimport StatusPanelExcludeObject from '@/components/panels/StatusPanelExcludeObject.vue'\nimport Panel from '@/components/ui/Panel.vue'\n\n@Component({\n    components: {\n        DependenciesPanel,\n        KlipperWarningsPanel,\n        KlippyStatePanel,\n        MinSettingsPanel,\n        MoonrakerStatePanel,\n        Panel,\n        StatusPanelExcludeObject,\n    }\n})\nexport default class StatusPanel extends Mixins(BaseMixin) {\n    maxFlow = 0\n    boolShowObjects = false\n\n    $refs!: {\n        bigThumbnail: any\n    }\n\n    get current_filename() {\n        return this.$store.state.printer.print_stats?.filename ?? ''\n    }\n\n    get display_message() {\n        return this.$store.state.printer.display_status?.message ?? ''\n    }\n\n    get print_stats_message() {\n        return this.$store.state.printer.print_stats?.message ?? ''\n    }\n\n    get positions() {\n        return this.$store.getters['printer/getPositions']\n    }\n\n    get coordinates() {\n        return this.positions.coordinates ? this.$t('Panels.StatusPanel.Absolute') : this.$t('Panels.StatusPanel.Relative')\n    }\n\n    get filament_used() {\n        return this.$store.state.printer.print_stats?.filament_used ?? 0\n    }\n\n    get current_file() {\n        return this.$store.state.printer.current_file ?? {}\n    }\n\n    get print_time() {\n        return this.$store.state.printer.print_stats?.print_duration ?? 0\n    }\n\n    get print_time_total() {\n        return this.$store.state.printer.print_stats?.total_duration ?? 0\n    }\n\n    get printPercent() {\n        return Math.round(this.$store.getters['printer/getPrintPercent'] * 100)\n    }\n\n    get printerStateOutput() {\n        if (this.printer_state !== '') {\n            const idle_timeout_state = this.$store.state.printer.idle_timeout?.state\n\n            if (\n                this.printer_state === 'standby' &&\n                idle_timeout_state === 'Printing'\n            ) return 'Busy'\n\n            if (this.printer_state !== '' && ['paused', 'printing'].includes(this.printer_state)) {\n                return this.printPercent+'% '+this.printer_state.charAt(0).toUpperCase() + this.printer_state.slice(1)\n            }\n\n            return this.printer_state.charAt(0).toUpperCase() + this.printer_state.slice(1)\n        }\n\n        return this.$t('Panels.StatusPanel.Unknown')\n    }\n\n    get toolbarButtons() {\n        return [\n            {\n                text: this.$t('Panels.StatusPanel.PausePrint'),\n                color: 'warning',\n                icon: 'mdi-pause',\n                loadingName: 'statusPrintPause',\n                status: ['printing'],\n                click: this.btnPauseJob\n            }, {\n                text: this.$t('Panels.StatusPanel.ResumePrint'),\n                color: 'success',\n                icon: 'mdi-play',\n                loadingName: 'statusPrintResume',\n                status: ['paused'],\n                click: this.btnResumeJob\n            }, {\n                text: this.$t('Panels.StatusPanel.CancelPrint'),\n                color: 'error',\n                icon: 'mdi-stop',\n                loadingName: 'statusPrintCancel',\n                status: this.$store.state.gui.uiSettings.displayCancelPrint ? ['paused', 'printing'] : ['paused'],\n                click: this.btnCancelJob\n            }, {\n                text: this.$t('Panels.StatusPanel.ExcludeObject.ExcludeObject'),\n                color: 'warning',\n                icon: 'mdi-selection-remove',\n                loadingName: '',\n                status: this.printing_objects.length ? ['paused', 'printing'] : [],\n                click: this.btnExcludeObject\n            }, {\n                text: this.$t('Panels.StatusPanel.ClearPrintStats'),\n                color: 'primary',\n                icon: 'mdi-broom',\n                loadingName: 'statusPrintClear',\n                status: ['error', 'complete', 'cancelled'],\n                click: this.btnClearJob\n            }, {\n                text: this.$t('Panels.StatusPanel.ReprintJob'),\n                color: 'primary',\n                icon: 'mdi-printer',\n                loadingName: 'statusPrintReprint',\n                status: ['error', 'complete', 'cancelled'],\n                click: this.btnReprintJob\n            }\n        ]\n    }\n\n    get filteredToolbarButtons() {\n        return this.toolbarButtons.filter((button) => {\n            return button.status.includes(this.printer_state)\n        })\n    }\n\n    get live_velocity() {\n        return Math.abs(this.$store.state.printer.motion_report?.live_velocity?.toFixed(0)) ?? null\n    }\n\n    get live_extruder_velocity() {\n        const live_extruder_velocity = this.$store.state.printer.motion_report?.live_extruder_velocity ?? null\n        if (live_extruder_velocity === null) return null\n\n        return live_extruder_velocity > 0 ? live_extruder_velocity : 0\n    }\n\n    get live_flow() {\n        if (this.live_extruder_velocity === null) return null\n\n        const filamentCrossSection = Math.pow(this.filament_diameter / 2, 2) * Math.PI\n        const currentFlow = filamentCrossSection * this.live_extruder_velocity\n\n        return currentFlow?.toFixed(1)\n    }\n\n    get requested_speed() {\n        const requested_speed = this.$store.state.printer.gcode_move?.speed ?? 0\n        const speed_factor = this.$store.state.printer.gcode_move?.speed_factor ?? 0\n        const max_velocity = this.$store.state.printer.toolhead?.max_velocity ?? 0\n\n        const speed = requested_speed / 60 * speed_factor\n        if (speed > max_velocity) return max_velocity\n\n        return speed.toFixed(0)\n    }\n\n    get max_layers() {\n        if (\n            'first_layer_height' in this.current_file &&\n            'layer_height' in this.current_file &&\n            'object_height' in this.current_file\n        ) {\n            const max = Math.ceil((this.current_file.object_height - this.current_file.first_layer_height) / this.current_file.layer_height + 1)\n            return max > 0 ? max : 0\n        }\n\n        return 0\n    }\n\n    get current_layer() {\n        if (\n            this.print_time > 0 &&\n            'first_layer_height' in this.current_file &&\n            'layer_height' in this.current_file\n        ) {\n            let current_layer = Math.ceil((this.positions.gcode_z - this.current_file.first_layer_height) / this.current_file.layer_height + 1)\n            current_layer = (current_layer <= this.max_layers) ? current_layer : this.max_layers\n\n            return current_layer > 0 ? current_layer : 0\n        }\n\n        return 0\n    }\n\n    get estimated_time_file() {\n        return this.$store.getters['printer/getEstimatedTimeFile']\n    }\n\n    get estimated_time_filament() {\n        return this.$store.getters['printer/getEstimatedTimeFilament']\n    }\n\n    get estimated_time_slicer() {\n        return this.$store.getters['printer/getEstimatedTimeSlicer']\n    }\n\n    get estimated_time_avg() {\n        return this.$store.getters['printer/getEstimatedTimeAvg']\n    }\n\n    get eta() {\n        return this.$store.getters['printer/getEstimatedTimeETA']\n    }\n\n    get filament_diameter() {\n        return this.$store.state.printer.configfile?.settings?.extruder?.filament_diameter ?? 1.75\n    }\n\n    get thumbnailSmall() {\n        if (\n            'thumbnails' in this.current_file &&\n            this.current_file.thumbnails.length\n        ) {\n            const thumbnail = this.current_file.thumbnails.find((thumb: any) =>\n                thumb.width >= thumbnailSmallMin && thumb.width <= thumbnailSmallMax &&\n                thumb.height >= thumbnailSmallMin && thumb.height <= thumbnailSmallMax\n            )\n\n            if (thumbnail && 'relative_path' in thumbnail) {\n                let relative_url = ''\n                if (this.current_file.filename.lastIndexOf('/') !== -1) {\n                    relative_url = this.current_file.filename.substr(0, this.current_file.filename.lastIndexOf('/')+1)\n                }\n\n                if (thumbnail && 'relative_path' in thumbnail) {\n                    return `${this.apiUrl}/server/files/gcodes/${encodeURI(relative_url+thumbnail.relative_path)}?timestamp=${this.current_file.modified}`\n                }\n            }\n        }\n\n        return ''\n    }\n\n    get thumbnailBig() {\n        if (\n            'thumbnails' in this.current_file &&\n            this.current_file.thumbnails.length\n        ) {\n            const thumbnail = this.current_file.thumbnails.find((thumb: any) => thumb.width >= thumbnailBigMin)\n\n            if (thumbnail && 'relative_path' in thumbnail) {\n                let relative_url = ''\n                if (this.current_file.filename.lastIndexOf('/') !== -1) {\n                    relative_url = this.current_file.filename.substr(0, this.current_file.filename.lastIndexOf('/')+1)\n                }\n\n                if (thumbnail && 'relative_path' in thumbnail) {\n                    return `${this.apiUrl}/server/files/gcodes/${encodeURI(relative_url+thumbnail.relative_path)}?timestamp=${this.current_file.modified}`\n                }\n            }\n        }\n\n        return ''\n    }\n\n    get thumbnailBigHeight() {\n        if (\n            'thumbnails' in this.current_file &&\n            this.current_file.thumbnails.length\n        ) {\n            const thumbnail = this.current_file.thumbnails.find((thumb: any) => thumb.width >= thumbnailBigMin)\n\n            if (thumbnail && 'height' in thumbnail) {\n                return thumbnail.height\n            }\n        }\n\n        return 200\n    }\n\n    get thumbnailBigWidth() {\n        if (\n            'thumbnails' in this.current_file &&\n            this.current_file.thumbnails.length\n        ) {\n            const thumbnail = this.current_file.thumbnails.find((thumb: any) => thumb.width >= thumbnailBigMin)\n\n            if (thumbnail && 'width' in thumbnail) {\n                return thumbnail.width\n            }\n        }\n\n        return 300\n    }\n\n    get boolBigThumbnail() {\n        const setting = this.$store.state.gui.uiSettings.boolBigThumbnail ?? true\n\n        return this.current_filename && setting && this.thumbnailBig\n    }\n\n    get printing_objects() {\n        return this.$store.state.printer.exclude_object?.objects ?? []\n    }\n\n    updateShowDialog(newVal: boolean) {\n        this.boolShowObjects = newVal\n    }\n\n    btnPauseJob() {\n        this.$socket.emit('printer.print.pause', { }, { loading: 'statusPrintPause' })\n    }\n\n    btnResumeJob() {\n        this.$socket.emit('printer.print.resume', { }, { loading: 'statusPrintResume' })\n    }\n\n    btnExcludeObject() {\n        this.boolShowObjects = true\n    }\n\n    btnCancelJob() {\n        this.$socket.emit('printer.print.cancel', { }, { loading: 'statusPrintCancel' })\n    }\n\n    btnClearJob() {\n        this.$socket.emit('printer.gcode.script', {script: 'SDCARD_RESET_FILE'}, { loading: 'statusPrintClear' })\n    }\n\n    btnReprintJob() {\n        this.$socket.emit('printer.print.start', { filename: this.current_filename }, { loading: 'statusPrintReprint' })\n    }\n\n    clearDisplayMessage() {\n        this.$socket.emit('printer.gcode.script', {script: 'M117'})\n    }\n\n    formatTime(seconds: number) {\n        let h = Math.floor(seconds / 3600)\n        seconds %= 3600\n        let m = ('0' + Math.floor(seconds / 60)).slice(-2)\n        let s = ('0' + (seconds % 60).toFixed(0)).slice(-2)\n\n        return h+':'+m+':'+s\n    }\n\n    formatDateTime(msec: number) {\n        const date = new Date(msec)\n        const h = date.getHours() >= 10 ? date.getHours() : '0'+date.getHours()\n        const m = date.getMinutes() >= 10 ? date.getMinutes() : '0'+date.getMinutes()\n\n        const diff = msec - new Date().getTime()\n        return h+':'+m+((diff > 60*60*24*1000) ? '+'+Math.round(diff / (60*60*24*1000)) : '')\n    }\n\n    @Watch('live_flow')\n    live_flowChanged(newVal: number) {\n        if (newVal && this.maxFlow < newVal) this.maxFlow = newVal\n    }\n\n    focusBigThumbnail() {\n        if (this.$refs.bigThumbnail) {\n            const clientWidth = this.$refs.bigThumbnail.$el.clientWidth\n            const thumbnailWidth = this.thumbnailBigWidth\n            const factor = clientWidth / thumbnailWidth\n\n            this.$refs.bigThumbnail.$el.style.height = (this.thumbnailBigHeight * factor).toFixed()+'px'\n        }\n    }\n\n    blurBigThumbnail() {\n        if (this.$refs.bigThumbnail) {\n            this.$refs.bigThumbnail.$el.style.height = '200px'\n        }\n    }\n\n    onResize() {\n        const isFocused = (document.activeElement === this.$refs.bigThumbnail?.$el)\n        if (isFocused) this.focusBigThumbnail()\n    }\n\n    created() {\n        window.addEventListener('resize', this.onResize)\n    }\n\n    destroyed() {\n        window.removeEventListener('resize', this.onResize)\n    }\n}\n</script>"]}]}