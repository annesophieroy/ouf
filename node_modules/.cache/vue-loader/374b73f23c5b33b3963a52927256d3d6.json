{"remainingRequest":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/components/gcodeviewer/Viewer.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/components/gcodeviewer/Viewer.vue","mtime":1644874918000},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js","mtime":1645990064605},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/thread-loader/dist/cjs.js","mtime":1645990064416},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/babel-loader/lib/index.js","mtime":1645990067759},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/ts-loader/index.js","mtime":1645990068168},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js","mtime":1645990064605},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1645990069130}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCmltcG9ydCB7Q29tcG9uZW50LCBNaXhpbnMsIFByb3AsIFJlZiwgV2F0Y2h9IGZyb20gJ3Z1ZS1wcm9wZXJ0eS1kZWNvcmF0b3InCmltcG9ydCBCYXNlTWl4aW4gZnJvbSAnLi4vbWl4aW5zL2Jhc2UnCi8vIEB0cy1pZ25vcmUKaW1wb3J0IEdDb2RlVmlld2VyIGZyb20gJ0BzaW5kYXJpdXMvZ2NvZGV2aWV3ZXInCmltcG9ydCBheGlvcyBmcm9tICdheGlvcycKaW1wb3J0IHtmb3JtYXRGaWxlc2l6ZX0gZnJvbSAnQC9wbHVnaW5zL2hlbHBlcnMnCmltcG9ydCBQYW5lbCBmcm9tICdAL2NvbXBvbmVudHMvdWkvUGFuZWwudnVlJwoKaW50ZXJmYWNlIGRvd25sb2FkU25hY2tiYXIgewogICAgc3RhdHVzOiBib29sZWFuCiAgICBmaWxlbmFtZTogc3RyaW5nCiAgICBwZXJjZW50OiBudW1iZXIKICAgIHNwZWVkOiBudW1iZXIKICAgIHRvdGFsOiBudW1iZXIKICAgIGNhbmNlbFRva2VuU291cmNlOiBhbnkKICAgIGxhc3RQcm9ncmVzczogewogICAgICAgIHRpbWU6IG51bWJlcgogICAgICAgIGxvYWRlZDogbnVtYmVyCiAgICB9Cn0KCmxldCB2aWV3ZXI6IGFueSA9IG51bGwKQENvbXBvbmVudCh7CiAgICBjb21wb25lbnRzOiB7UGFuZWx9Cn0pCmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZpZXdlciBleHRlbmRzIE1peGlucyhCYXNlTWl4aW4pIHsKICAgIGZvcm1hdEZpbGVzaXplID0gZm9ybWF0RmlsZXNpemUKCiAgICBwcml2YXRlIGlzQnVzeSA9IGZhbHNlCiAgICBwcml2YXRlIGxvYWRpbmcgPSBmYWxzZQogICAgcHJpdmF0ZSBsb2FkaW5nUGVyY2VudCA9IDAKCiAgICBwcml2YXRlIHRyYWNraW5nID0gZmFsc2UKICAgIHByaXZhdGUgbG9hZGVkRmlsZTogc3RyaW5nIHwgbnVsbCA9IG51bGwKCiAgICBwcml2YXRlIHJlbG9hZFJlcXVpcmVkID0gZmFsc2UKICAgIHByaXZhdGUgZmlsZVNpemUgPSAwCiAgICBwcml2YXRlIG1heFpTbGlkZXIgPSAxMDAwMDAKICAgIHByaXZhdGUgelNsaWRlciA9IHRoaXMubWF4WlNsaWRlcgogICAgcHJpdmF0ZSB6U2xpY2VySGVpZ2h0ID0gMTAwCiAgICBwcml2YXRlIHJlbmRlclF1YWxpdHkgPSB0aGlzLnJlbmRlclF1YWxpdGllc1syXQoKICAgIHByaXZhdGUgZG93bmxvYWRTbmFja2JhcjogZG93bmxvYWRTbmFja2JhciA9IHsKICAgICAgICBzdGF0dXM6IGZhbHNlLAogICAgICAgIGZpbGVuYW1lOiAnJywKICAgICAgICBwZXJjZW50OiAwLAogICAgICAgIHNwZWVkOiAwLAogICAgICAgIHRvdGFsOiAwLAogICAgICAgIGNhbmNlbFRva2VuU291cmNlOiB7fSwKICAgICAgICBsYXN0UHJvZ3Jlc3M6IHsKICAgICAgICAgICAgdGltZTogMCwKICAgICAgICAgICAgbG9hZGVkOiAwCiAgICAgICAgfQogICAgfQoKICAgIEBQcm9wKHt0eXBlOiBTdHJpbmcsIGRlZmF1bHQ6ICcnLCByZXF1aXJlZDogZmFsc2V9KSBmaWxlbmFtZSE6IHN0cmluZwogICAgQFJlZignZmlsZUlucHV0JykgZmlsZUlucHV0ITogSFRNTElucHV0RWxlbWVudAogICAgLy9AUmVmKCd2aWV3ZXJDYW52YXNDb250YWluZXInKSB2aWV3ZXJDYW52YXNDb250YWluZXIhOiBIVE1MRWxlbWVudAoKICAgICRyZWZzITogewogICAgICAgIHZpZXdlckNhbnZhc0NvbnRhaW5lcjogSFRNTEVsZW1lbnQKICAgIH0KCiAgICBnZXQgcmVuZGVyUXVhbGl0aWVzKCkgewogICAgICAgIHJldHVybiBbCiAgICAgICAgICAgIHsgbGFiZWw6IHRoaXMuJHQoJ0dDb2RlVmlld2VyLkxvdycpLCAgICB2YWx1ZTogMiB9LAogICAgICAgICAgICB7IGxhYmVsOiB0aGlzLiR0KCdHQ29kZVZpZXdlci5NZWRpdW0nKSwgdmFsdWU6IDMgfSwKICAgICAgICAgICAgeyBsYWJlbDogdGhpcy4kdCgnR0NvZGVWaWV3ZXIuSGlnaCcpLCAgIHZhbHVlOiA0IH0sCiAgICAgICAgICAgIHsgbGFiZWw6IHRoaXMuJHQoJ0dDb2RlVmlld2VyLlVsdHJhJyksICB2YWx1ZTogNSB9LAogICAgICAgICAgICB7IGxhYmVsOiB0aGlzLiR0KCdHQ29kZVZpZXdlci5NYXgnKSwgICAgdmFsdWU6IDYgfSwKICAgICAgICBdCiAgICB9CgogICAgYXN5bmMgbW91bnRlZCgpIHsKICAgICAgICB0aGlzLmxvYWRlZEZpbGUgPSB0aGlzLiRzdG9yZS5zdGF0ZS5nY29kZXZpZXdlcj8ubG9hZGVkRmlsZUJhY2t1cCA/PyBudWxsCiAgICAgICAgdmlld2VyID0gdGhpcy4kc3RvcmUuc3RhdGUuZ2NvZGV2aWV3ZXI/LnZpZXdlckJhY2t1cCA/PyBudWxsCgogICAgICAgIGF3YWl0IHRoaXMuaW5pdCgpCgogICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLmV2ZW50TGlzdGVuZXJSZXNpemUpCiAgICB9CgogICAgYmVmb3JlRGVzdHJveSgpIHsKICAgICAgICBpZiAodmlld2VyKSB7CiAgICAgICAgICAgIHZpZXdlci5nY29kZVByb2Nlc3Nvci5sb2FkaW5nUHJvZ3Jlc3NDYWxsYmFjayA9IG51bGwKICAgICAgICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2djb2Rldmlld2VyL3NldExvYWRlZEZpbGVCYWNrdXAnLCB0aGlzLmxvYWRlZEZpbGUpCiAgICAgICAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdnY29kZXZpZXdlci9zZXRWaWV3ZXJCYWNrdXAnLCB2aWV3ZXIpCiAgICAgICAgfQoKICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5ldmVudExpc3RlbmVyUmVzaXplKQogICAgfQoKICAgIGV2ZW50TGlzdGVuZXJSZXNpemUoKSB7CiAgICAgICAgdmlld2VyPy5yZXNpemUoKQogICAgfQoKICAgIGdldCBmaWxlUG9zaXRpb24oKSB7CiAgICAgICAgcmV0dXJuIHRoaXMucHJpbnRlcklzUHJpbnRpbmcgPyB0aGlzLiRzdG9yZS5zdGF0ZS5wcmludGVyLnZpcnR1YWxfc2RjYXJkLmZpbGVfcG9zaXRpb24gOiAwCiAgICB9CgogICAgZ2V0IHNkQ2FyZEZpbGVQYXRoKCkgewogICAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS5wcmludGVyLnByaW50X3N0YXRzPy5maWxlbmFtZSA/PyAnJwogICAgfQoKICAgIGdldCBjdXJyZW50UG9zaXRpb24oKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLnByaW50ZXIubW90aW9uX3JlcG9ydD8ubGl2ZV9wb3NpdGlvbiA/PyBbMCwgMCwgMCwgMF0KICAgIH0KCiAgICBnZXQgc2hvd1RyYWNraW5nQnV0dG9uKCkgewogICAgICAgIHJldHVybiB0aGlzLnByaW50ZXJJc1ByaW50aW5nICYmIHRoaXMuc2RDYXJkRmlsZVBhdGggPT09IHRoaXMubG9hZGVkRmlsZQogICAgfQoKICAgIGdldCBwcmludGluZ19vYmplY3RzKCkgewogICAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS5wcmludGVyLmV4Y2x1ZGVfb2JqZWN0Py5vYmplY3RzID8/IFtdCiAgICB9CgogICAgZ2V0IGV4Y2x1ZGVkX29iamVjdHMoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLnByaW50ZXIuZXhjbHVkZV9vYmplY3Q/LmV4Y2x1ZGVkX29iamVjdHMgPz8gW10KICAgIH0KCiAgICBnZXQgbm96emxlX2RpYW1ldGVyKCkgewogICAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS5wcmludGVyLmNvbmZpZ2ZpbGU/LnNldHRpbmdzPy5leHRydWRlcj8ubm96emxlX2RpYW1ldGVyID8/IDAuNAogICAgfQoKICAgIGFzeW5jIGluaXQoKSB7CiAgICAgICAgbGV0IGNhbnZhc0VsZW1lbnQgPSB0aGlzLiRzdG9yZS5zdGF0ZS5nY29kZXZpZXdlcj8uY2FudmFzQmFja3VwID8/IG51bGwKCiAgICAgICAgaWYgKGNhbnZhc0VsZW1lbnQgPT09IG51bGwpIHsKICAgICAgICAgICAgY2FudmFzRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpCiAgICAgICAgICAgIGNhbnZhc0VsZW1lbnQuY2xhc3NOYW1lID0gJ3ZpZXdlcicKICAgICAgICAgICAgdGhpcy4kcmVmcy52aWV3ZXJDYW52YXNDb250YWluZXIuYXBwZW5kQ2hpbGQoY2FudmFzRWxlbWVudCkKICAgICAgICAgICAgYXdhaXQgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2djb2Rldmlld2VyL3NldENhbnZhc0JhY2t1cCcsIGNhbnZhc0VsZW1lbnQpCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGhpcy4kcmVmcy52aWV3ZXJDYW52YXNDb250YWluZXIuYXBwZW5kQ2hpbGQoY2FudmFzRWxlbWVudCkKICAgICAgICAgICAgaWYgKHZpZXdlcj8uZ2NvZGVQcm9jZXNzb3IpIHsKICAgICAgICAgICAgICAgIHZpZXdlci5nY29kZVByb2Nlc3Nvci51cGRhdGVGaWxlUG9zaXRpb24odmlld2VyPy5maWxlU2l6ZSkKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKHZpZXdlciA9PT0gbnVsbCkgewogICAgICAgICAgICBhd2FpdCB0aGlzLnZpZXdlckluaXQoY2FudmFzRWxlbWVudCkKICAgICAgICB9CgogICAgICAgIHRoaXMucmVnaXN0ZXJQcm9ncmVzc0NhbGxiYWNrKCkKCiAgICAgICAgaWYgKHRoaXMuJHJvdXRlLnF1ZXJ5Py5maWxlbmFtZSAmJiB0aGlzLmxvYWRlZEZpbGUgIT09IHRoaXMuJHJvdXRlLnF1ZXJ5Py5maWxlbmFtZT8udG9TdHJpbmcoKSkgewogICAgICAgICAgICAvL1RPRE86IHRlc3Qgd2l0aG91dCBzbGVlcAogICAgICAgICAgICBhd2FpdCB0aGlzLnNsZWVwKDEwMDApIC8vR2l2ZSB0aGUgc3RvcmUgYSBjaGFuY2UgdG8gaW5pdGlhbGl6IGJlZm9yZSBsb2FkaW5nIHRoZSBmaWxlLgogICAgICAgICAgICBhd2FpdCB0aGlzLmxvYWRGaWxlKHRoaXMuJHJvdXRlLnF1ZXJ5LmZpbGVuYW1lLnRvU3RyaW5nKCkpCiAgICAgICAgfQogICAgfQoKICAgIHZpZXdlckluaXQoZWxlbWVudDogSFRNTENhbnZhc0VsZW1lbnQpIHsKICAgICAgICB2aWV3ZXIgPSBuZXcgR0NvZGVWaWV3ZXIoZWxlbWVudCkKICAgICAgICB2aWV3ZXIuaW5pdCgpCiAgICAgICAgdmlld2VyLnNldEJhY2tncm91bmRDb2xvcih0aGlzLmJhY2tncm91bmRDb2xvcikKICAgICAgICB2aWV3ZXIuYmVkLnNldEJlZENvbG9yKHRoaXMuZ3JpZENvbG9yKQogICAgICAgIHZpZXdlci5zZXRDdXJzb3JWaXNpYmxpdHkodGhpcy5zaG93Q3Vyc29yKQogICAgICAgIHZpZXdlci5zZXRaQ2xpcFBsYW5lKDEwMDAwMDAsIC0xMDAwMDAwKQogICAgICAgIHZpZXdlci5heGVzLnNob3codGhpcy5zaG93QXhlcykKICAgICAgICB2aWV3ZXIuYmVkLnNldERlbHRhKHRoaXMua2luZW1hdGljcy5pbmNsdWRlcygnZGVsdGEnKSkKCiAgICAgICAgaWYgKHRoaXMuYmVkTWF4U2l6ZSAhPT0gbnVsbCkgewogICAgICAgICAgICB2aWV3ZXIuYmVkLmJ1aWxkVm9sdW1lWyd4J10ubWF4ID0gdGhpcy5iZWRNYXhTaXplWzBdCiAgICAgICAgICAgIHZpZXdlci5iZWQuYnVpbGRWb2x1bWVbJ3knXS5tYXggPSB0aGlzLmJlZE1heFNpemVbMV0KICAgICAgICAgICAgdmlld2VyLmJlZC5idWlsZFZvbHVtZVsneiddLm1heCA9IHRoaXMuYmVkTWF4U2l6ZVsyXQogICAgICAgIH0KCiAgICAgICAgaWYgKHRoaXMuYmVkTWluU2l6ZSAhPT0gbnVsbCkgewogICAgICAgICAgICB2aWV3ZXIuYmVkLmJ1aWxkVm9sdW1lWyd4J10ubWluID0gdGhpcy5iZWRNaW5TaXplWzBdCiAgICAgICAgICAgIHZpZXdlci5iZWQuYnVpbGRWb2x1bWVbJ3knXS5taW4gPSB0aGlzLmJlZE1pblNpemVbMV0KICAgICAgICAgICAgdmlld2VyLmJlZC5idWlsZFZvbHVtZVsneiddLm1pbiA9IHRoaXMuYmVkTWluU2l6ZVsyXQogICAgICAgIH0KCiAgICAgICAgdmlld2VyLmdjb2RlUHJvY2Vzc29yLnVzZUhpZ2hRdWFsaXR5RXh0cnVzaW9uKHRoaXMuaGRSZW5kZXJpbmcpCiAgICAgICAgdmlld2VyLmdjb2RlUHJvY2Vzc29yLnVwZGF0ZUZvcmNlV2lyZU1vZGUodGhpcy5mb3JjZUxpbmVSZW5kZXJpbmcpCiAgICAgICAgdmlld2VyLmdjb2RlUHJvY2Vzc29yLnNldEFscGhhKHRoaXMudHJhbnNwYXJlbmN5KQogICAgICAgIHZpZXdlci5nY29kZVByb2Nlc3Nvci5zZXRWb3hlbE1vZGUodGhpcy52b3hlbE1vZGUpCiAgICAgICAgdmlld2VyLmdjb2RlUHJvY2Vzc29yLnZveGVsV2lkdGggPSB0aGlzLnZveGVsV2lkdGgKICAgICAgICB2aWV3ZXIuZ2NvZGVQcm9jZXNzb3Iudm94ZWxIZWlnaHQgPSB0aGlzLnZveGVsSGVpZ2h0CiAgICAgICAgdmlld2VyLmdjb2RlUHJvY2Vzc29yLnVzZVNwZWN1bGFyQ29sb3IodGhpcy5zcGVjdWxhckxpZ2h0aW5nKQogICAgICAgIHZpZXdlci5nY29kZVByb2Nlc3Nvci5zZXRMaXZlVHJhY2tpbmcoZmFsc2UpCgogICAgICAgIHRoaXMubG9hZFRvb2xDb2xvcnModGhpcy5leHRydWRlckNvbG9ycykKCiAgICAgICAgaWYgKHZpZXdlci5sYXN0TG9hZEZhaWxlZCgpKSB7CiAgICAgICAgICAgIHRoaXMucmVuZGVyUXVhbGl0eSA9IHRoaXMucmVuZGVyUXVhbGl0aWVzWzBdCiAgICAgICAgICAgIHZpZXdlci51cGRhdGVSZW5kZXJRdWFsaXR5KDEpCiAgICAgICAgICAgIHZpZXdlci5jbGVhckxvYWRGbGFnKCkKICAgICAgICB9CiAgICB9CgogICAgcmVnaXN0ZXJQcm9ncmVzc0NhbGxiYWNrKCkgewogICAgICAgIGlmICh2aWV3ZXIpIHsKICAgICAgICAgICAgdmlld2VyLmdjb2RlUHJvY2Vzc29yLmxvYWRpbmdQcm9ncmVzc0NhbGxiYWNrID0gKHByb2dyZXNzOiBudW1iZXIpID0+IHsKICAgICAgICAgICAgICAgIHRoaXMubG9hZGluZ1BlcmNlbnQgPSBNYXRoLmNlaWwocHJvZ3Jlc3MgKiAxMDApCiAgICAgICAgICAgICAgICB0aGlzLmxvYWRpbmcgPSB0aGlzLmxvYWRpbmdQZXJjZW50IDw9IDk5CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICAKICAgIGFzeW5jIGNhbmNlbFJlbmRlcmluZygpIHsKICAgICAgICBpZiAodmlld2VyKSB7CiAgICAgICAgICAgIHZpZXdlci5nY29kZVByb2Nlc3Nvci5jYW5jZWxMb2FkID0gdHJ1ZQogICAgICAgICAgICBhd2FpdCB0aGlzLnNsZWVwKDEwMDApCiAgICAgICAgfQogICAgfQoKICAgIGNsZWFyTG9hZGVkRmlsZSgpIHsKICAgICAgICBpZiAodmlld2VyKSB7CiAgICAgICAgICAgIHZpZXdlci5jbGVhclNjZW5lKHRydWUpCiAgICAgICAgICAgIHRoaXMubG9hZGVkRmlsZSA9IG51bGwKICAgICAgICAgICAgdGhpcy50cmFja2luZyA9IGZhbHNlCiAgICAgICAgfQogICAgfQoKICAgIGNob29zZUZpbGUoKSB7CiAgICAgICAgaWYgKCF0aGlzLmlzQnVzeSkgewogICAgICAgICAgICB0aGlzLmZpbGVJbnB1dC5jbGljaygpCiAgICAgICAgfQogICAgfQoKICAgIGZpbmlzaExvYWQoKSB7CiAgICAgICAgdGhpcy5tYXhaU2xpZGVyID0gdmlld2VyLmdldE1heEhlaWdodCgpICsgMQogICAgICAgIHRoaXMuelNsaWRlciA9IHRoaXMubWF4WlNsaWRlcgogICAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlCiAgICAgICAgdmlld2VyLnNldEN1cnNvclZpc2libGl0eSh0aGlzLnNob3dDdXJzb3IpCgogICAgICAgIGlmICh0aGlzLmxvYWRlZEZpbGUgPT09IHRoaXMuc2RDYXJkRmlsZVBhdGggJiYgdGhpcy5wcmludGluZ19vYmplY3RzLmxlbmd0aCkgewogICAgICAgICAgICBsZXQgb2JqZWN0czogYW55ID0gW10KCiAgICAgICAgICAgIHRoaXMucHJpbnRpbmdfb2JqZWN0cy5mb3JFYWNoKChvYmplY3Q6IGFueSkgPT4gewogICAgICAgICAgICAgICAgY29uc3QgeFZhbHVlcyA9IG9iamVjdC5wb2x5Z29uLm1hcCgocG9pbnQ6IG51bWJlcltdKSA9PiBwb2ludFswXSkKICAgICAgICAgICAgICAgIGNvbnN0IHlWYWx1ZXMgPSBvYmplY3QucG9seWdvbi5tYXAoKHBvaW50OiBudW1iZXJbXSkgPT4gcG9pbnRbMV0pCgogICAgICAgICAgICAgICAgb2JqZWN0cy5wdXNoKHsKICAgICAgICAgICAgICAgICAgICBjYW5jZWxsZWQ6IHRoaXMuZXhjbHVkZWRfb2JqZWN0cy5pbmNsdWRlcyhvYmplY3QubmFtZSksCiAgICAgICAgICAgICAgICAgICAgbmFtZTogb2JqZWN0Lm5hbWUsCiAgICAgICAgICAgICAgICAgICAgeDogW01hdGgubWluKC4uLnhWYWx1ZXMpLCBNYXRoLm1heCguLi54VmFsdWVzKV0sCiAgICAgICAgICAgICAgICAgICAgeTogW01hdGgubWluKC4uLnlWYWx1ZXMpLCBNYXRoLm1heCguLi55VmFsdWVzKV0sCiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICB9KQoKICAgICAgICAgICAgdmlld2VyLmJ1aWxkT2JqZWN0cy5sb2FkT2JqZWN0Qm91bmRhcmllcyhvYmplY3RzKQogICAgICAgICAgICB2aWV3ZXIuYnVpbGRPYmplY3RzLnNob3dPYmplY3RTZWxlY3Rpb24odGhpcy5zaG93T2JqZWN0U2VsZWN0aW9uKQogICAgICAgIH0KCiAgICAgICAgdmlld2VyLmdjb2RlUHJvY2Vzc29yLnVwZGF0ZUZpbGVQb3NpdGlvbih2aWV3ZXIuZmlsZVNpemUpCiAgICB9CgogICAgYXN5bmMgZmlsZVNlbGVjdGVkKGU6IGFueSkgewogICAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCkKICAgICAgICByZWFkZXIuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGFzeW5jIChldmVudCkgPT4gewogICAgICAgICAgICBpZiAoIWV2ZW50IHx8ICFldmVudC50YXJnZXQpIHJldHVybgogICAgICAgICAgICBjb25zdCBibG9iID0gZXZlbnQudGFyZ2V0LnJlc3VsdAogICAgICAgICAgICBpZiAodHlwZW9mIGJsb2IgPT09ICdzdHJpbmcnKSB7CiAgICAgICAgICAgICAgICB0aGlzLmZpbGVTaXplID0gYmxvYi5sZW5ndGgKICAgICAgICAgICAgICAgIC8vIERvIHNvbWV0aGluZyB3aXRoIHJlc3VsdAogICAgICAgICAgICAgICAgYXdhaXQgdmlld2VyLnByb2Nlc3NGaWxlKGJsb2IpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgdGhpcy5maW5pc2hMb2FkKCkKICAgICAgICB9KQogICAgICAgIHRoaXMudHJhY2tpbmcgPSBmYWxzZQogICAgICAgIGlmIChlLnRhcmdldC5maWxlcz8ubGVuZ3RoKSB7CiAgICAgICAgICAgIHRoaXMubG9hZGVkRmlsZSA9IGU/LnRhcmdldD8uZmlsZXNbMF0ubmFtZQogICAgICAgICAgICByZWFkZXIucmVhZEFzVGV4dChlLnRhcmdldC5maWxlc1swXSkKICAgICAgICB9CiAgICAgICAgZS50YXJnZXQudmFsdWUgPSAnJwogICAgfQoKICAgIGFzeW5jIGxvYWRGaWxlKGZpbGVuYW1lOiBzdHJpbmcpIHsKICAgICAgICB0aGlzLmRvd25sb2FkU25hY2tiYXIuc3RhdHVzID0gdHJ1ZQogICAgICAgIHRoaXMuZG93bmxvYWRTbmFja2Jhci5zcGVlZCA9IDAKICAgICAgICB0aGlzLmRvd25sb2FkU25hY2tiYXIubGFzdFByb2dyZXNzLnRpbWUgPSAwCiAgICAgICAgdGhpcy5kb3dubG9hZFNuYWNrYmFyLmZpbGVuYW1lID0gZmlsZW5hbWUuc3RhcnRzV2l0aCgnZ2NvZGVzLycpID8gZmlsZW5hbWUuc2xpY2UoNykgOiBmaWxlbmFtZQogICAgICAgIGNvbnN0IENhbmNlbFRva2VuID0gYXhpb3MuQ2FuY2VsVG9rZW4KICAgICAgICB0aGlzLmRvd25sb2FkU25hY2tiYXIuY2FuY2VsVG9rZW5Tb3VyY2UgPSBDYW5jZWxUb2tlbi5zb3VyY2UoKQogICAgICAgIGNvbnN0IHRleHQgPSBhd2FpdCBheGlvcy5nZXQodGhpcy5hcGlVcmwgKyAnL3NlcnZlci9maWxlcy8nICsgZW5jb2RlVVJJKGZpbGVuYW1lKSwgewogICAgICAgICAgICBjYW5jZWxUb2tlbjogdGhpcy5kb3dubG9hZFNuYWNrYmFyLmNhbmNlbFRva2VuU291cmNlLnRva2VuLAogICAgICAgICAgICByZXNwb25zZVR5cGU6ICdibG9iJywKICAgICAgICAgICAgb25Eb3dubG9hZFByb2dyZXNzOiAocHJvZ3Jlc3NFdmVudCkgPT4gewogICAgICAgICAgICAgICAgdGhpcy5kb3dubG9hZFNuYWNrYmFyLnBlcmNlbnQgPSAocHJvZ3Jlc3NFdmVudC5sb2FkZWQgKiAxMDApIC8gcHJvZ3Jlc3NFdmVudC50b3RhbAogICAgICAgICAgICAgICAgaWYgKHRoaXMuZG93bmxvYWRTbmFja2Jhci5sYXN0UHJvZ3Jlc3MudGltZSkgewogICAgICAgICAgICAgICAgICAgIGNvbnN0IHRpbWUgPSBwcm9ncmVzc0V2ZW50LnRpbWVTdGFtcCAtIHRoaXMuZG93bmxvYWRTbmFja2Jhci5sYXN0UHJvZ3Jlc3MudGltZQogICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBwcm9ncmVzc0V2ZW50LmxvYWRlZCAtIHRoaXMuZG93bmxvYWRTbmFja2Jhci5sYXN0UHJvZ3Jlc3MubG9hZGVkCgogICAgICAgICAgICAgICAgICAgIGlmICh0aW1lID4gMTAwMCB8fCB0aGlzLmRvd25sb2FkU25hY2tiYXIuc3BlZWQgPT09IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kb3dubG9hZFNuYWNrYmFyLnNwZWVkID0gZGF0YSAvICh0aW1lIC8gMTAwMCkKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kb3dubG9hZFNuYWNrYmFyLmxhc3RQcm9ncmVzcy50aW1lID0gcHJvZ3Jlc3NFdmVudC50aW1lU3RhbXAKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kb3dubG9hZFNuYWNrYmFyLmxhc3RQcm9ncmVzcy5sb2FkZWQgPSBwcm9ncmVzc0V2ZW50LmxvYWRlZAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gZWxzZSB0aGlzLmRvd25sb2FkU25hY2tiYXIubGFzdFByb2dyZXNzLnRpbWUgPSBwcm9ncmVzc0V2ZW50LnRpbWVTdGFtcAoKICAgICAgICAgICAgICAgIHRoaXMuZG93bmxvYWRTbmFja2Jhci50b3RhbCA9IHByb2dyZXNzRXZlbnQudG90YWwKICAgICAgICAgICAgfQogICAgICAgIH0pLnRoZW4ocmVzID0+IHJlcy5kYXRhLnRleHQoKSkuY2F0Y2goKGUpID0+IHsKICAgICAgICAgICAgd2luZG93LmNvbnNvbGUuZXJyb3IoZS5tZXNzYWdlKQogICAgICAgIH0pCiAgICAgICAgdGhpcy5kb3dubG9hZFNuYWNrYmFyLnN0YXR1cyA9IGZhbHNlCiAgICAgICAgdGhpcy5sb2FkZWRGaWxlID0gdGhpcy5kb3dubG9hZFNuYWNrYmFyLmZpbGVuYW1lCgogICAgICAgIHZpZXdlci51cGRhdGVSZW5kZXJRdWFsaXR5KHRoaXMucmVuZGVyUXVhbGl0eS52YWx1ZSkKICAgICAgICBhd2FpdCB2aWV3ZXIucHJvY2Vzc0ZpbGUodGV4dCkKICAgICAgICB0aGlzLmxvYWRpbmdQZXJjZW50ID0gMTAwCiAgICAgICAgdGhpcy5maW5pc2hMb2FkKCkKICAgIH0KCiAgICBjYW5jZWxEb3dubG9hZCgpIHsKICAgICAgICB0aGlzLmRvd25sb2FkU25hY2tiYXIuY2FuY2VsVG9rZW5Tb3VyY2UuY2FuY2VsKCdVc2VyIGNhbmNlbGVkIGRvd25sb2FkIGdjb2RlIGZpbGUnKQogICAgfQoKICAgIGFzeW5jIHNsZWVwKG1zOiBudW1iZXIpIHsKICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dChyZXNvbHZlLCBtcykpCiAgICB9CgogICAgYXN5bmMgbG9hZEN1cnJlbnRGaWxlKCkgewogICAgICAgIGF3YWl0IHRoaXMubG9hZEZpbGUoJ2djb2Rlcy8nICsgdGhpcy5zZENhcmRGaWxlUGF0aCkKICAgICAgICB0aGlzLmxvYWRlZEZpbGUgPSB0aGlzLnNkQ2FyZEZpbGVQYXRoCiAgICB9CgogICAgYXN5bmMgcmVsb2FkVmlld2VyKCkgewogICAgICAgIGlmICh0aGlzLmxvYWRpbmcpIHsKICAgICAgICAgICAgLy9pZiB3ZSBhcmUgYWN0aXZlbHkgbG9hZGluZyBzaWduYWwgYSBjYW5jZWwgYW5kIHdhaXQgYSBzZWNvbmQKICAgICAgICAgICAgLy9UaGlzIHByZXZlbnRzIGEgdGltaW5nIGlzc3VlIHRoYXQgY2FuIGhhcHBlbiBpZiBhIHVzZXIgY2hhbmdlcyBzZXR0aW5ncyBhbmQgdGhlbgogICAgICAgICAgICAvL2hpdHMgdGhlIHJlbG9hZCB2aWV3ZXIgYnV0dG9uLiBXaWxsIGV2ZW50dWFsbHkgbW92ZSB0aGlzIHRvIGFwaQogICAgICAgICAgICB2aWV3ZXIuZ2NvZGVQcm9jZXNzb3IuY2FuY2VsTG9hZCA9IHRydWUKICAgICAgICAgICAgYXdhaXQgdGhpcy5zbGVlcCgxMDAwKQogICAgICAgIH0KCiAgICAgICAgdGhpcy5yZWxvYWRSZXF1aXJlZCA9IGZhbHNlCiAgICAgICAgdGhpcy5sb2FkaW5nID0gdHJ1ZQogICAgICAgIHRoaXMubG9hZGluZ1BlcmNlbnQgPSAwCiAgICAgICAgYXdhaXQgdmlld2VyLnJlbG9hZCgpCiAgICAgICAgdGhpcy5sb2FkaW5nUGVyY2VudCA9IDEwMAogICAgICAgIHRoaXMuZmluaXNoTG9hZCgpCiAgICB9CgogICAgcmVzZXRDYW1lcmEoKSB7CiAgICAgICAgdmlld2VyLnJlc2V0Q2FtZXJhKCkKICAgIH0KCiAgICBzZXRSZWxvYWRSZXF1aXJlZEZsYWcoKSB7CiAgICAgICAgaWYgKHRoaXMubG9hZGVkRmlsZSAmJiB0aGlzLmxvYWRlZEZpbGUgIT0gJycpIHsKICAgICAgICAgICAgdGhpcy5yZWxvYWRSZXF1aXJlZCA9IHRydWUKICAgICAgICB9CiAgICB9CgogICAgQFdhdGNoKCdyZW5kZXJRdWFsaXR5JykKICAgIGFzeW5jIHJlbmRlclF1YWxpdHlDaGFuZ2VkKG5ld1ZhbDogbnVtYmVyKSB7CiAgICAgICAgaWYgKHZpZXdlciAmJiB2aWV3ZXIucmVuZGVyUXVhbGl0eSAhPT0gbmV3VmFsKSB7CiAgICAgICAgICAgIHZpZXdlci51cGRhdGVSZW5kZXJRdWFsaXR5KG5ld1ZhbCkKICAgICAgICAgICAgYXdhaXQgdGhpcy5yZWxvYWRWaWV3ZXIoKQogICAgICAgIH0KICAgIH0KCiAgICBAV2F0Y2goJ2N1cnJlbnRQb3NpdGlvbicpCiAgICBjdXJyZW50UG9zaXRpb25DaGFuZ2VkKG5ld1ZhbDogbnVtYmVyW10pIHsKICAgICAgICBpZiAodmlld2VyKSB7CiAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uID0gWwogICAgICAgICAgICAgICAge2F4ZXM6ICdYJywgcG9zaXRpb246IG5ld1ZhbFswXX0sCiAgICAgICAgICAgICAgICB7YXhlczogJ1knLCBwb3NpdGlvbjogbmV3VmFsWzFdfSwKICAgICAgICAgICAgICAgIHtheGVzOiAnWicsIHBvc2l0aW9uOiBuZXdWYWxbMl19LAogICAgICAgICAgICBdCgogICAgICAgICAgICB2aWV3ZXIudXBkYXRlVG9vbFBvc2l0aW9uKHBvc2l0aW9uKQogICAgICAgIH0KICAgIH0KCiAgICBAV2F0Y2goJ2ZpbGVQb3NpdGlvbicpCiAgICBmaWxlUG9zaXRpb25DaGFuZ2VkKG5ld1ZhbDogbnVtYmVyKSB7CiAgICAgICAgaWYgKCF2aWV3ZXIpIHJldHVybgoKICAgICAgICBjb25zdCBvZmZzZXQgPSAzNTAKICAgICAgICBpZiAobmV3VmFsID4gMCAmJiB0aGlzLnByaW50ZXJJc1ByaW50aW5nICYmIHRoaXMudHJhY2tpbmcgJiYgbmV3VmFsID4gb2Zmc2V0KSB7CiAgICAgICAgICAgIHZpZXdlci5nY29kZVByb2Nlc3Nvci51cGRhdGVGaWxlUG9zaXRpb24obmV3VmFsIC0gb2Zmc2V0KQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHZpZXdlci5nY29kZVByb2Nlc3Nvci51cGRhdGVGaWxlUG9zaXRpb24odmlld2VyLmZpbGVTaXplKQogICAgICAgIH0KICAgIH0KCiAgICBAV2F0Y2goJ3RyYWNraW5nJykKICAgIGFzeW5jIHRyYWNraW5nQ2hhbmdlZChuZXdWYWw6IGJvb2xlYW4pIHsKICAgICAgICBpZiAoIXZpZXdlcikgcmV0dXJuCiAgICAgICAgaWYgKG5ld1ZhbCkgewogICAgICAgICAgICAvL1NldCB6U2xpZGVyIHRvIG1heCB2YWx1ZQogICAgICAgICAgICB0aGlzLnpTbGlkZXIgPSB0aGlzLm1heFpTbGlkZXIKICAgICAgICAgICAgLy9Gb3JjZSByZW5kZXJlcnMgcmVsb2FkLgogICAgICAgICAgICB2aWV3ZXIuZ2NvZGVQcm9jZXNzb3IudXBkYXRlRmlsZVBvc2l0aW9uKDApCiAgICAgICAgICAgIHZpZXdlcj8uZm9yY2VSZW5kZXIoKQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHZpZXdlci5nY29kZVByb2Nlc3Nvci5zZXRMaXZlVHJhY2tpbmcoZmFsc2UpCiAgICAgICAgICAgIGF3YWl0IHRoaXMucmVsb2FkVmlld2VyKCkKICAgICAgICB9CiAgICB9CgogICAgQFdhdGNoKCdwcmludGVySXNQcmludGluZycpCiAgICBwcmludGVySXNQcmludGluZ0NoYW5nZWQoKSB7CiAgICAgICAgdGhpcy50cmFja2luZyA9IGZhbHNlCiAgICB9CgogICAgZ2V0IHNob3dDdXJzb3IoKTogYm9vbGVhbiB7CiAgICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLmd1aS5nY29kZVZpZXdlci5zaG93Q3Vyc29yID8/IGZhbHNlCiAgICB9CgogICAgc2V0IHNob3dDdXJzb3IobmV3VmFsOiBib29sZWFuKSB7CiAgICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2d1aS9zYXZlU2V0dGluZycsIHtuYW1lOiAnZ2NvZGVWaWV3ZXIuc2hvd0N1cnNvcicsIHZhbHVlOiBuZXdWYWx9KQogICAgfQoKICAgIEBXYXRjaCgnc2hvd0N1cnNvcicpCiAgICBzaG93Q3Vyc29yQ2hhbmdlZChuZXdWYWw6IGJvb2xlYW4pIHsKICAgICAgICB2aWV3ZXI/LnNldEN1cnNvclZpc2libGl0eShuZXdWYWwpCiAgICB9CgogICAgZ2V0IHNob3dUcmF2ZWxNb3ZlcygpOiBib29sZWFuIHsKICAgICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUuZ3VpLmdjb2RlVmlld2VyLnNob3dUcmF2ZWxNb3ZlcyA/PyBmYWxzZQogICAgfQoKICAgIHNldCBzaG93VHJhdmVsTW92ZXMobmV3VmFsOiBib29sZWFuKSB7CiAgICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2d1aS9zYXZlU2V0dGluZycsIHtuYW1lOiAnZ2NvZGVWaWV3ZXIuc2hvd1RyYXZlbE1vdmVzJywgdmFsdWU6IG5ld1ZhbH0pCiAgICB9CgogICAgQFdhdGNoKCdzaG93VHJhdmVsTW92ZXMnKQogICAgc2hvd1RyYXZlbE1vdmVzQ2hhbmdlZChuZXdWYWw6IGJvb2xlYW4pIHsKICAgICAgICB2aWV3ZXI/LnRvZ2dsZVRyYXZlbHMobmV3VmFsKQogICAgfQoKICAgIGdldCBzaG93T2JqZWN0U2VsZWN0aW9uKCk6IGJvb2xlYW4gewogICAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS5ndWkuZ2NvZGVWaWV3ZXIuc2hvd09iamVjdFNlbGVjdGlvbiA/PyBmYWxzZQogICAgfQoKICAgIHNldCBzaG93T2JqZWN0U2VsZWN0aW9uKG5ld1ZhbDogYm9vbGVhbikgewogICAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdndWkvc2F2ZVNldHRpbmcnLCB7bmFtZTogJ2djb2RlVmlld2VyLnNob3dPYmplY3RTZWxlY3Rpb24nLCB2YWx1ZTogbmV3VmFsfSkKICAgIH0KCiAgICBAV2F0Y2goJ3Nob3dPYmplY3RTZWxlY3Rpb24nKQogICAgc2hvd09iamVjdFNlbGVjdGlvbkNoYW5nZWQobmV3VmFsOiBib29sZWFuKSB7CiAgICAgICAgdmlld2VyPy5idWlsZE9iamVjdHMuc2hvd09iamVjdFNlbGVjdGlvbihuZXdWYWwpCiAgICB9CgogICAgZ2V0IGhkUmVuZGVyaW5nKCkgewogICAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS5ndWkuZ2NvZGVWaWV3ZXIuaGRSZW5kZXJpbmcKICAgIH0KCiAgICBzZXQgaGRSZW5kZXJpbmcobmV3VmFsKSB7CiAgICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2d1aS9zYXZlU2V0dGluZycsIHtuYW1lOiAnZ2NvZGVWaWV3ZXIuaGRSZW5kZXJpbmcnLCB2YWx1ZTogbmV3VmFsfSkKICAgIH0KCiAgICBAV2F0Y2goJ2hkUmVuZGVyaW5nJykKICAgIGFzeW5jIGhkUmVuZGVyaW5nQ2hhbmdlZChuZXdWYWw6IGJvb2xlYW4pIHsKICAgICAgICBpZiAodmlld2VyKSB7CiAgICAgICAgICAgIHZpZXdlci5nY29kZVByb2Nlc3Nvci51c2VIaWdoUXVhbGl0eUV4dHJ1c2lvbihuZXdWYWwpCiAgICAgICAgICAgIGF3YWl0IHRoaXMucmVsb2FkVmlld2VyKCkKICAgICAgICB9CiAgICB9CgogICAgZ2V0IGZvcmNlTGluZVJlbmRlcmluZygpIHsKICAgICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUuZ3VpLmdjb2RlVmlld2VyLmZvcmNlTGluZVJlbmRlcmluZwogICAgfQoKICAgIHNldCBmb3JjZUxpbmVSZW5kZXJpbmcobmV3VmFsKSB7CiAgICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2d1aS9zYXZlU2V0dGluZycsIHtuYW1lOiAnZ2NvZGVWaWV3ZXIuZm9yY2VMaW5lUmVuZGVyaW5nJywgdmFsdWU6IG5ld1ZhbH0pCiAgICB9CgogICAgQFdhdGNoKCdmb3JjZUxpbmVSZW5kZXJpbmcnKQogICAgYXN5bmMgZm9yY2VMaW5lUmVuZGVyaW5nQ2hhbmdlZChuZXdWYWw6IGJvb2xlYW4pIHsKICAgICAgICBpZiAodmlld2VyKSB7CiAgICAgICAgICAgIHZpZXdlci5nY29kZVByb2Nlc3Nvci51cGRhdGVGb3JjZVdpcmVNb2RlKG5ld1ZhbCkKICAgICAgICAgICAgYXdhaXQgdGhpcy5yZWxvYWRWaWV3ZXIoKQogICAgICAgIH0KICAgIH0KCiAgICBnZXQgdHJhbnNwYXJlbmN5KCkgewogICAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS5ndWkuZ2NvZGVWaWV3ZXIudHJhbnNwYXJlbmN5CiAgICB9CgogICAgc2V0IHRyYW5zcGFyZW5jeShuZXdWYWwpIHsKICAgICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgnZ3VpL3NhdmVTZXR0aW5nJywge25hbWU6ICdnY29kZVZpZXdlci50cmFuc3BhcmVuY3knLCB2YWx1ZTogbmV3VmFsfSkKICAgIH0KCiAgICBAV2F0Y2goJ3RyYW5zcGFyZW5jeScpCiAgICBhc3luYyB0cmFuc3BhcmVuY3lDaGFuZ2VkKG5ld1ZhbDogYm9vbGVhbikgewogICAgICAgIGlmICh2aWV3ZXIpIHsKICAgICAgICAgICAgdmlld2VyLmdjb2RlUHJvY2Vzc29yLnNldEFscGhhKG5ld1ZhbCkKICAgICAgICAgICAgYXdhaXQgdGhpcy5yZWxvYWRWaWV3ZXIoKQogICAgICAgIH0KICAgIH0KCiAgICBnZXQgdm94ZWxNb2RlKCkgewogICAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS5ndWkuZ2NvZGVWaWV3ZXIudm94ZWxNb2RlCiAgICB9CgogICAgc2V0IHZveGVsTW9kZShuZXdWYWwpIHsKICAgICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgnZ3VpL3NhdmVTZXR0aW5nJywge25hbWU6ICdnY29kZVZpZXdlci52b3hlbE1vZGUnLCB2YWx1ZTogbmV3VmFsfSkKICAgIH0KCiAgICBAV2F0Y2goJ3ZveGVsTW9kZScpCiAgICBhc3luYyB2b3hlbE1vZGVDaGFuZ2VkKG5ld1ZhbDogYm9vbGVhbikgewogICAgICAgIGlmICh2aWV3ZXIpIHsKICAgICAgICAgICAgdmlld2VyLmdjb2RlUHJvY2Vzc29yLnNldFZveGVsTW9kZShuZXdWYWwpCiAgICAgICAgICAgIHZpZXdlci5nY29kZVByb2Nlc3Nvci52b3hlbFdpZHRoID0gdGhpcy52b3hlbFdpZHRoCiAgICAgICAgICAgIHZpZXdlci5nY29kZVByb2Nlc3Nvci52b3hlbEhlaWdodCA9IHRoaXMudm94ZWxIZWlnaHQKICAgICAgICAgICAgYXdhaXQgdGhpcy5yZWxvYWRWaWV3ZXIoKQogICAgICAgIH0KICAgIH0KCiAgICBnZXQgdm94ZWxXaWR0aCgpIHsKICAgICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUuZ3VpLmdjb2RlVmlld2VyLnZveGVsV2lkdGggPz8gMQogICAgfQoKICAgIHNldCB2b3hlbFdpZHRoKG5ld1ZhbCkgewogICAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdndWkvc2F2ZVNldHRpbmcnLCB7bmFtZTogJ2djb2RlVmlld2VyLnZveGVsV2lkdGgnLCB2YWx1ZTogbmV3VmFsfSkKICAgIH0KCiAgICBnZXQgdm94ZWxIZWlnaHQoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLmd1aS5nY29kZVZpZXdlci52b3hlbEhlaWdodCA/PyAxCiAgICB9CgogICAgc2V0IHZveGVsSGVpZ2h0KG5ld1ZhbCkgewogICAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdndWkvc2F2ZVNldHRpbmcnLCB7bmFtZTogJ2djb2RlVmlld2VyLnZveGVsSGVpZ2h0JywgdmFsdWU6IG5ld1ZhbH0pCiAgICB9CgogICAgZ2V0IHNwZWN1bGFyTGlnaHRpbmcoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLmd1aS5nY29kZVZpZXdlci5zcGVjdWxhckxpZ2h0aW5nCiAgICB9CgogICAgc2V0IHNwZWN1bGFyTGlnaHRpbmcobmV3VmFsKSB7CiAgICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2d1aS9zYXZlU2V0dGluZycsIHtuYW1lOiAnZ2NvZGVWaWV3ZXIuc3BlY3VsYXJMaWdodGluZycsIHZhbHVlOiBuZXdWYWx9KQogICAgfQoKICAgIEBXYXRjaCgnc3BlY3VsYXJMaWdodGluZycpCiAgICBhc3luYyBzcGVjdWxhckxpZ2h0aW5nQ2hhbmdlZChuZXdWYWw6IGJvb2xlYW4pIHsKICAgICAgICBpZiAodmlld2VyKSB7CiAgICAgICAgICAgIHZpZXdlci5nY29kZVByb2Nlc3Nvci51c2VTcGVjdWxhckNvbG9yKG5ld1ZhbCkKICAgICAgICAgICAgLy9hd2FpdCB0aGlzLnJlbG9hZFZpZXdlcigpCiAgICAgICAgfQogICAgfQoKICAgIGdldCBleHRydWRlckNvbG9ycygpIHsKICAgICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUuZ3VpLmdjb2RlVmlld2VyPy5leHRydWRlckNvbG9ycyA/PyBmYWxzZQogICAgfQoKICAgIGxvYWRUb29sQ29sb3JzKGNvbG9yczogc3RyaW5nW10pIHsKICAgICAgICBpZiAodmlld2VyICYmIGNvbG9ycy5sZW5ndGgpIHsKICAgICAgICAgICAgdmlld2VyLmdjb2RlUHJvY2Vzc29yLnJlc2V0VG9vbHMoKQogICAgICAgICAgICBjb2xvcnMuZm9yRWFjaCgoY29sb3I6IHN0cmluZykgPT4gewogICAgICAgICAgICAgICAgdmlld2VyLmdjb2RlUHJvY2Vzc29yLmFkZFRvb2woY29sb3IsIHRoaXMubm96emxlX2RpYW1ldGVyKQogICAgICAgICAgICB9KQogICAgICAgICAgICB0aGlzLnNldFJlbG9hZFJlcXVpcmVkRmxhZygpCiAgICAgICAgfQogICAgfQoKICAgIEBXYXRjaCgnZXh0cnVkZXJDb2xvcnMnKQogICAgZXh0cnVkZXJDb2xvcnNDaGFuZ2VkKG5ld1ZhbDogc3RyaW5nW10pIHsKICAgICAgICBpZiAodmlld2VyICYmIG5ld1ZhbCAmJiBuZXdWYWwubGVuZ3RoKSB7CiAgICAgICAgICAgIHRoaXMubG9hZFRvb2xDb2xvcnMobmV3VmFsKQogICAgICAgICAgICB0aGlzLnNldFJlbG9hZFJlcXVpcmVkRmxhZygpCiAgICAgICAgfQogICAgfQoKICAgIHByaXZhdGUgY29sb3JNb2RlcyA9IFsKICAgICAgICB7dGV4dDogJ0V4dHJ1ZGVyJywgdmFsdWU6IDB9LAogICAgICAgIHt0ZXh0OiAnRmVlZCBSYXRlJywgdmFsdWU6IDF9LAogICAgICAgIHt0ZXh0OiAnRmVhdHVyZScsIHZhbHVlOiAyfSwKICAgIF0KCiAgICBnZXQgY29sb3JNb2RlKCk6IG51bWJlciB7CiAgICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLmd1aS5nY29kZVZpZXdlcj8uY29sb3JNb2RlID8/IDIKICAgIH0KCiAgICBzZXQgY29sb3JNb2RlKG5ld1ZhbDogbnVtYmVyKSB7CiAgICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2d1aS9zYXZlU2V0dGluZycsIHtuYW1lOiAnZ2NvZGVWaWV3ZXIuY29sb3JNb2RlJywgdmFsdWU6IG5ld1ZhbH0pCgogICAgICAgIGlmICh2aWV3ZXIpIHsKICAgICAgICAgICAgaWYgKHZpZXdlci5nY29kZVByb2Nlc3Nvci5jb2xvck1vZGUgIT09IG5ld1ZhbCkgewogICAgICAgICAgICAgICAgdmlld2VyLmdjb2RlUHJvY2Vzc29yLnNldENvbG9yTW9kZShuZXdWYWwpCiAgICAgICAgICAgICAgICB0aGlzLnJlbG9hZFZpZXdlcigpCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgZ2V0IGJhY2tncm91bmRDb2xvcigpIHsKICAgICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUuZ3VpLmdjb2RlVmlld2VyPy5iYWNrZ3JvdW5kQ29sb3IgPz8gJyMxMjEyMTInCiAgICB9CgogICAgQFdhdGNoKCdiYWNrZ3JvdW5kQ29sb3InKQogICAgYmFja2dyb3VuZENvbG9yQ2hhbmdlZChuZXdWYWw6IHN0cmluZykgewogICAgICAgIGlmICghdmlld2VyKSByZXR1cm4KICAgICAgICB2aWV3ZXIuc2V0QmFja2dyb3VuZENvbG9yKG5ld1ZhbCkKICAgIH0KCiAgICBnZXQgZ3JpZENvbG9yKCkgewogICAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS5ndWkuZ2NvZGVWaWV3ZXI/LmdyaWRDb2xvciA/PyAnI0IzQjNCMycKICAgIH0KCiAgICBAV2F0Y2goJ2dyaWRDb2xvcicpCiAgICBncmlkQ29sb3JDaGFuZ2VkKG5ld1ZhbDogc3RyaW5nKSB7CiAgICAgICAgaWYgKCF2aWV3ZXIpIHJldHVybgogICAgICAgIHZpZXdlci5iZWQuc2V0QmVkQ29sb3IobmV3VmFsKQogICAgfQoKICAgIGdldCBzaG93QXhlcygpIHsKICAgICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUuZ3VpLmdjb2RlVmlld2VyPy5zaG93QXhlcyA/PyB0cnVlCiAgICB9CgogICAgQFdhdGNoKCdzaG93QXhlcycpCiAgICBzaG93QXhlc0NoYW5nZWQobmV3VmFsOiBib29sZWFuKSB7CiAgICAgICAgaWYgKCF2aWV3ZXIpIHJldHVybgogICAgICAgIHZpZXdlci5heGVzLnNob3cobmV3VmFsKQogICAgfQoKICAgIGdldCBtaW5GZWVkKCkgewogICAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS5ndWkuZ2NvZGVWaWV3ZXI/Lm1pbkZlZWQgPz8gMjAKICAgIH0KCiAgICBAV2F0Y2goJ21pbkZlZWQnKQogICAgbWluRmVlZENoYW5nZWQobmV3VmFsOiBudW1iZXIpIHsKICAgICAgICBpZiAoIXZpZXdlcikgcmV0dXJuCiAgICAgICAgdmlld2VyLmdjb2RlUHJvY2Vzc29yLnVwZGF0ZUNvbG9yUmF0ZShuZXdWYWwgKiA2MCwgdGhpcy5tYXhGZWVkICogNjApCiAgICB9CgogICAgZ2V0IG1heEZlZWQoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLmd1aS5nY29kZVZpZXdlcj8ubWF4RmVlZCA/PyAxMDAKICAgIH0KCiAgICBAV2F0Y2goJ21heEZlZWQnKQogICAgbWF4RmVlZENoYW5nZWQobmV3VmFsOiBudW1iZXIpIHsKICAgICAgICBpZiAoIXZpZXdlcikgcmV0dXJuCiAgICAgICAgdmlld2VyLmdjb2RlUHJvY2Vzc29yLnVwZGF0ZUNvbG9yUmF0ZSh0aGlzLm1pbkZlZWQgKiA2MCwgbmV3VmFsICogNjApCiAgICB9CgogICAgZ2V0IG1pbkZlZWRDb2xvcigpIHsKICAgICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUuZ3VpLmdjb2RlVmlld2VyPy5taW5GZWVkQ29sb3IgPz8gJyMwMDAwRkYnCiAgICB9CgogICAgQFdhdGNoKCdtaW5GZWVkQ29sb3InKQogICAgbWluRmVlZENvbG9yVXBkYXRlZChuZXdWYWw6IHN0cmluZykgewogICAgICAgIGlmICghdmlld2VyKSByZXR1cm4KICAgICAgICB2aWV3ZXIuZ2NvZGVQcm9jZXNzb3IudXBkYXRlTWluRmVlZENvbG9yKG5ld1ZhbCkKICAgICAgICB0aGlzLnNldFJlbG9hZFJlcXVpcmVkRmxhZygpCiAgICB9CgogICAgZ2V0IG1heEZlZWRDb2xvcigpIHsKICAgICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUuZ3VpLmdjb2RlVmlld2VyPy5tYXhGZWVkQ29sb3IgPz8gJyNGRjAwMDAnCiAgICB9CgogICAgQFdhdGNoKCdtYXhGZWVkQ29sb3InKQogICAgbWF4RmVlZENvbG9yVXBkYXRlZChuZXdWYWw6IHN0cmluZykgewogICAgICAgIGlmICghdmlld2VyKSByZXR1cm4KICAgICAgICB2aWV3ZXIuZ2NvZGVQcm9jZXNzb3IudXBkYXRlTWF4RmVlZENvbG9yKG5ld1ZhbCkKICAgICAgICB0aGlzLnNldFJlbG9hZFJlcXVpcmVkRmxhZygpCiAgICB9CgogICAgZ2V0IGtpbmVtYXRpY3MoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLnByaW50ZXIuY29uZmlnZmlsZT8uc2V0dGluZ3M/LnByaW50ZXI/LmtpbmVtYXRpY3MgPz8gJycKICAgIH0KCiAgICBAV2F0Y2goJ2tpbmVtYXRpY3MnKQogICAga2luZW1hdGljc0NoYW5nZWQobmV3VmFsOiBzdHJpbmcpIHsKICAgICAgICBpZiAodmlld2VyICYmIG5ld1ZhbCkgewogICAgICAgICAgICB2aWV3ZXIuYmVkLnNldERlbHRhKG5ld1ZhbC5pbmNsdWRlcygnZGVsdGEnKSkKICAgICAgICB9CiAgICB9CgogICAgZ2V0IGJlZE1pblNpemUoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLnByaW50ZXIudG9vbGhlYWQ/LmF4aXNfbWluaW11bSA/PyBudWxsCiAgICB9CgogICAgQFdhdGNoKCdiZWRNaW5TaXplJywge2RlZXA6IHRydWV9KQogICAgYmVkTWluU2l6ZUNoYW5nZWQobmV3VmFsOiBudW1iZXJbXSB8IG51bGwpIHsKICAgICAgICBpZiAodmlld2VyICYmIG5ld1ZhbCkgewogICAgICAgICAgICB2aWV3ZXIuYmVkLmJ1aWxkVm9sdW1lWyd4J10ubWluID0gbmV3VmFsWzBdCiAgICAgICAgICAgIHZpZXdlci5iZWQuYnVpbGRWb2x1bWVbJ3knXS5taW4gPSBuZXdWYWxbMV0KICAgICAgICAgICAgdmlld2VyLmJlZC5idWlsZFZvbHVtZVsneiddLm1pbiA9IG5ld1ZhbFsyXQogICAgICAgIH0KICAgIH0KCiAgICBnZXQgYmVkTWF4U2l6ZSgpIHsKICAgICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUucHJpbnRlci50b29saGVhZD8uYXhpc19tYXhpbXVtID8/IG51bGwKICAgIH0KCiAgICBAV2F0Y2goJ2JlZE1heFNpemUnLCB7ZGVlcDogdHJ1ZX0pCiAgICBiZWRNYXhTaXplQ2hhbmdlZChuZXdWYWw6IG51bWJlcltdIHwgbnVsbCkgewogICAgICAgIGlmIChuZXdWYWwgJiYgdmlld2VyKSB7CiAgICAgICAgICAgIHZpZXdlci5iZWQuYnVpbGRWb2x1bWVbJ3gnXS5tYXggPSBuZXdWYWxbMF0KICAgICAgICAgICAgdmlld2VyLmJlZC5idWlsZFZvbHVtZVsneSddLm1heCA9IG5ld1ZhbFsxXQogICAgICAgICAgICB2aWV3ZXIuYmVkLmJ1aWxkVm9sdW1lWyd6J10ubWF4ID0gbmV3VmFsWzJdCiAgICAgICAgfQogICAgfQoKICAgIEBXYXRjaCgnelNsaWRlcicpCiAgICB6U2xpZGVyQ2hhbmdlZChuZXdWYWw6IG51bWJlcikgewogICAgICAgIHZpZXdlcj8uc2V0WkNsaXBQbGFuZShuZXdWYWwsIC0xKQogICAgICAgIHZpZXdlcj8uZm9yY2VSZW5kZXIoKQogICAgfQoKICAgIGdldCBwcm9ncmVzc0NvbG9yKCkgewogICAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS5ndWkuZ2NvZGVWaWV3ZXI/LnByb2dyZXNzQ29sb3IgPz8gJyNGRkZGRkYnCiAgICB9CgogICAgQFdhdGNoKCdwcm9ncmVzc0NvbG9yJykKICAgIHByb2dyZXNzQ29sb3JDaGFuZ2VkKG5ld1ZhbDogc3RyaW5nKSB7CiAgICAgICAgdmlld2VyPy5zZXRQcm9ncmVzc0NvbG9yKG5ld1ZhbCkKICAgIH0KCiAgICB1cGRhdGVaU2xpZGVyKG5ld1ZhbDogYW55KSB7CiAgICAgICAgdGhpcy56U2xpZGVyID0gbmV3VmFsCiAgICB9Cn0K"},null]}