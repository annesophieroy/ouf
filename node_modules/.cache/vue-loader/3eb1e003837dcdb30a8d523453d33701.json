{"remainingRequest":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/components/TheTopbar.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/components/TheTopbar.vue","mtime":1644874918000},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1645990066541},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1645990070825},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/postcss-loader/src/index.js","mtime":1645990067674},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js","mtime":1645990064605},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1645990069130}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci50b3BiYXIgLnYtdG9vbGJhcl9fY29udGVudCB7CiAgICBwYWRkaW5nLXRvcDogMCAhaW1wb3J0YW50OwogICAgcGFkZGluZy1ib3R0b206IDAgIWltcG9ydGFudDsKfQo="},{"version":3,"sources":["TheTopbar.vue"],"names":[],"mappings":";AACA;AACA;AACA;AACA","file":"TheTopbar.vue","sourceRoot":"src/components","sourcesContent":["<style>\n    .topbar .v-toolbar__content {\n        padding-top: 0 !important;\n        padding-bottom: 0 !important;\n    }\n</style>\n<style scoped>\n    .button-min-width-auto {\n        min-width: auto !important;\n    }\n    .topbar .v-btn {\n        height: 100% !important;\n        max-height: none;\n    }\n    .topbar .v-btn.v-btn--icon {\n        width: var(--topbar-icon-btn-width) !important;\n    }\n    @media (min-width: 768px) {\n        header.topbar {\n            z-index: 8 !important;\n        }\n    }\n</style>\n\n<template>\n    <div>\n        <v-app-bar app elevate-on-scroll :height=\"topbarHeight\" class=\"topbar pa-0\" clipped-left>\n            <v-app-bar-nav-icon tile @click.stop=\"naviDrawer = !naviDrawer\"></v-app-bar-nav-icon>\n            <router-link to=\"/\">\n                <template v-if=\"sidebarLogo\">\n                    <img :src=\"sidebarLogo\" style=\"height: 32px;\" class=\"nav-logo ml-4 mr-1 d-none d-sm-flex\" alt=\"Logo\" />\n                </template>\n                <template v-else>\n                    <mainsail-logo :color=\"logoColor\" style=\"height: 32px;\" class=\"nav-logo ml-4 mr-1 d-none d-sm-flex\" router to=\"/\" :ripple=\"false\"></mainsail-logo>\n                </template>\n            </router-link>\n            <v-toolbar-title class=\"text-no-wrap ml-0 pl-2 mr-2\">{{ printerName }}</v-toolbar-title>\n            <printer-selector v-if=\"countPrinters\"></printer-selector>\n            <v-spacer></v-spacer>\n            <the-throttled-states></the-throttled-states>\n            <input type=\"file\" ref=\"fileUploadAndStart\" :accept=\"validGcodeExtensions.join(', ')\" style=\"display: none\" @change=\"uploadAndStart\" />\n            <v-btn tile\n                :icon=\"$vuetify.breakpoint.smAndDown\"\n                :text=\"$vuetify.breakpoint.mdAndUp\"\n                color=\"primary\"\n                class=\"button-min-width-auto px-3 d-none d-sm-flex save-config-button\"\n                v-if=\"klippyIsConnected && saveConfigPending\"\n                :disabled=\"printerIsPrinting\"\n                :loading=\"loadings.includes('topbarSaveConfig')\"\n                @click=\"saveConfig\">\n                <v-icon class=\"d-md-none\">mdi-content-save</v-icon><span class=\"d-none d-md-inline\">{{ $t(\"App.TopBar.SAVE_CONFIG\") }}</span>\n            </v-btn>\n            <v-btn tile\n                :icon=\"$vuetify.breakpoint.smAndDown\"\n                :text=\"$vuetify.breakpoint.mdAndUp\"\n                color=\"primary\"\n                class=\"button-min-width-auto px-3 d-none d-sm-flex upload-and-start-button\"\n                v-if=\"klippyIsConnected && ['standby', 'complete', 'cancelled'].includes(printer_state) && !boolHideUploadAndPrintButton\"\n                :loading=\"loadings.includes('btnUploadAndStart')\"\n                @click=\"btnUploadAndStart\">\n                <v-icon class=\"mr-md-2\">mdi-file-upload</v-icon><span class=\"d-none d-md-inline\">{{ $t(\"App.TopBar.UploadPrint\") }}</span>\n            </v-btn>\n            <v-btn tile\n                :icon=\"$vuetify.breakpoint.smAndDown\"\n                :text=\"$vuetify.breakpoint.mdAndUp\"\n                color=\"error\"\n                class=\"button-min-width-auto px-3 emergency-button\"\n                v-if=\"klippyIsConnected\"\n                :loading=\"loadings.includes('topbarEmergencyStop')\"\n                @click=\"btnEmergencyStop\">\n                <v-icon class=\"mr-md-2\">mdi-alert-circle-outline</v-icon><span class=\"d-none d-md-inline\">{{ $t(\"App.TopBar.EmergencyStop\") }}</span>\n            </v-btn>\n            <the-settings-menu></the-settings-menu>\n            <the-top-corner-menu></the-top-corner-menu>\n        </v-app-bar>\n        <v-snackbar\n            :timeout=\"-1\"\n            :value=\"true\"\n            fixed\n            right\n            bottom\n            dark\n            v-model=\"uploadSnackbar.status\"\n        >\n            <strong>{{ $t(\"App.TopBar.Uploading\") }} {{ uploadSnackbar.filename }}</strong><br />\n            {{ Math.round(uploadSnackbar.percent) }} % @ {{ formatFilesize(Math.round(uploadSnackbar.speed)) }}/s<br />\n            <v-progress-linear class=\"mt-2\" :value=\"uploadSnackbar.percent\"></v-progress-linear>\n            <template v-slot:action=\"{ attrs }\">\n                <v-btn\n                    color=\"red\"\n                    text\n                    v-bind=\"attrs\"\n                    @click=\"cancelUpload\"\n                    style=\"min-width: auto;\"\n                >\n                    <v-icon class=\"0\">mdi-close</v-icon>\n                </v-btn>\n            </template>\n        </v-snackbar>\n        <v-dialog v-model=\"showEmergencyStopDialog\" width=\"400\" :fullscreen=\"isMobile\">\n            <panel :title=\"$t('EmergencyStopDialog.EmergencyStop')\" toolbar-color=\"error\" card-class=\"emergency-stop-dialog\" icon=\"mdi-alert-circle-outline\" :margin-bottom=\"false\">\n                <template v-slot:buttons>\n                    <v-btn icon tile @click=\"showEmergencyStopDialog = false\"><v-icon>mdi-close-thick</v-icon></v-btn>\n                </template>\n                <v-card-text>{{ $t('EmergencyStopDialog.AreYouSure') }}</v-card-text>\n                <v-card-actions>\n                    <v-spacer></v-spacer>\n                    <v-btn text @click=\"showEmergencyStopDialog = false\">{{ $t('EmergencyStopDialog.No')}}</v-btn>\n                    <v-btn color=\"primary\" text @click=\"emergencyStop\">{{$t('EmergencyStopDialog.Yes')}}</v-btn>\n                </v-card-actions>\n            </panel>\n        </v-dialog>\n    </div>\n</template>\n\n<script lang=\"ts\">\nimport {Mixins} from 'vue-property-decorator'\nimport BaseMixin from '@/components/mixins/base'\nimport {validGcodeExtensions} from '@/store/variables'\nimport Component from 'vue-class-component'\nimport axios from 'axios'\nimport { formatFilesize } from '@/plugins/helpers'\nimport TheTopCornerMenu from '@/components/TheTopCornerMenu.vue'\nimport TheSettingsMenu from '@/components/TheSettingsMenu.vue'\nimport TheThrottledStates from '@/components/TheThrottledStates.vue'\nimport Panel from '@/components/ui/Panel.vue'\nimport PrinterSelector from '@/components/ui/PrinterSelector.vue'\nimport MainsailLogo from '@/components/ui/MainsailLogo.vue'\nimport {topbarHeight} from '@/store/variables'\n\ntype uploadSnackbar = {\n    status: boolean\n    filename: string\n    percent: number\n    speed: number\n    total: number\n    cancelTokenSource: any\n    lastProgress: {\n        time: number\n        loaded: number\n    }\n}\n\n@Component({\n    components: {\n        Panel,\n        TheThrottledStates,\n        TheSettingsMenu,\n        TheTopCornerMenu,\n        PrinterSelector,\n        MainsailLogo\n    }\n})\nexport default class TheTopbar extends Mixins(BaseMixin) {\n    topbarHeight = topbarHeight\n\n    showEmergencyStopDialog = false\n\n    uploadSnackbar: uploadSnackbar = {\n        status: false,\n        filename: '',\n        percent: 0,\n        speed: 0,\n        total: 0,\n        cancelTokenSource: null,\n        lastProgress: {\n            time: 0,\n            loaded: 0\n        }\n    }\n\n    formatFilesize = formatFilesize\n\n    $refs!: {\n        fileUploadAndStart: HTMLFormElement\n    }\n\n    get naviDrawer() {\n        return this.$store.state.naviDrawer\n    }\n\n    set naviDrawer(newVal) {\n        this.$store.dispatch('setNaviDrawer', newVal)\n    }\n\n    get validGcodeExtensions() {\n        return validGcodeExtensions\n    }\n\n    get currentPage() {\n        return this.$route.fullPath\n    }\n\n    get saveConfigPending() {\n        return this.$store.state.printer.configfile?.save_config_pending ?? false\n    }\n\n    get printerName():string {\n        if (this.$store.state.gui.general.printername.length)\n            return this.$store.state.gui.general.printername\n\n        return this.$store.state.printer.hostname\n    }\n\n    get boolWideNavDrawer() {\n        return this.$store.state.gui.uiSettings.boolWideNavDrawer ?? false\n    }\n\n    get countPrinters() {\n        return this.$store.getters['farm/countPrinters']\n    }\n\n    get boolHideUploadAndPrintButton() {\n        return this.$store.state.gui.uiSettings.boolHideUploadAndPrintButton ?? false\n    }\n\n    get sidebarLogo(): string {\n        return this.$store.getters['files/getSidebarLogo']\n    }\n\n    get logoColor(): string {\n        return this.$store.state.gui.uiSettings.logo\n    }\n\n    btnEmergencyStop() {\n        const confirmOnEmergencyStop = this.$store.state.gui.uiSettings.confirmOnEmergencyStop\n        if (confirmOnEmergencyStop) {\n            this.showEmergencyStopDialog = true\n        }\n        else {\n            this.emergencyStop()\n        }\n    }\n\n    emergencyStop() {\n        this.showEmergencyStopDialog = false\n        this.$socket.emit('printer.emergency_stop', {}, { loading: 'topbarEmergencyStop' })\n    }\n\n    saveConfig() {\n        this.$store.dispatch('server/addEvent', { message: 'SAVE_CONFIG', type: 'command' })\n        this.$socket.emit('printer.gcode.script', { script: 'SAVE_CONFIG' }, { loading: 'topbarSaveConfig' })\n    }\n\n    btnUploadAndStart() {\n        this.$refs.fileUploadAndStart.click()\n    }\n\n    async uploadAndStart() {\n        if (this.$refs.fileUploadAndStart?.files.length) {\n            this.$store.dispatch('socket/addLoading', { name: 'btnUploadAndStart' })\n            let successFiles = []\n            for (const file of this.$refs.fileUploadAndStart?.files) {\n                const result = await this.doUploadAndStart(file)\n                successFiles.push(result)\n            }\n\n            this.$store.dispatch('socket/removeLoading', { name: 'btnUploadAndStart' })\n            for(const file of successFiles) {\n                const text = this.$t('App.TopBar.UploadOfFileSuccessful', {file:file}).toString()\n                this.$toast.success(text)\n            }\n\n            this.$refs.fileUploadAndStart.value = ''\n            if (this.currentPage !== '/') await this.$router.push('/')\n        }\n    }\n\n    doUploadAndStart(file: File) {\n        const formData = new FormData()\n        const filename = file.name\n\n        this.uploadSnackbar.filename = filename\n        this.uploadSnackbar.status = true\n        this.uploadSnackbar.percent = 0\n        this.uploadSnackbar.speed = 0\n        this.uploadSnackbar.lastProgress.loaded = 0\n        this.uploadSnackbar.lastProgress.time = 0\n\n        formData.append('file', file, filename)\n        formData.append('print', 'true')\n\n        return new Promise(resolve => {\n            this.uploadSnackbar.cancelTokenSource = axios.CancelToken.source()\n            axios.post(this.apiUrl + '/server/files/upload',\n                formData, {\n                    cancelToken: this.uploadSnackbar.cancelTokenSource.token,\n                    headers: { 'Content-Type': 'multipart/form-data' },\n                    onUploadProgress: (progressEvent: ProgressEvent) => {\n                        this.uploadSnackbar.percent = (progressEvent.loaded * 100) / progressEvent.total\n                        if (this.uploadSnackbar.lastProgress.time) {\n                            const time = progressEvent.timeStamp - this.uploadSnackbar.lastProgress.time\n                            const data = progressEvent.loaded - this.uploadSnackbar.lastProgress.loaded\n\n                            if (time) this.uploadSnackbar.speed = data / (time / 1000)\n                        }\n\n                        this.uploadSnackbar.lastProgress.time = progressEvent.timeStamp\n                        this.uploadSnackbar.lastProgress.loaded = progressEvent.loaded\n                        this.uploadSnackbar.total = progressEvent.total\n                    }\n                }\n            ).then((result) => {\n                this.uploadSnackbar.status = false\n                resolve(result.data.result)\n            }).catch(() => {\n                this.uploadSnackbar.status = false\n                this.$store.dispatch('socket/removeLoading', { name: 'btnUploadAndStart' })\n                const text = this.$t('App.TopBar.CannotUploadTheFile').toString()\n                this.$toast.error(text)\n            })\n        })\n    }\n\n    cancelUpload(): void {\n        this.uploadSnackbar.cancelTokenSource.cancel()\n        this.uploadSnackbar.status = false\n    }\n}\n</script>"]}]}