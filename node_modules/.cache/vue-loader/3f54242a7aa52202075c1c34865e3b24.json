{"remainingRequest":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/components/settings/SettingsGCodeViewerTab.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/components/settings/SettingsGCodeViewerTab.vue","mtime":1644874918000},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js","mtime":1645990064605},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/babel-loader/lib/index.js","mtime":1645990067759},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/ts-loader/index.js","mtime":1645990068168},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js","mtime":1645990064605},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1645990069130}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgppbXBvcnQge0NvbXBvbmVudCwgTWl4aW5zfSBmcm9tICd2dWUtcHJvcGVydHktZGVjb3JhdG9yJwppbXBvcnQgQmFzZU1peGluIGZyb20gJ0AvY29tcG9uZW50cy9taXhpbnMvYmFzZScKaW1wb3J0IFNldHRpbmdzUm93IGZyb20gJ0AvY29tcG9uZW50cy9zZXR0aW5ncy9TZXR0aW5nc1Jvdy52dWUnCmltcG9ydCB7RGVib3VuY2V9IGZyb20gJ3Z1ZS1kZWJvdW5jZS1kZWNvcmF0b3InCmltcG9ydCBWdWUgZnJvbSAndnVlJwoKQENvbXBvbmVudCh7CiAgICBjb21wb25lbnRzOiB7U2V0dGluZ3NSb3d9LAp9KQpleHBvcnQgZGVmYXVsdCBjbGFzcyBTZXR0aW5nc0dDb2RlVmlld2VyVGFiIGV4dGVuZHMgTWl4aW5zKEJhc2VNaXhpbikgewogICAgZ2V0IHNob3dBeGVzKCk6IGJvb2xlYW4gewogICAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS5ndWkuZ2NvZGVWaWV3ZXIuc2hvd0F4ZXMKICAgIH0KCiAgICBzZXQgc2hvd0F4ZXMobmV3VmFsOiBib29sZWFuKSB7CiAgICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2d1aS9zYXZlU2V0dGluZycsIHtuYW1lOiAnZ2NvZGVWaWV3ZXIuc2hvd0F4ZXMnLCB2YWx1ZTogbmV3VmFsfSkKICAgIH0KCiAgICBnZXQgZXh0cnVkZXJDb2xvcnMoKTogQXJyYXk8c3RyaW5nPiB7CiAgICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLmd1aS5nY29kZVZpZXdlci5leHRydWRlckNvbG9ycwogICAgfQoKICAgIEBEZWJvdW5jZSg1MDApCiAgICBjb2xvcnNVcGRhdGVkKHZhbHVlOiBhbnksIGluZGV4OiBudW1iZXIpOiB2b2lkIHsKICAgICAgICBsZXQgY29sb3JzID0gdGhpcy5leHRydWRlckNvbG9ycwogICAgICAgIGNvbG9yc1tpbmRleF0gPSB2YWx1ZS5oZXgKICAgICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgnZ3VpL3NhdmVTZXR0aW5nJywge25hbWU6ICdnY29kZVZpZXdlci5leHRydWRlckNvbG9ycycsIHZhbHVlOiBjb2xvcnN9KQogICAgfQoKICAgIGdldCBiYWNrZ3JvdW5kQ29sb3IoKTogc3RyaW5nIHsKICAgICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUuZ3VpLmdjb2RlVmlld2VyLmJhY2tncm91bmRDb2xvcgogICAgfQoKICAgIHNldCBiYWNrZ3JvdW5kQ29sb3IobmV3VmFsOiBzdHJpbmcpIHsKICAgICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgnZ3VpL3NhdmVTZXR0aW5nJywge25hbWU6ICdnY29kZVZpZXdlci5iYWNrZ3JvdW5kQ29sb3InLCB2YWx1ZTogbmV3VmFsfSkKICAgIH0KCiAgICBnZXQgZ3JpZENvbG9yKCk6IHN0cmluZyB7CiAgICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLmd1aS5nY29kZVZpZXdlci5ncmlkQ29sb3IKICAgIH0KCiAgICBzZXQgZ3JpZENvbG9yKG5ld1ZhbDogc3RyaW5nKSB7CiAgICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2d1aS9zYXZlU2V0dGluZycsIHtuYW1lOiAnZ2NvZGVWaWV3ZXIuZ3JpZENvbG9yJywgdmFsdWU6IG5ld1ZhbH0pCiAgICB9CgogICAgQERlYm91bmNlKDUwMCkKICAgIHVwZGF0ZUNvbG9yVmFsdWUoY29sb3JFbGVtZW50OiBzdHJpbmcsIG5ld1ZhbDogYW55KTogdm9pZCB7CiAgICAgICAgVnVlLnNldCh0aGlzLCBjb2xvckVsZW1lbnQsIHRoaXMuY2xlYXJDb2xvck9iamVjdChuZXdWYWwpKQogICAgfQoKICAgIGNsZWFyQ29sb3JPYmplY3QoY29sb3I6IGFueSk6IHN0cmluZyB7CiAgICAgICAgaWYgKHR5cGVvZiBjb2xvciA9PT0gJ29iamVjdCcgJiYgJ2hleCcgaW4gY29sb3IpIGNvbG9yID0gY29sb3IuaGV4CiAgICAgICAgaWYgKGNvbG9yLmxlbmd0aCA+IDcpIGNvbG9yID0gY29sb3Iuc3Vic3RyKDAsIDcpCiAgICAgICAgcmV0dXJuIGNvbG9yCiAgICB9CgogICAgZ2V0IG1pbkZlZWQoKTogbnVtYmVyIHsKICAgICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUuZ3VpLmdjb2RlVmlld2VyLm1pbkZlZWQKICAgIH0KCiAgICBzZXQgbWluRmVlZChuZXdWYWw6IG51bWJlcikgewogICAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdndWkvc2F2ZVNldHRpbmcnLCB7bmFtZTogJ2djb2RlVmlld2VyLm1pbkZlZWQnLCB2YWx1ZTogbmV3VmFsfSkKICAgIH0KCiAgICBnZXQgbWF4RmVlZCgpOiBudW1iZXIgewogICAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS5ndWkuZ2NvZGVWaWV3ZXIubWF4RmVlZAogICAgfQoKICAgIHNldCBtYXhGZWVkKG5ld1ZhbDogbnVtYmVyKSB7CiAgICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2d1aS9zYXZlU2V0dGluZycsIHtuYW1lOiAnZ2NvZGVWaWV3ZXIubWF4RmVlZCcsIHZhbHVlOiBuZXdWYWx9KQogICAgfQoKICAgIGdldCBtaW5GZWVkQ29sb3IoKTogc3RyaW5nIHsKICAgICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUuZ3VpLmdjb2RlVmlld2VyLm1pbkZlZWRDb2xvcgogICAgfQoKICAgIHNldCBtaW5GZWVkQ29sb3IobmV3VmFsOiBzdHJpbmcpIHsKICAgICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgnZ3VpL3NhdmVTZXR0aW5nJywge25hbWU6ICdnY29kZVZpZXdlci5taW5GZWVkQ29sb3InLCB2YWx1ZTogbmV3VmFsfSkKICAgIH0KCiAgICBnZXQgbWF4RmVlZENvbG9yKCk6IHN0cmluZyB7CiAgICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLmd1aS5nY29kZVZpZXdlci5tYXhGZWVkQ29sb3IKICAgIH0KCiAgICBzZXQgbWF4RmVlZENvbG9yKG5ld1ZhbDogc3RyaW5nKSB7CiAgICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2d1aS9zYXZlU2V0dGluZycsIHtuYW1lOiAnZ2NvZGVWaWV3ZXIubWF4RmVlZENvbG9yJywgdmFsdWU6IG5ld1ZhbH0pCiAgICB9CgogICAgZmVlZEJsdXIoKTogdm9pZCB7CiAgICAgICAgaWYgKHRoaXMubWluRmVlZCA8IDEpIHRoaXMubWluRmVlZCA9IDEKICAgICAgICBpZiAodGhpcy5tYXhGZWVkIDwgdGhpcy5taW5GZWVkKSB0aGlzLm1heEZlZWQgPSB0aGlzLm1pbkZlZWQgKyAxCiAgICB9CgogICAgZ2V0IHByb2dyZXNzQ29sb3IoKTogc3RyaW5nIHsKICAgICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUuZ3VpLmdjb2RlVmlld2VyLnByb2dyZXNzQ29sb3IKICAgIH0KCiAgICBzZXQgcHJvZ3Jlc3NDb2xvcihuZXdWYWw6IHN0cmluZykgewogICAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdndWkvc2F2ZVNldHRpbmcnLCB7bmFtZTogJ2djb2RlVmlld2VyLnByb2dyZXNzQ29sb3InLCB2YWx1ZTogbmV3VmFsfSkKICAgIH0KfQo="},{"version":3,"sources":["SettingsGCodeViewerTab.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"SettingsGCodeViewerTab.vue","sourceRoot":"src/components/settings","sourcesContent":["<template>\n    <div>\n        <v-card flat>\n            <v-card-text>\n                <settings-row :title=\"$t('Settings.GCodeViewerTab.ShowAxes')\">\n                    <v-switch class=\"mt-0\" hide-details v-model=\"showAxes\"></v-switch>\n                </settings-row>\n                <v-divider class=\"my-2\"></v-divider>\n                <settings-row :title=\"$t('Settings.GCodeViewerTab.BackgroundColor')\">\n                    <v-menu :close-on-content-click=\"false\" bottom left offset-y>\n                        <template v-slot:activator=\"{ on, attrs }\">\n                            <v-btn :color=\"backgroundColor\" class=\"minwidth-0 px-5\" small v-bind=\"attrs\" v-on=\"on\"></v-btn>\n                        </template>\n                        <v-color-picker :value=\"backgroundColor\" @update:color=\"updateColorValue('backgroundColor', $event)\" hide-mode-switch mode=\"rgba\"></v-color-picker>\n                    </v-menu>\n                </settings-row>\n                <v-divider class=\"my-2\"></v-divider>\n                <settings-row :title=\"$t('Settings.GCodeViewerTab.GridColor')\">\n                    <v-menu :close-on-content-click=\"false\" bottom left offset-y>\n                        <template v-slot:activator=\"{ on, attrs }\">\n                            <v-btn :color=\"gridColor\" class=\"minwidth-0 px-5\" small v-bind=\"attrs\" v-on=\"on\"></v-btn>\n                        </template>\n                        <v-color-picker :value=\"gridColor\" @update:color=\"updateColorValue('gridColor', $event)\" hide-mode-switch mode=\"rgba\"></v-color-picker>\n                    </v-menu>\n                </settings-row>\n                <v-divider class=\"my-2\"></v-divider>\n                <settings-row :title=\"$t('Settings.GCodeViewerTab.ExtruderColor')\">\n                    <v-row no-gutters>\n                        <v-menu :close-on-content-click=\"false\" :key=\"index\" bottom left offset-y v-for=\"(extruderColor, index) in extruderColors\">\n                            <template v-slot:activator=\"{ on, attrs }\">\n                                <v-col align=\"right\" class=\"mt-1\" cols=\"12\">\n                                    <span class=\"mr-2\">{{index}}</span>\n                                    <v-btn :color=\"extruderColors[index]\" class=\"minwidth-0 px-5\" small v-bind=\"attrs\" v-on=\"on\"></v-btn>\n                                </v-col>\n                            </template>\n                            <v-color-picker :value=\"extruderColors[index]\" @update:color=\"colorsUpdated($event, index)\" hide-mode-switch mode=\"rgba\"></v-color-picker>\n                        </v-menu>\n                    </v-row>\n                </settings-row>\n                <v-divider class=\"my-2\"></v-divider>\n                <settings-row :title=\"$t('Settings.GCodeViewerTab.MinFeed')\">\n                    <v-menu :close-on-content-click=\"false\" bottom left offset-y>\n                        <template v-slot:activator=\"{ on, attrs }\">\n                            <v-btn :color=\"minFeedColor\" class=\"minwidth-0 px-5 mr-3\" small v-bind=\"attrs\" v-on=\"on\"></v-btn>\n                        </template>\n                        <v-color-picker :value=\"minFeedColor\" @update:color=\"updateColorValue('minFeedColor', $event)\" hide-mode-switch mode=\"rgba\"></v-color-picker>\n                    </v-menu>\n                    <v-text-field :rules=\"[v => v > 0 || 'Minimum speed is 1']\" @blur=\"feedBlur\" dense hide-details=\"auto\" outlined suffix=\"mm/s\" type=\"number\" v-model=\"minFeed\" hide-spin-buttons></v-text-field>\n                </settings-row>\n                <v-divider class=\"my-2\"></v-divider>\n                <settings-row :title=\"$t('Settings.GCodeViewerTab.MaxFeed')\">\n                    <v-menu :close-on-content-click=\"false\" bottom left offset-y>\n                        <template v-slot:activator=\"{ on, attrs }\">\n                            <v-btn :color=\"maxFeedColor\" class=\"minwidth-0 px-5 mr-3\" small v-bind=\"attrs\" v-on=\"on\"></v-btn>\n                        </template>\n                        <v-color-picker :value=\"maxFeedColor\" @update:color=\"updateColorValue('maxFeedColor', $event)\" hide-mode-switch mode=\"rgba\"></v-color-picker>\n                    </v-menu>\n                    <v-text-field :rules=\"[v => v > 0 || 'Minimum speed is 1']\" @blur=\"feedBlur\" dense hide-details=\"auto\" outlined suffix=\"mm/s\" type=\"number\" v-model=\"maxFeed\" hide-spin-buttons></v-text-field>\n                </settings-row>\n            </v-card-text>\n        </v-card>\n    </div>\n</template>\n\n<script lang=\"ts\">\nimport {Component, Mixins} from 'vue-property-decorator'\nimport BaseMixin from '@/components/mixins/base'\nimport SettingsRow from '@/components/settings/SettingsRow.vue'\nimport {Debounce} from 'vue-debounce-decorator'\nimport Vue from 'vue'\n\n@Component({\n    components: {SettingsRow},\n})\nexport default class SettingsGCodeViewerTab extends Mixins(BaseMixin) {\n    get showAxes(): boolean {\n        return this.$store.state.gui.gcodeViewer.showAxes\n    }\n\n    set showAxes(newVal: boolean) {\n        this.$store.dispatch('gui/saveSetting', {name: 'gcodeViewer.showAxes', value: newVal})\n    }\n\n    get extruderColors(): Array<string> {\n        return this.$store.state.gui.gcodeViewer.extruderColors\n    }\n\n    @Debounce(500)\n    colorsUpdated(value: any, index: number): void {\n        let colors = this.extruderColors\n        colors[index] = value.hex\n        this.$store.dispatch('gui/saveSetting', {name: 'gcodeViewer.extruderColors', value: colors})\n    }\n\n    get backgroundColor(): string {\n        return this.$store.state.gui.gcodeViewer.backgroundColor\n    }\n\n    set backgroundColor(newVal: string) {\n        this.$store.dispatch('gui/saveSetting', {name: 'gcodeViewer.backgroundColor', value: newVal})\n    }\n\n    get gridColor(): string {\n        return this.$store.state.gui.gcodeViewer.gridColor\n    }\n\n    set gridColor(newVal: string) {\n        this.$store.dispatch('gui/saveSetting', {name: 'gcodeViewer.gridColor', value: newVal})\n    }\n\n    @Debounce(500)\n    updateColorValue(colorElement: string, newVal: any): void {\n        Vue.set(this, colorElement, this.clearColorObject(newVal))\n    }\n\n    clearColorObject(color: any): string {\n        if (typeof color === 'object' && 'hex' in color) color = color.hex\n        if (color.length > 7) color = color.substr(0, 7)\n        return color\n    }\n\n    get minFeed(): number {\n        return this.$store.state.gui.gcodeViewer.minFeed\n    }\n\n    set minFeed(newVal: number) {\n        this.$store.dispatch('gui/saveSetting', {name: 'gcodeViewer.minFeed', value: newVal})\n    }\n\n    get maxFeed(): number {\n        return this.$store.state.gui.gcodeViewer.maxFeed\n    }\n\n    set maxFeed(newVal: number) {\n        this.$store.dispatch('gui/saveSetting', {name: 'gcodeViewer.maxFeed', value: newVal})\n    }\n\n    get minFeedColor(): string {\n        return this.$store.state.gui.gcodeViewer.minFeedColor\n    }\n\n    set minFeedColor(newVal: string) {\n        this.$store.dispatch('gui/saveSetting', {name: 'gcodeViewer.minFeedColor', value: newVal})\n    }\n\n    get maxFeedColor(): string {\n        return this.$store.state.gui.gcodeViewer.maxFeedColor\n    }\n\n    set maxFeedColor(newVal: string) {\n        this.$store.dispatch('gui/saveSetting', {name: 'gcodeViewer.maxFeedColor', value: newVal})\n    }\n\n    feedBlur(): void {\n        if (this.minFeed < 1) this.minFeed = 1\n        if (this.maxFeed < this.minFeed) this.maxFeed = this.minFeed + 1\n    }\n\n    get progressColor(): string {\n        return this.$store.state.gui.gcodeViewer.progressColor\n    }\n\n    set progressColor(newVal: string) {\n        this.$store.dispatch('gui/saveSetting', {name: 'gcodeViewer.progressColor', value: newVal})\n    }\n}\n</script>"]}]}