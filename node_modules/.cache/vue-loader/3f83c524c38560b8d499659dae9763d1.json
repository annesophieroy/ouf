{"remainingRequest":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/components/settings/SettingsDashboardTabDesktop.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/components/settings/SettingsDashboardTabDesktop.vue","mtime":1644874918000},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js","mtime":1645990064605},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/babel-loader/lib/index.js","mtime":1645990067759},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/ts-loader/index.js","mtime":1645990068168},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js","mtime":1645990064605},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1645990069130}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCmltcG9ydCBDb21wb25lbnQgZnJvbSAndnVlLWNsYXNzLWNvbXBvbmVudCcKaW1wb3J0IHsgTWl4aW5zIH0gZnJvbSAndnVlLXByb3BlcnR5LWRlY29yYXRvcicKaW1wb3J0IGRyYWdnYWJsZSBmcm9tICd2dWVkcmFnZ2FibGUnCmltcG9ydCB7Y2FwaXRhbGl6ZSwgY29udmVydFBhbmVsbmFtZVRvSWNvbn0gZnJvbSAnQC9wbHVnaW5zL2hlbHBlcnMnCmltcG9ydCBEYXNoYm9hcmRNaXhpbiBmcm9tICdAL2NvbXBvbmVudHMvbWl4aW5zL2Rhc2hib2FyZCcKQENvbXBvbmVudCggewogICAgY29tcG9uZW50czogewogICAgICAgIGRyYWdnYWJsZQogICAgfQp9CikKZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2V0dGluZ3NEYXNoYm9hcmRUYWJEZXNrdG9wIGV4dGVuZHMgTWl4aW5zKERhc2hib2FyZE1peGluKSB7CiAgICBjYXBpdGFsaXplID0gY2FwaXRhbGl6ZQogICAgY29udmVydFBhbmVsbmFtZVRvSWNvbiA9IGNvbnZlcnRQYW5lbG5hbWVUb0ljb24KCiAgICBnZXQgZGVza3RvcExheW91dDEoKSB7CiAgICAgICAgbGV0IHBhbmVscyA9IHRoaXMuJHN0b3JlLmdldHRlcnNbJ2d1aS9nZXRQYW5lbHMnXSgnZGVza3RvcExheW91dDEnKQogICAgICAgIHBhbmVscyA9IHBhbmVscy5jb25jYXQodGhpcy5taXNzaW5nUGFuZWxzRGVza3RvcCkKCiAgICAgICAgcmV0dXJuIHBhbmVscwogICAgfQoKICAgIHNldCBkZXNrdG9wTGF5b3V0MShuZXdWYWwpIHsKICAgICAgICBuZXdWYWwgPSBuZXdWYWwuZmlsdGVyKChlbGVtZW50OiBhbnkpID0+IGVsZW1lbnQgIT09IHVuZGVmaW5lZCkKCiAgICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2d1aS9zYXZlU2V0dGluZycsIHtuYW1lOiAnZGFzaGJvYXJkLmRlc2t0b3BMYXlvdXQxJywgdmFsdWU6IG5ld1ZhbCB9KQogICAgfQoKICAgIGdldCBkZXNrdG9wTGF5b3V0MigpIHsKICAgICAgICByZXR1cm4gdGhpcy4kc3RvcmUuZ2V0dGVyc1snZ3VpL2dldFBhbmVscyddKCdkZXNrdG9wTGF5b3V0MicpCiAgICB9CgogICAgc2V0IGRlc2t0b3BMYXlvdXQyKG5ld1ZhbCkgewogICAgICAgIG5ld1ZhbCA9IG5ld1ZhbC5maWx0ZXIoKGVsZW1lbnQ6IGFueSkgPT4gZWxlbWVudCAhPT0gdW5kZWZpbmVkKQoKICAgICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgnZ3VpL3NhdmVTZXR0aW5nJywge25hbWU6ICdkYXNoYm9hcmQuZGVza3RvcExheW91dDInLCB2YWx1ZTogbmV3VmFsIH0pCiAgICB9CgogICAgY2hhbmdlU3RhdGUxKG5hbWU6IHN0cmluZywgbmV3VmFsOiBib29sZWFuKSB7CiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLmRlc2t0b3BMYXlvdXQxLmZpbmRJbmRleCgoZWxlbWVudDogYW55KSA9PiBlbGVtZW50Lm5hbWUgPT09IG5hbWUpCiAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkgewogICAgICAgICAgICB0aGlzLmRlc2t0b3BMYXlvdXQxW2luZGV4XS52aXNpYmxlID0gbmV3VmFsCiAgICAgICAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdndWkvc2F2ZVNldHRpbmcnLCB7bmFtZTogJ2Rhc2hib2FyZC5kZXNrdG9wTGF5b3V0MScsIHZhbHVlOiB0aGlzLmRlc2t0b3BMYXlvdXQxIH0pCiAgICAgICAgfQogICAgfQoKICAgIGNoYW5nZVN0YXRlMihuYW1lOiBzdHJpbmcsIG5ld1ZhbDogYm9vbGVhbikgewogICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5kZXNrdG9wTGF5b3V0Mi5maW5kSW5kZXgoKGVsZW1lbnQ6IGFueSkgPT4gZWxlbWVudC5uYW1lID09PSBuYW1lKQogICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHsKICAgICAgICAgICAgdGhpcy5kZXNrdG9wTGF5b3V0MltpbmRleF0udmlzaWJsZSA9IG5ld1ZhbAogICAgICAgICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgnZ3VpL3NhdmVTZXR0aW5nJywge25hbWU6ICdkYXNoYm9hcmQuZGVza3RvcExheW91dDInLCB2YWx1ZTogdGhpcy5kZXNrdG9wTGF5b3V0MiB9KQogICAgICAgIH0KICAgIH0KCiAgICByZXNldExheW91dCgpIHsKICAgICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgnZ3VpL3Jlc2V0TGF5b3V0JywgJ2Rlc2t0b3BMYXlvdXQxJykKICAgICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgnZ3VpL3Jlc2V0TGF5b3V0JywgJ2Rlc2t0b3BMYXlvdXQyJykKICAgIH0KfQo="},{"version":3,"sources":["SettingsDashboardTabDesktop.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"SettingsDashboardTabDesktop.vue","sourceRoot":"src/components/settings","sourcesContent":["<style scoped>\n    .ghost {\n        opacity: 0.5;\n        background: #c8ebfb;\n    }\n</style>\n\n<template>\n    <v-card flat>\n        <v-card-text>\n            <v-row>\n                <v-col class=\"col-12 col-md-6\">\n                    <v-card class=\"mx-auto\" max-width=\"300\" tile >\n                        <v-list dense>\n                            <v-list-item>\n                                <v-row>\n                                    <v-col class=\"col-auto pr-0\">\n                                        <v-icon>mdi-information</v-icon>\n                                    </v-col>\n                                    <v-col>\n                                        {{ $t('Panels.StatusPanel.Headline') }}\n                                    </v-col>\n                                    <v-col class=\"col-auto\">\n                                        <v-icon color=\"grey lighten-1\">mdi-lock</v-icon>\n                                    </v-col>\n                                </v-row>\n                            </v-list-item>\n                            <draggable v-model=\"desktopLayout1\" :handle=\"isMobile ? '.handle' : ''\" class=\"v-list-item-group\" ghost-class=\"ghost\" group=\"desktopViewport\">\n                                <template v-for=\"(element) in desktopLayout1\">\n                                    <v-list-item :key=\"'item-desktop-'+element.name\" link>\n                                        <v-row>\n                                            <v-col class=\"col-auto pr-0\">\n                                                <v-icon v-if=\"isMobile\" class=\"handle\">mdi-arrow-up-down</v-icon>\n                                                <v-icon v-else v-text=\"convertPanelnameToIcon(element.name)\"></v-icon>\n                                            </v-col>\n                                            <v-col class=\"pr-0\">\n                                                {{ getPanelName(element.name) }}\n                                            </v-col>\n                                            <v-col class=\"col-auto pl-0\">\n                                                <v-icon v-if=\"!element.visible\" color=\"grey lighten-1\" @click.stop=\"changeState1(element.name,true)\">mdi-checkbox-blank-outline</v-icon>\n                                                <v-icon v-else color=\"primary\" @click.stop=\"changeState1(element.name,false)\">mdi-checkbox-marked</v-icon>\n                                            </v-col>\n                                        </v-row>\n                                    </v-list-item>\n                                </template>\n                            </draggable>\n                        </v-list>\n                    </v-card>\n                </v-col>\n                <v-col class=\"col-12 col-md-6\">\n                    <v-card class=\"mx-auto\" max-width=\"300\" tile >\n                        <v-list dense>\n                            <draggable v-model=\"desktopLayout2\" :handle=\"isMobile ? '.handle' : ''\" class=\"v-list-item-group\" ghost-class=\"ghost\" group=\"desktopViewport\">\n                                <template v-for=\"(element) in desktopLayout2\">\n                                    <v-list-item :key=\"'item-desktop-'+element.name\" link>\n                                        <v-row>\n                                            <v-col class=\"col-auto pr-0\">\n                                                <v-icon v-if=\"isMobile\" class=\"handle\">mdi-arrow-up-down</v-icon>\n                                                <v-icon v-else v-text=\"convertPanelnameToIcon(element.name)\"></v-icon>\n                                            </v-col>\n                                            <v-col class=\"pr-0\">\n                                                {{ getPanelName(element.name) }}\n                                            </v-col>\n                                            <v-col class=\"col-auto pl-0\">\n                                                <v-icon v-if=\"!element.visible\" color=\"grey lighten-1\" @click.stop=\"changeState2(element.name,true)\">mdi-checkbox-blank-outline</v-icon>\n                                                <v-icon v-else color=\"primary\" @click.stop=\"changeState2(element.name,false)\">mdi-checkbox-marked</v-icon>\n                                            </v-col>\n                                        </v-row>\n                                    </v-list-item>\n                                </template>\n                            </draggable>\n                        </v-list>\n                    </v-card>\n                </v-col>\n            </v-row>\n            <v-row>\n                <v-col class=\"text-center\">\n                    <v-btn color=\"error\" @click=\"resetLayout\">{{ $t('Settings.DashboardTab.ResetLayout') }}</v-btn>\n                </v-col>\n            </v-row>\n        </v-card-text>\n    </v-card>\n</template>\n\n<script lang=\"ts\">\nimport Component from 'vue-class-component'\nimport { Mixins } from 'vue-property-decorator'\nimport draggable from 'vuedraggable'\nimport {capitalize, convertPanelnameToIcon} from '@/plugins/helpers'\nimport DashboardMixin from '@/components/mixins/dashboard'\n@Component( {\n    components: {\n        draggable\n    }\n}\n)\nexport default class SettingsDashboardTabDesktop extends Mixins(DashboardMixin) {\n    capitalize = capitalize\n    convertPanelnameToIcon = convertPanelnameToIcon\n\n    get desktopLayout1() {\n        let panels = this.$store.getters['gui/getPanels']('desktopLayout1')\n        panels = panels.concat(this.missingPanelsDesktop)\n\n        return panels\n    }\n\n    set desktopLayout1(newVal) {\n        newVal = newVal.filter((element: any) => element !== undefined)\n\n        this.$store.dispatch('gui/saveSetting', {name: 'dashboard.desktopLayout1', value: newVal })\n    }\n\n    get desktopLayout2() {\n        return this.$store.getters['gui/getPanels']('desktopLayout2')\n    }\n\n    set desktopLayout2(newVal) {\n        newVal = newVal.filter((element: any) => element !== undefined)\n\n        this.$store.dispatch('gui/saveSetting', {name: 'dashboard.desktopLayout2', value: newVal })\n    }\n\n    changeState1(name: string, newVal: boolean) {\n        const index = this.desktopLayout1.findIndex((element: any) => element.name === name)\n        if (index !== -1) {\n            this.desktopLayout1[index].visible = newVal\n            this.$store.dispatch('gui/saveSetting', {name: 'dashboard.desktopLayout1', value: this.desktopLayout1 })\n        }\n    }\n\n    changeState2(name: string, newVal: boolean) {\n        const index = this.desktopLayout2.findIndex((element: any) => element.name === name)\n        if (index !== -1) {\n            this.desktopLayout2[index].visible = newVal\n            this.$store.dispatch('gui/saveSetting', {name: 'dashboard.desktopLayout2', value: this.desktopLayout2 })\n        }\n    }\n\n    resetLayout() {\n        this.$store.dispatch('gui/resetLayout', 'desktopLayout1')\n        this.$store.dispatch('gui/resetLayout', 'desktopLayout2')\n    }\n}\n</script>"]}]}