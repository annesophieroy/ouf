{"remainingRequest":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/components/panels/Machine/UpdatePanel.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/components/panels/Machine/UpdatePanel.vue","mtime":1644874918000},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js","mtime":1645990064605},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/babel-loader/lib/index.js","mtime":1645990067759},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/ts-loader/index.js","mtime":1645990068168},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js","mtime":1645990064605},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1645990069130}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["UpdatePanel.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwfile":"UpdatePanel.vue","sourceRoot":"src/components/panels/Machine","sourcesContent":["<style lang=\"scss\" scoped>\n    .cursor--pointer {\n        cursor: pointer;\n    }\n\n    ul.commits {\n        list-style: none;\n\n        li {\n            border-color: rgb(48, 54, 61);\n            border-style: solid;\n            border-width: 1px;\n            border-bottom-width: 0;\n\n            &:first-child {\n                border-top-left-radius: 6px;\n                border-top-right-radius: 6px;\n            }\n\n            &:last-child {\n                border-bottom-width: 1px;\n                border-bottom-left-radius: 6px;\n                border-bottom-right-radius: 6px;\n            }\n        }\n    }\n</style>\n\n<style lang=\"scss\">\n    .v-timeline.groupedCommits {\n        .v-timeline-item__dot--small {\n            width: 18px;\n            height: 15px;\n            margin-top: 2px;\n\n            &:before {\n                display: block;\n                content: ' ';\n                position: relative;\n                width: 18px;\n                height: 2px;\n                top: 7px;\n                background: rgba(255, 255, 255, 0.50);\n                z-index: 1;\n            }\n        }\n\n        .v-timeline-item__inner-dot {\n            background-color: #1e1e1e !important;\n            border: 2px solid rgba(255, 255, 255, 0.50) !important;\n            width: 8px;\n            height: 8px;\n            position: relative;\n            z-index: 2;\n            margin-left: 5px;\n            margin-top: 2px;\n        }\n    }\n</style>\n\n<template>\n    <div>\n        <panel :title=\"$t('Machine.UpdatePanel.UpdateManager')\" v-if=\"enableUpdateManager\" icon=\"mdi-update\" card-class=\"machine-update-panel\" :collapsible=\"true\">\n            <template v-slot:buttons>\n                <v-tooltip top>\n                    <template v-slot:activator=\"{ on, attrs }\">\n                        <v-btn icon tile color=\"primary\" :ripple=\"true\" :loading=\"loadings.includes('loadingBtnSyncUpdateManager')\" :disabled=\"['printing', 'paused'].includes(printer_state)\" @click=\"btnSync\" v-bind=\"attrs\" v-on=\"on\"><v-icon>mdi-refresh</v-icon></v-btn>\n                    </template>\n                    <span>{{ $t('Machine.UpdatePanel.CheckForUpdates') }}</span>\n                </v-tooltip>\n            </template>\n            <v-card-text class=\"px-0 py-0\">\n                <v-container py-0 px-0>\n                    <div v-for=\"(value, key, index) of updateableSoftwares\" v-bind:key=\"key\">\n                        <v-divider class=\"my-0\" v-if=\"index\" ></v-divider>\n                        <v-row class=\"py-2\">\n                            <v-col class=\"pl-6\">\n                                <strong>{{ 'name' in value ? value.name : key }}</strong><br />\n                                <span @click=\"openCommitsOverlay(key, value)\" :class=\"getVersionClickable(value) ? 'primary--text cursor--pointer' : ''\"><v-icon v-if=\"getVersionClickable(value)\" small color=\"primary\" class=\"mr-1\">mdi-information</v-icon>{{ getVersionOutput(value) }}</span>\n                            </v-col>\n                            <v-col class=\"col-auto pr-6 text-right\" align-self=\"center\">\n                                <template v-if=\"getRecoveryOptions(value)\">\n                                    <v-menu :offset-y=\"true\" title=\"Webcam\">\n                                        <template v-slot:activator=\"{ on, attrs }\">\n                                            <v-chip\n                                                small\n                                                label\n                                                outlined\n                                                :color=\"getBtnColor(value)\"\n                                                :disabled=\"getBtnDisabled(value)\"\n                                                class=\"minwidth-0 px-2 text-uppercase\"\n                                                v-bind=\"attrs\" v-on=\"on\"\n                                            >\n                                                <v-icon small class=\"mr-1\">mdi-{{ getBtnIcon(value) }}</v-icon>\n                                                {{ getBtnText(value) }}\n                                                <v-icon small>mdi-menu-down</v-icon>\n                                            </v-chip>\n                                        </template>\n                                        <v-list dense class=\"py-0\">\n                                            <v-list-item @click=\"recovery(key, false)\">\n                                                <v-list-item-icon class=\"mr-0\">\n                                                    <v-icon small>mdi-reload</v-icon>\n                                                </v-list-item-icon>\n                                                <v-list-item-content>\n                                                    <v-list-item-title>Soft Recovery</v-list-item-title>\n                                                </v-list-item-content>\n                                            </v-list-item>\n                                            <v-list-item @click=\"recovery(key,true)\">\n                                                <v-list-item-icon class=\"mr-0\">\n                                                    <v-icon small>mdi-reload</v-icon>\n                                                </v-list-item-icon>\n                                                <v-list-item-content>\n                                                    <v-list-item-title>Hard Recovery</v-list-item-title>\n                                                </v-list-item-content>\n                                            </v-list-item>\n                                        </v-list>\n                                    </v-menu>\n                                </template>\n                                <template v-else>\n                                    <v-chip\n                                        small\n                                        label\n                                        outlined\n                                        :color=\"getBtnColor(value)\"\n                                        @click=\"updateModule(key)\"\n                                        :disabled=\"getBtnDisabled(value)\"\n                                        class=\"minwidth-0 px-2 text-uppercase\"\n                                    ><v-icon small class=\"mr-1\">mdi-{{ getBtnIcon(value) }}</v-icon>{{ getBtnText(value) }}</v-chip>\n                                </template>\n                            </v-col>\n                        </v-row>\n                    </div>\n                    <template v-if=\"'system' in version_info\">\n                        <v-divider class=\"my-0 border-top-2\" ></v-divider>\n                        <v-row class=\"pt-2\">\n                            <v-col class=\"col-auto pl-6 text-no-wrap\">\n                                <strong>{{ $t('Machine.UpdatePanel.System') }}</strong><br />\n                                <v-tooltip top v-if=\"version_info.system.package_count > 0\" :max-width=\"300\">\n                                    <template v-slot:activator=\"{ on, attrs }\">\n                                        <span v-bind=\"attrs\" v-on=\"on\">{{ version_info.system.package_count }} {{ $t('Machine.UpdatePanel.PackagesCanBeUpgraded') }}</span>\n                                    </template>\n                                    <span>{{ version_info.system.package_list.join(', ') }}</span>\n                                </v-tooltip>\n                                <span v-if=\"version_info.system.package_count === 0\">{{ $t('Machine.UpdatePanel.OSPackages') }}</span>\n                            </v-col>\n                            <v-col class=\"pr-6 text-right\" align-self=\"center\">\n                                <v-chip\n                                    small\n                                    label\n                                    outlined\n                                    :color=\"version_info.system.package_count ? 'primary' : 'green'\"\n                                    :disabled=\"!(version_info.system.package_count) || printer_state === 'printing'\"\n                                    @click=\"updateSystem\"\n                                    class=\"minwidth-0 px-2 text-uppercase\"\n                                ><v-icon small class=\"mr-1\">mdi-{{ version_info.system.package_count ? 'progress-upload' : 'check' }}</v-icon>{{ version_info.system.package_count ? $t('Machine.UpdatePanel.Upgrade') : $t('Machine.UpdatePanel.UpToDate') }}</v-chip>\n                            </v-col>\n                        </v-row>\n                    </template>\n                    <template v-if=\"showUpdateAll\">\n                        <v-divider class=\"mb-0 mt-2 border-top-2\" ></v-divider>\n                        <v-row class=\"pt-3\">\n                            <v-col class=\"text-center\">\n                                <v-btn text color=\"primary\" small @click=\"updateAll\" :disabled=\"['printing', 'paused'].includes(this.printer_state)\">\n                                    <v-icon left>mdi-progress-upload</v-icon>\n                                    {{ $t('Machine.UpdatePanel.UpdateAll') }}\n                                </v-btn>\n                            </v-col>\n                        </v-row>\n                    </template>\n                </v-container>\n            </v-card-text>\n        </panel>\n        <v-dialog v-model=\"commitsOverlay.bool\" persistent max-width=\"800\">\n            <panel :title=\"$t('Machine.UpdatePanel.Commits')\" icon=\"mdi-update\" :margin-bottom=\"false\" card-class=\"machine-update-commits-dialog\">\n                <template v-slot:buttons>\n                    <v-btn icon tile @click=\"commitsOverlay.bool = false\"><v-icon>mdi-close-thick</v-icon></v-btn>\n                </template>\n                <v-card-text class=\"py-0 px-0\">\n                    <overlay-scrollbars style=\"max-height: 400px;\" :options=\"{ overflowBehavior: { x: 'hidden' } }\">\n                        <v-row>\n                            <v-col class=\"pt-3 pl-0\">\n                                <v-timeline class=\"groupedCommits\" align-top dense >\n                                    <v-timeline-item small v-for=\"group of commitsOverlay.groupedCommits\" v-bind:key=\"group.date.getTime()\">\n                                        <v-row class=\"pt-0\">\n                                            <v-col class=\"pr-12\">\n                                                <h3 class=\"caption\">{{ $t('Machine.UpdatePanel.CommitsOnDate', {date : new Date(group.date).toLocaleDateString(language, dateOptions) }) }}</h3>\n                                                <ul class=\"commits mt-3 pl-0\">\n                                                    <li class=\"commit px-3 py-2\" v-for=\"commit of group.commits\" v-bind:key=\"commit.sha\">\n                                                        <v-row>\n                                                            <v-col>\n                                                                <h4 class=\"subtitle-2 text--white mb-0\" >{{ commit.subject }}<v-chip outlined label x-small class=\"ml-2 px-2\" v-if=\"!openCommits.includes(commit.sha)\" @click=\"openCommits.push(commit.sha)\"><v-icon small>mdi-dots-horizontal</v-icon></v-chip></h4>\n                                                                <p v-if=\"openCommits.includes(commit.sha)\" class=\"caption text--secondary mb-2\" style=\"white-space: pre-line;\" v-html=\"commit.message\"></p>\n                                                                <p class=\"caption mb-0\"><span class=\"font-weight-bold text-decoration-none white--text\">{{ commit.author}}</span> <span>{{ convertCommitDate(commit.date) }}</span></p>\n                                                            </v-col>\n                                                            <v-col class=\"col-auto pt-4 \">\n                                                                <v-chip outlined label small :href=\"'https://github.com/'+commitsOverlay.owner+'/'+commitsOverlay.repoName+'/commit/'+commit.sha\" target=\"_blank\">{{ commit.sha.substr(0, 6)}}</v-chip>\n                                                            </v-col>\n                                                        </v-row>\n                                                    </li>\n                                                </ul>\n                                            </v-col>\n                                        </v-row>\n                                    </v-timeline-item>\n                                </v-timeline>\n                            </v-col>\n                        </v-row>\n                    </overlay-scrollbars>\n                </v-card-text>\n            </panel>\n        </v-dialog>\n    </div>\n</template>\n\n<script lang=\"ts\">\n\n\nimport {Component, Mixins} from 'vue-property-decorator'\nimport BaseMixin from '../../mixins/base'\nimport semver from 'semver'\nimport Panel from '@/components/ui/Panel.vue'\nimport {ServerUpdateMangerStateVersionInfoGitRepoCommits} from '@/store/server/updateManager/types'\nimport VueI18n from 'vue-i18n'\nimport DateTimeFormatOptions = VueI18n.DateTimeFormatOptions\n\ninterface groupedCommit {\n    date: Date,\n    commits: ServerUpdateMangerStateVersionInfoGitRepoCommits[]\n}\n\ninterface commitsOverlay {\n    bool: boolean\n    owner: string\n    modul: string\n    repoName: string\n    commits: ServerUpdateMangerStateVersionInfoGitRepoCommits[]\n    groupedCommits: groupedCommit[]\n}\n\n@Component({\n    components: {Panel}\n})\nexport default class UpdatePanel extends Mixins(BaseMixin) {\n    private openCommits: string[] = []\n\n    private dateOptions: DateTimeFormatOptions = {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric'\n    }\n\n    private commitsOverlay: commitsOverlay = {\n        bool: false,\n        owner: '',\n        modul: '',\n        repoName: '',\n        commits: [],\n        groupedCommits: []\n    }\n\n    get language() {\n        return this.$store.state.gui.general.language ?? 'en'\n    }\n\n    get enableUpdateManager() {\n        return this.$store.state.server.components.includes('update_manager')\n    }\n\n    get version_info() {\n        return this.$store.state.server.updateManager.version_info\n    }\n\n    get updateableSoftwares() {\n        return this.$store.getters['server/updateManager/getUpdateableSoftwares']\n    }\n\n    get showUpdateAll() {\n        let updateableModuls = 0\n\n        Object.keys(this.updateableSoftwares).forEach((modulename) => {\n            const module = this.updateableSoftwares[modulename]\n            if (\n                'version' in module &&\n                'remote_version' in module &&\n                semver.valid(module.remote_version) &&\n                semver.valid(module.version) &&\n                semver.gt(module.remote_version, module.version)\n            ) updateableModuls++\n        })\n\n        if (this.version_info?.system?.package_count > 0) updateableModuls++\n        return (updateableModuls > 1)\n    }\n\n    btnSync() {\n        this.$socket.emit('machine.update.status', { refresh: true }, { action: 'server/updateManager/getStatus', loading: 'loadingBtnSyncUpdateManager' })\n    }\n\n    getBtnColor(object: any) {\n        if (typeof object === 'object' && object !== false) {\n            if (\n                'debug_enabled' in object &&\n                !object.debug_enabled &&\n                'detached' in object &&\n                object.detached\n            ) return 'orange'\n            if ('is_dirty' in object && object.is_dirty) return 'orange'\n            if ('is_valid' in object && !object.is_valid) return 'red'\n\n            if (\n                'version' in object &&\n                'remote_version' in object &&\n                semver.valid(object.remote_version) &&\n                semver.valid(object.version) &&\n                semver.gt(object.remote_version, object.version)\n            ) return 'primary'\n\n            if ((object.commits_behind ?? []).length) return 'primary'\n\n            if (\n                'version' in object &&\n                'remote_version' in object && (\n                    object.version === '?' || object.remote_version === '?'\n                )\n            ) return 'gray'\n\n            return 'green'\n        }\n\n        return 'red'\n    }\n\n    getBtnText(object: any) {\n        if (typeof object === 'object' && object !== false) {\n            if (\n                'debug_enabled' in object &&\n                !object.debug_enabled &&\n                'detached' in object &&\n                object.detached\n            ) return this.$t('Machine.UpdatePanel.Detached')\n            if ('is_valid' in object && !object.is_valid) return this.$t('Machine.UpdatePanel.Invalid')\n            if ('is_dirty' in object && object.is_dirty) return this.$t('Machine.UpdatePanel.Dirty')\n\n            if (\n                'version' in object &&\n                'remote_version' in object &&\n                semver.valid(object.remote_version) &&\n                semver.valid(object.version) &&\n                semver.gt(object.remote_version, object.version)\n            ) return this.$t('Machine.UpdatePanel.Update')\n\n            if ((object.commits_behind ?? []).length) return this.$t('Machine.UpdatePanel.Update')\n\n            if (\n                'version' in object &&\n                'remote_version' in object && (\n                    object.version === '?' || object.remote_version === '?'\n                )\n            ) return this.$t('Machine.UpdatePanel.Unknown')\n\n            return this.$t('Machine.UpdatePanel.UpToDate')\n        }\n\n        return this.$t('Machine.UpdatePanel.ERROR')\n    }\n\n    getBtnIcon(object: any) {\n        if (typeof object === 'object' && object !== false) {\n            if (\n                'debug_enabled' in object &&\n                !object.debug_enabled &&\n                'detached' in object &&\n                object.detached\n            ) return 'alert-circle'\n            if ('is_valid' in object && !object.is_valid) return 'alert-circle'\n            if ('is_dirty' in object && object.is_dirty) return 'alert-circle'\n\n            if (\n                'version' in object &&\n                'remote_version' in object &&\n                semver.valid(object.remote_version) &&\n                semver.valid(object.version) &&\n                semver.gt(object.remote_version, object.version)\n            ) return 'progress-upload'\n\n            if ((object.commits_behind ?? []).length) return 'progress-upload'\n\n            if (\n                'version' in object &&\n                'remote_version' in object && (\n                    object.version === '?' || object.remote_version === '?'\n                )\n            ) return 'help-circle-outline'\n\n            return 'check'\n        }\n\n        return 'ERROR'\n    }\n\n    getBtnDisabled(object: any) {\n        if (['printing', 'paused'].includes(this.printer_state)) return true\n\n        if ('is_valid' in object && !object.is_valid) return false\n        if ('is_dirty' in object && object.is_dirty) return false\n\n        if (typeof object === 'object' && object !== false) {\n            if ((object.commits_behind ?? []).length) return false\n\n            if (\n                'version' in object &&\n                'remote_version' in object &&\n                semver.valid(object.remote_version) &&\n                semver.valid(object.version) &&\n                semver.gt(object.remote_version, object.version)\n            ) return false\n        }\n\n        return true\n    }\n\n    getVersionOutput(object: any) {\n        const local_version = object.version ?? '?'\n        const remote_version =  object.remote_version ?? '?'\n        const commits_behind = object.commits_behind ?? []\n\n        let output = ''\n        if ('remote_alias' in object && object.remote_alias !== 'origin') output += object.remote_alias\n        if ('branch' in object && !['master', 'main'].includes(object.branch)) {\n            if (output !== '') output += '/'\n\n            output += object.branch\n        }\n        if (output !== '') output += ': '\n\n        if (semver.valid(remote_version) && semver.valid(local_version) && semver.gt(remote_version, local_version))\n            output += local_version+' > '+remote_version\n        else if (commits_behind.length)\n            output += local_version+' > '+ this.$tc('Machine.UpdatePanel.CommitsAvailabe', commits_behind.length, { count: commits_behind.length })\n        else if ('full_version_string' in object && object.full_version_string !== '?')\n            output += object.full_version_string\n        else\n            output += local_version\n\n        return output\n    }\n\n    getVersionClickable(object: any) {\n        return (\n            'commits_behind' in object &&\n            object.commits_behind.length\n        )\n    }\n\n    getRecoveryOptions(object: any) {\n        if ('is_valid' in object && !object.is_valid) return true\n        else if ('is_dirty' in object && object.is_dirty) return true\n\n        return false\n    }\n\n    updateAll() {\n        this.$socket.emit('machine.update.full', {  })\n    }\n\n    updateModule(key: string) {\n        if (['klipper', 'moonraker'].includes(key)) this.$socket.emit('machine.update.'+key, { })\n        else this.$socket.emit('machine.update.client', { name: key })\n    }\n\n    recovery(name: string, hard: boolean) {\n        this.$socket.emit('machine.update.recover', { name: name, hard: hard })\n    }\n\n    updateSystem() {\n        this.$socket.emit('machine.update.system', { })\n    }\n\n    openCommitsOverlay(key: string, object: any) {\n        if (\n            'commits_behind' in object &&\n            'owner' in object &&\n            object.commits_behind.length\n        ) {\n            this.openCommits = []\n            this.commitsOverlay.owner = object.owner\n            this.commitsOverlay.modul = key\n            this.commitsOverlay.repoName = object.repo_name ?? key\n            this.commitsOverlay.commits = object.commits_behind\n            this.commitsOverlay.groupedCommits = []\n\n            let lastDate: null | Date = null\n            let tmpCommits: ServerUpdateMangerStateVersionInfoGitRepoCommits[] = []\n\n            object.commits_behind.forEach((commit: any) => {\n                const commitDate = new Date(commit.date * 1000)\n                if (lastDate === null ||\n                    commitDate.getFullYear() !== lastDate.getFullYear() ||\n                    commitDate.getMonth() !== lastDate.getMonth() ||\n                    commitDate.getDay() !== lastDate.getDay()\n                ) {\n\n                    if (tmpCommits.length && lastDate !== null) {\n                        this.commitsOverlay.groupedCommits.push({\n                            date: lastDate,\n                            commits: [...tmpCommits]\n                        })\n                    }\n\n                    lastDate = commitDate\n                    tmpCommits = []\n                }\n\n                tmpCommits.push(commit)\n            })\n\n            if (lastDate && tmpCommits.length) {\n                this.commitsOverlay.groupedCommits.push({\n                    date: lastDate,\n                    commits: [...tmpCommits]\n                })\n            }\n\n            this.commitsOverlay.bool = true\n        }\n    }\n\n    convertCommitDate(timestamp: number) {\n        const commitDay = new Date(timestamp * 1000)\n        commitDay.setHours(0,0,0,0)\n        const todayDay = new Date()\n        todayDay.setHours(0,0,0,0)\n        const diff = Math.floor(todayDay.getTime() - commitDay.getTime()) / (1000 * 60 * 60 * 24)\n\n        if (diff === 0) {\n            const diffHours = Math.floor(((new Date()).getTime() - timestamp * 1000) / (1000 * 60 * 60))\n\n            return this.$t('Machine.UpdatePanel.CommittedHoursAgo', { hours: diffHours })\n        }\n        else if (diff === 1) return this.$t('Machine.UpdatePanel.CommittedYesterday')\n        else if (diff < 29) return this.$t('Machine.UpdatePanel.CommittedDaysAgo', { days: diff })\n        else return this.$t('Machine.UpdatePanel.CommittedOnDate', { date: commitDay.toLocaleDateString(this.language, this.dateOptions) })\n    }\n}\n</script>"]}]}