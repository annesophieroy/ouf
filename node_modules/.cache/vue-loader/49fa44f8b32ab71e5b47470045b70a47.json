{"remainingRequest":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/components/panels/GcodefilesPanel.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/components/panels/GcodefilesPanel.vue","mtime":1644874918000},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js","mtime":1645990064605},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/babel-loader/lib/index.js","mtime":1645990067759},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/ts-loader/index.js","mtime":1645990068168},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js","mtime":1645990064605},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1645990069130}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["GcodefilesPanel.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAifile":"GcodefilesPanel.vue","sourceRoot":"src/components/panels","sourcesContent":["<style scoped>\n.v-data-table .v-data-table-header__icon {\n    margin-left: 7px;\n}\n\n.v-data-table th {\n    white-space: nowrap;\n}\n\n.v-data-table .file-list-cursor:hover {\n    cursor: pointer;\n}\n\n.fileupload-card {\n    position: relative;\n}\n\n.dragzone {\n    position: absolute;\n    top: 0; left: 0; right: 0; bottom: 0;\n    height: 100%;\n    z-index: 9999999999;\n    background-color: rgba(0, 0, 0, 0.5);\n    transition: visibility 175ms, opacity 175ms;\n    font: bold 42px Oswald, DejaVu Sans, Tahoma, sans-serif;\n}\n\n.dragzone:before {\n    display: block;\n    content: ' ';\n    position: absolute;\n    top: 15px; right: 15px; bottom: 15px; left: 15px;\n    border: 3px dashed white;\n    border-radius: 15px;\n}\n\n.dragzone .textnode {\n    text-align: center;\n    transition: font-size 175ms;\n}\n</style>\n\n<template>\n    <div\n        @dragover=\"dragOverUpload\"\n        @dragleave=\"dragLeaveUpload\"\n        @drop.prevent.stop=\"dragDropUpload\"\n    >\n        <panel\n            :title=\"$t('Files.GCodeFiles')\"\n            icon=\"mdi-file-document-multiple-outline\"\n            card-class=\"gcode-files-panel\"\n        >\n            <v-card-text>\n                <v-row>\n                    <v-col class=\"col-12 d-flex align-center\">\n                        <v-text-field\n                            v-model=\"search\"\n                            append-icon=\"mdi-magnify\"\n                            :label=\"$t('Files.Search')\"\n                            single-line\n                            outlined\n                            clearable\n                            hide-details\n                            dense\n                            style=\"max-width: 300px;\"\n                        ></v-text-field>\n                        <v-spacer></v-spacer>\n                        <input type=\"file\" ref=\"fileUpload\" :accept=\"validGcodeExtensions.join(', ')\" style=\"display: none\" multiple @change=\"uploadFile\" />\n                        <v-btn @click=\"clickUploadButton\" :title=\"$t('Files.UploadNewGcode')\" class=\"primary--text px-2 minwidth-0 ml-3\" :loading=\"loadings.includes('gcodeUpload')\"><v-icon>mdi-upload</v-icon></v-btn>\n                        <v-btn @click=\"createDirectory\" :title=\"$t('Files.CreateNewDirectory')\" class=\"px-2 minwidth-0 ml-3\"><v-icon>mdi-folder-plus</v-icon></v-btn>\n                        <v-btn @click=\"refreshFileList\" :title=\"$t('Files.RefreshCurrentDirectory')\" class=\"px-2 minwidth-0 ml-3\"><v-icon>mdi-refresh</v-icon></v-btn>\n                        <v-menu offset-y left :close-on-content-click=\"false\" :title=\"$t('Files.SetupCurrentList')\">\n                            <template v-slot:activator=\"{ on, attrs }\">\n                                <v-btn class=\"px-2 minwidth-0 ml-3\" v-bind=\"attrs\" v-on=\"on\"><v-icon>mdi-cog</v-icon></v-btn>\n                            </template>\n                            <v-list>\n                                <v-list-item class=\"minHeight36\">\n                                    <v-checkbox class=\"mt-0\" hide-details v-model=\"showHiddenFiles\" :label=\"$t('Files.HiddenFiles')\"></v-checkbox>\n                                </v-list-item>\n                                <v-list-item class=\"minHeight36\">\n                                    <v-checkbox class=\"mt-0\" hide-details v-model=\"showPrintedFiles\" :label=\"$t('Files.PrintedFiles')\"></v-checkbox>\n                                </v-list-item>\n                                <v-divider></v-divider>\n                                <v-list-item class=\"minHeight36\" v-for=\"header of configHeaders\" v-bind:key=\"header.key\">\n                                    <v-checkbox class=\"mt-0\" hide-details v-model=\"header.visible\" @change=\"changeMetadataVisible(header.value)\" :label=\"header.text\"></v-checkbox>\n                                </v-list-item>\n                            </v-list>\n                        </v-menu>\n                    </v-col>\n                </v-row>\n            </v-card-text>\n            <v-card-text>\n                <v-row>\n                    <v-col class=\"col-12 py-2 d-flex align-center\">\n                        <span><b>{{ $t('Files.CurrentPath') }}:</b> {{ this.currentPath !== 'gcodes' ? \"/\"+this.currentPath.substring(7) : \"/\" }}</span>\n                        <v-spacer></v-spacer>\n                        <template v-if=\"this.disk_usage !== null\">\n                            <v-tooltip top>\n                                <template v-slot:activator=\"{ on, attrs }\">\n                                    <span v-bind=\"attrs\" v-on=\"on\">\n                                        <b>{{ $t('Files.FreeDisk') }}:</b> {{ formatFilesize(disk_usage.free) }}\n                                    </span>\n                                </template>\n                                <span>\n                                    {{ $t('Files.Used') }}: {{ formatFilesize(this.disk_usage.used) }}<br />\n                                    {{ $t('Files.Free') }}: {{ formatFilesize(this.disk_usage.free) }}<br />\n                                    {{ $t('Files.Total') }}: {{ formatFilesize(this.disk_usage.total) }}\n                                </span>\n                            </v-tooltip>\n                        </template>\n                    </v-col>\n                </v-row>\n            </v-card-text>\n            <v-divider class=\"mb-3\"></v-divider>\n            <v-data-table\n                :items=\"files\"\n                class=\"files-table\"\n                :headers=\"filteredHeaders\"\n                :custom-sort=\"sortFiles\"\n                :sort-by.sync=\"sortBy\"\n                :sort-desc.sync=\"sortDesc\"\n                :items-per-page.sync=\"countPerPage\"\n                :footer-props=\"{\n                    itemsPerPageText: $t('Files.Files'),\n                    itemsPerPageAllText: $t('Files.AllFiles'),\n                    itemsPerPageOptions: [10,25,50,100,-1]\n                }\"\n                item-key=\"name\"\n                :search=\"search\"\n                :custom-filter=\"advancedSearch\"\n                mobile-breakpoint=\"0\"\n                @current-items=\"refreshMetadata\"\n            >\n\n                <template slot=\"items\">\n                    <td v-for=\"header in filteredHeaders\" v-bind:key=\"header.value\">{{ header.text }}</td>\n                </template>\n\n                <template #no-data>\n                    <div class=\"text-center\">{{ $t('Files.Empty') }}</div>\n                </template>\n\n                <template slot=\"body.prepend\" v-if=\"(currentPath !== 'gcodes')\">\n                    <tr\n                        class=\"file-list-cursor\"\n                        @click=\"clickRowGoBack\"\n                        @dragover=\"dragOverFilelist($event, {isDirectory: true, filename: '..'})\" @dragleave=\"dragLeaveFilelist\" @drop.prevent.stop=\"dragDropFilelist($event, {isDirectory: true, filename: '..'})\"\n                    >\n                        <td class=\"pr-0 text-center\" style=\"width: 32px;\"><v-icon>mdi-folder-upload</v-icon></td>\n                        <td class=\" \" :colspan=\"filteredHeaders.length\">..</td>\n                    </tr>\n                </template>\n\n                <template #item=\"{ index, item }\">\n                    <tr\n                        :key=\"`${index} ${item.filename}`\"\n                        v-longpress:600=\"(e) => showContextMenu(e, item)\"\n                        @contextmenu=\"showContextMenu($event, item)\"\n                        @click=\"clickRow(item)\"\n                        class=\"file-list-cursor user-select-none\"\n                        draggable=\"true\"\n                        @drag=\"dragFile($event, item)\"\n                        @dragend=\"dragendFile($event)\"\n                        @dragover=\"dragOverFilelist($event, item)\" @dragleave=\"dragLeaveFilelist\" @drop.prevent.stop=\"dragDropFilelist($event, item)\"\n                        :data-name=\"item.filename\"\n                    >\n                        <td class=\"pr-0 text-center\" style=\"width: 32px;\">\n                            <template v-if=\"item.isDirectory\">\n                                <v-icon>mdi-folder</v-icon>\n                            </template>\n                            <template v-else>\n                                <template v-if=\"getSmallThumbnail(item) && getBigThumbnail(item)\">\n                                    <v-tooltip v-if=\"!item.isDirectory && getSmallThumbnail(item) && getBigThumbnail(item)\" top content-class=\"tooltip__content-opacity1\">\n                                        <template v-slot:activator=\"{ on, attrs }\">\n                                            <vue-load-image>\n                                                <img slot=\"image\" :src=\"getSmallThumbnail(item)\" width=\"32\" height=\"32\" v-bind=\"attrs\" v-on=\"on\" />\n                                                <v-progress-circular slot=\"preloader\" indeterminate color=\"primary\"></v-progress-circular>\n                                                <v-icon slot=\"error\">mdi-file</v-icon>\n                                            </vue-load-image>\n                                        </template>\n                                        <span><img :src=\"getBigThumbnail(item)\" width=\"250\" /></span>\n                                    </v-tooltip>\n                                </template>\n                                <template v-else-if=\"getSmallThumbnail(item)\">\n                                    <vue-load-image>\n                                        <img slot=\"image\" :src=\"getSmallThumbnail(item)\" width=\"32\" height=\"32\" />\n                                        <v-progress-circular slot=\"preloader\" indeterminate color=\"primary\"></v-progress-circular>\n                                        <v-icon slot=\"error\">mdi-file</v-icon>\n                                    </vue-load-image>\n                                </template>\n                                <template v-else>\n                                    <v-icon>mdi-file</v-icon>\n                                </template>\n                            </template>\n                        </td>\n                        <td class=\" \">{{ item.filename }}</td>\n                        <td class=\"text-center\">\n                            <v-tooltip top  v-if=\"getJobStatus(item)\">\n                                <template v-slot:activator=\"{ on, attrs }\">\n                                    <span v-bind=\"attrs\" v-on=\"on\">\n                                        <v-icon small :color=\"getStatusColor(getJobStatus(item))\">{{ getStatusIcon(getJobStatus(item)) }}</v-icon>\n                                    </span>\n                                </template>\n                                <span>{{ getJobStatus(item).replace(/_/g, \" \") }}</span>\n                            </v-tooltip>\n                        </td>\n                        <td class=\"text-no-wrap text-right\" v-if=\"headers.find(header => header.value === 'size').visible\">{{ item.isDirectory ? '--' : formatFilesize(item.size) }}</td>\n                        <td class=\"text-right\" v-if=\"headers.find(header => header.value === 'modified').visible\">{{ formatDate(item.modified) }}</td>\n                        <td class=\"text-no-wrap text-right\" v-if=\"headers.find(header => header.value === 'object_height').visible\">{{ item.object_height ? item.object_height.toFixed(2)+' mm' : '--' }}</td>\n                        <td class=\"text-no-wrap text-right\" v-if=\"headers.find(header => header.value === 'layer_height').visible\">{{ item.layer_height ? item.layer_height.toFixed(2)+' mm' : '--' }}</td>\n                        <td class=\"text-no-wrap text-right\" v-if=\"headers.find(header => header.value === 'nozzle_diameter').visible\">{{ item.nozzle_diameter ? item.nozzle_diameter.toFixed(2)+' mm' : '--' }}</td>\n                        <td class=\"text-no-wrap text-right\" v-if=\"headers.find(header => header.value === 'filament_name').visible\">{{ item.filament_name ? item.filament_name : '--' }}</td>\n                        <td class=\"text-no-wrap text-right\" v-if=\"headers.find(header => header.value === 'filament_type').visible\">{{ item.filament_type ? item.filament_type : '--' }}</td>\n                        <td class=\"text-no-wrap text-right\" v-if=\"headers.find(header => header.value === 'filament_total').visible\">{{ item.filament_total ? item.filament_total.toFixed()+' mm' : '--' }}</td>\n                        <td class=\"text-no-wrap text-right\" v-if=\"headers.find(header => header.value === 'filament_weight_total').visible\">{{ item.filament_weight_total ? item.filament_weight_total.toFixed(2)+' g' : '--' }}</td>\n                        <td class=\"text-no-wrap text-right\" v-if=\"headers.find(header => header.value === 'estimated_time').visible\">{{ formatPrintTime(item.estimated_time) }}</td>\n                        <td class=\"text-no-wrap text-right\" v-if=\"headers.find(header => header.value === 'slicer').visible\">{{ item.slicer ? item.slicer : '--' }}<br /><small v-if=\"item.slicer_version\">{{ item.slicer_version}}</small></td>\n                    </tr>\n                </template>\n            </v-data-table>\n            <div class=\"dragzone d-flex justify-center flex-column\" :style=\"'visibility: '+dropzone.visibility+'; opacity: '+dropzone.hidden\">\n                <div class=\"textnode\">{{ $t('Files.DropFilesToAddGcode')}}</div>\n            </div>\n        </panel>\n        <v-snackbar\n            :timeout=\"-1\"\n            :value=\"true\"\n            fixed\n            right\n            bottom\n            dark\n            v-model=\"uploadSnackbar.status\"\n        >\n            <span v-if=\"uploadSnackbar.max > 1\" class=\"mr-1\">({{ uploadSnackbar.number }}/{{ uploadSnackbar.max }})</span><strong>{{ $t(\"Files.Uploading\") + \" \" + uploadSnackbar.filename }}</strong><br />\n            {{ Math.round(uploadSnackbar.percent) }} % @ {{ formatFilesize(Math.round(uploadSnackbar.speed)) }}/s<br />\n            <v-progress-linear class=\"mt-2\" :value=\"uploadSnackbar.percent\"></v-progress-linear>\n            <template v-slot:action=\"{ attrs }\">\n                <v-btn\n                    color=\"red\"\n                    text\n                    v-bind=\"attrs\"\n                    @click=\"cancelUpload\"\n                    style=\"min-width: auto;\"\n                >\n                    <v-icon class=\"0\">mdi-close</v-icon>\n                </v-btn>\n            </template>\n        </v-snackbar>\n        <v-dialog v-model=\"dialogPrintFile.show\" :max-width=\"getThumbnailWidth(dialogPrintFile.item)\">\n            <v-card>\n                <v-img\n                    contain\n                    v-if=\"getBigThumbnail(dialogPrintFile.item)\"\n                    :src=\"getBigThumbnail(dialogPrintFile.item)\"\n                ></v-img>\n                <v-card-title class=\"headline\">{{ $t('Files.StartJob') }}</v-card-title>\n                <v-card-text class=\"pb-0\">{{ $t('Files.DoYouWantToStartFilename', {'filename': dialogPrintFile.item.filename}) }}</v-card-text>\n                <template v-if=\"moonrakerComponents.includes('timelapse')\">\n                    <v-divider class=\"mt-3 mb-2\"></v-divider>\n                    <v-card-text class=\"pb-0\">\n                        <settings-row title=\"Timelapse\">\n                            <v-switch v-model=\"timelapseEnabled\" hide-details class=\"mt-0\"></v-switch>\n                        </settings-row>\n                    </v-card-text>\n                    <v-divider class=\"mt-2 mb-0\"></v-divider>\n                </template>\n                <v-card-actions>\n                    <v-spacer></v-spacer>\n                    <v-btn color=\"\" text @click=\"dialogPrintFile.show = false\">{{ $t('Files.Cancel')}}</v-btn>\n                    <v-btn color=\"primary\" text @click=\"startPrint(dialogPrintFile.item.filename)\" :disabled=\"printerIsPrinting || !klipperReadyForGui\">{{$t('Files.StartPrint')}}</v-btn>\n                </v-card-actions>\n            </v-card>\n        </v-dialog>\n        <v-menu v-model=\"contextMenu.shown\" :position-x=\"contextMenu.x\" :position-y=\"contextMenu.y\" absolute offset-y>\n            <v-list>\n                <v-list-item @click=\"clickRow(contextMenu.item, true)\" :disabled=\"printerIsPrinting || !klipperReadyForGui || !isGcodeFile(contextMenu.item)\" v-if=\"!contextMenu.item.isDirectory\">\n                    <v-icon class=\"mr-1\">mdi-play</v-icon> {{ $t('Files.PrintStart')}}\n                </v-list-item>\n                <v-list-item @click=\"addToQueue(contextMenu.item)\" v-if=\"!contextMenu.item.isDirectory && moonrakerComponents.includes('job_queue')\" :disabled=\"!isGcodeFile(contextMenu.item)\">\n                    <v-icon class=\"mr-1\">mdi-playlist-plus</v-icon> {{ $t('Files.AddToQueue')}}\n                </v-list-item>\n                <v-list-item\n                    @click=\"preheat\"\n                    v-if=\"\n                        'first_layer_extr_temp' in contextMenu.item &&\n                        contextMenu.item.first_layer_extr_temp > 0 &&\n                        'first_layer_bed_temp' in contextMenu.item &&\n                        contextMenu.item.first_layer_bed_temp > 0\n                    \"\n                    :disabled=\"['error', 'printing', 'paused'].includes(printer_state)\"\n                >\n                    <v-icon class=\"mr-1\">mdi-fire</v-icon> {{ $t('Files.Preheat')}}\n                </v-list-item>\n                <v-list-item @click=\"view3D(contextMenu.item)\" v-if=\"!contextMenu.item.isDirectory\" :disabled=\"!isGcodeFile(contextMenu.item)\">\n                    <v-icon class=\"mr-1\">mdi-video-3d</v-icon>\n                    {{ $t('Files.View3D') }}\n                </v-list-item>\n                <v-list-item @click=\"downloadFile\" v-if=\"!contextMenu.item.isDirectory\">\n                    <v-icon class=\"mr-1\">mdi-cloud-download</v-icon> {{ $t('Files.Download')}}\n                </v-list-item>\n                <v-list-item @click=\"renameDirectory(contextMenu.item)\" v-if=\"contextMenu.item.isDirectory\">\n                    <v-icon class=\"mr-1\">mdi-rename-box</v-icon> {{ $t('Files.Rename')}}\n                </v-list-item>\n                <v-list-item @click=\"editFile(contextMenu.item)\" v-if=\"!contextMenu.item.isDirectory\">\n                    <v-icon class=\"mr-1\">mdi-pencil</v-icon> {{ $t('Files.EditFile') }}\n                </v-list-item>\n                <v-list-item @click=\"renameFile(contextMenu.item)\" v-if=\"!contextMenu.item.isDirectory\">\n                    <v-icon class=\"mr-1\">mdi-rename-box</v-icon> {{ $t('Files.Rename')}}\n                </v-list-item>\n                <v-list-item @click=\"removeFile\" v-if=\"!contextMenu.item.isDirectory\">\n                    <v-icon class=\"mr-1\">mdi-delete</v-icon> {{ $t('Files.Delete')}}\n                </v-list-item>\n                <v-list-item @click=\"deleteDirectory(contextMenu.item)\" v-if=\"contextMenu.item.isDirectory\">\n                    <v-icon class=\"mr-1\">mdi-delete</v-icon> {{ $t('Files.Delete')}}\n                </v-list-item>\n            </v-list>\n        </v-menu>\n        <v-dialog v-model=\"dialogCreateDirectory.show\" :max-width=\"400\">\n            <panel :title=\"$t('Files.NewDirectory')\" card-class=\"gcode-files-new-directory-dialog\" :margin-bottom=\"false\">\n                <template v-slot:buttons>\n                    <v-btn icon tile @click=\"dialogCreateDirectory.show = false\"><v-icon>mdi-close-thick</v-icon></v-btn>\n                </template>\n                <v-card-text>\n                    <v-text-field\n                        v-model=\"dialogCreateDirectory.name\"\n                        ref=\"inputFieldCreateDirectory\"\n                        @keypress.enter=\"createDirectoryAction\"\n                        :label=\"$t('Files.Name')\"\n                        :rules=\"input_rules\"\n                        required\n                    ></v-text-field>\n                </v-card-text>\n                <v-card-actions>\n                    <v-spacer></v-spacer>\n                    <v-btn color=\"\" text @click=\"dialogCreateDirectory.show = false\">{{ $t('Files.Cancel') }}</v-btn>\n                    <v-btn color=\"primary\" text @click=\"createDirectoryAction\">{{ $t('Files.Create') }}</v-btn>\n                </v-card-actions>\n            </panel>\n        </v-dialog>\n        <v-dialog v-model=\"dialogRenameFile.show\" :max-width=\"400\">\n            <panel :title=\"$t('Files.RenameFile')\" card-class=\"gcode-files-rename-file-dialog\" :margin-bottom=\"false\">\n                <template v-slot:buttons>\n                    <v-btn icon tile @click=\"dialogRenameFile.show = false\"><v-icon>mdi-close-thick</v-icon></v-btn>\n                </template>\n                <v-card-text>\n                    <v-text-field\n                        v-model=\"dialogRenameFile.newName\"\n                        ref=\"inputFieldRenameFile\"\n                        @keyup.enter=\"renameFileAction\"\n                        :label=\"$t('Files.Name')\"\n                        required\n                    ></v-text-field>\n                </v-card-text>\n                <v-card-actions>\n                    <v-spacer></v-spacer>\n                    <v-btn color=\"\" text @click=\"dialogRenameFile.show = false\">{{ $t('Files.Cancel') }}</v-btn>\n                    <v-btn color=\"primary\" text @click=\"renameFileAction\">{{ $t('Files.Rename') }}</v-btn>\n                </v-card-actions>\n            </panel>\n        </v-dialog>\n        <v-dialog v-model=\"dialogRenameDirectory.show\" max-width=\"400\">\n            <panel :title=\"$t('Files.RenameDirectory')\" card-class=\"gcode-files-rename-directory-dialog\" :margin-bottom=\"false\">\n                <template v-slot:buttons>\n                    <v-btn icon tile @click=\"dialogRenameDirectory.show = false\"><v-icon>mdi-close-thick</v-icon></v-btn>\n                </template>\n                <v-card-text>\n                    <v-text-field\n                        v-model=\"dialogRenameDirectory.newName\"\n                        ref=\"inputFieldRenameDirectory\"\n                        :label=\"$t('Files.Name')\"\n                        @keyup.enter=\"renameDirectoryAction\"\n                        required\n                    ></v-text-field>\n                </v-card-text>\n                <v-card-actions>\n                    <v-spacer></v-spacer>\n                    <v-btn color=\"\" text @click=\"dialogRenameDirectory.show = false\">{{ $t('Files.Cancel') }}</v-btn>\n                    <v-btn color=\"primary\" text @click=\"renameDirectoryAction\">{{ $t('Files.Rename') }}</v-btn>\n                </v-card-actions>\n            </panel>\n        </v-dialog>\n        <v-dialog v-model=\"dialogDeleteDirectory.show\" max-width=\"400\">\n            <panel :title=\"$t('Files.DeleteDirectory')\" card-class=\"gcode-files-delete-directory-dialog\" :margin-bottom=\"false\">\n                <template v-slot:buttons>\n                    <v-btn icon tile @click=\"dialogDeleteDirectory.show = false\"><v-icon>mdi-close-thick</v-icon></v-btn>\n                </template>\n                <v-card-text>\n                    <p class=\"mb-0\">{{ $t('Files.DeleteDirectoryQuestion', { name: dialogDeleteDirectory.item.filename } )}}</p>\n                </v-card-text>\n                <v-card-actions>\n                    <v-spacer></v-spacer>\n                    <v-btn color=\"\" text @click=\"dialogDeleteDirectory.show = false\">{{ $t('Files.Cancel') }}</v-btn>\n                    <v-btn color=\"error\" text @click=\"deleteDirectoryAction\">{{ $t('Files.Delete') }}</v-btn>\n                </v-card-actions>\n            </panel>\n        </v-dialog>\n    </div>\n</template>\n\n<script lang=\"ts\">\nimport {Component, Mixins, Watch} from 'vue-property-decorator'\nimport BaseMixin from '@/components/mixins/base'\nimport axios from 'axios'\nimport {thumbnailSmallMin, thumbnailSmallMax, thumbnailBigMin, validGcodeExtensions} from '@/store/variables'\nimport {formatFilesize, formatDate, sortFiles, formatPrintTime} from '@/plugins/helpers'\nimport {FileStateFile} from '@/store/files/types'\nimport Panel from '@/components/ui/Panel.vue'\nimport SettingsRow from '@/components/settings/SettingsRow.vue'\n\ninterface draggingFile {\n    status: boolean\n    item: FileStateFile\n}\n\ninterface uploadSnackbar {\n    status: boolean\n    filename: string\n    percent: number\n    speed: number\n    total: number\n    number: number\n    max: number\n    cancelTokenSource: any\n    lastProgress: {\n        time: number\n        loaded: number\n    }\n}\n\ninterface dialogPrintFile {\n    show: boolean\n    item: FileStateFile\n}\n\ninterface dialogRenameObject {\n    show: boolean\n    newName: string\n    item: FileStateFile\n}\n\n@Component({\n    components: {Panel,SettingsRow}\n})\nexport default class GcodefilesPanel extends Mixins(BaseMixin) {\n    validGcodeExtensions = validGcodeExtensions\n    formatDate = formatDate\n    formatFilesize = formatFilesize\n    formatPrintTime = formatPrintTime\n    sortFiles = sortFiles\n\n    $refs!: {\n        fileUpload: HTMLInputElement,\n        inputFieldRenameFile: HTMLInputElement,\n        inputFieldCreateDirectory: HTMLInputElement,\n        inputFieldRenameDirectory: HTMLInputElement,\n    }\n\n    private TimelapseModeOptions = [\n        {\n            text: 'layermacro',\n            value: 'layermacro'\n        },\n        {\n            text: 'hyperlapse',\n            value: 'hyperlapse'\n        }\n    ]\n\n    private search = ''\n    private selected = []\n    private hideHeaderColums = []\n    private dropzone = {\n        visibility: 'hidden',\n        opacity: 0,\n    }\n    private draggingFile: draggingFile = {\n        status: false,\n        item: {\n            isDirectory: false,\n            filename: '',\n            permissions: '',\n            modified: new Date()\n        }\n    }\n    private uploadSnackbar: uploadSnackbar = {\n        status: false,\n        filename: '',\n        percent: 0,\n        speed: 0,\n        total: 0,\n        number: 0,\n        max: 0,\n        cancelTokenSource: {},\n        lastProgress: {\n            time: 0,\n            loaded: 0\n        }\n    }\n    private dialogCreateDirectory = {\n        show: false,\n        name: ''\n    }\n    private contextMenu = {\n        shown: false,\n        isDirectory: false,\n        touchTimer: undefined,\n        x: 0,\n        y: 0,\n        item: {\n            isDirectory: false,\n            filename: '',\n            permissions: '',\n            modified: new Date()\n        }\n    }\n\n    private dialogPrintFile: dialogPrintFile = {\n        show: false,\n        item: {\n            isDirectory: false,\n            filename: '',\n            permissions: '',\n            modified: new Date()\n        }\n    }\n\n    private dialogRenameFile: dialogRenameObject = {\n        show: false,\n        newName: '',\n        item: {\n            isDirectory: false,\n            filename: '',\n            permissions: '',\n            modified: new Date()\n        }\n    }\n\n    private dialogRenameDirectory: dialogRenameObject = {\n        show: false,\n        newName: '',\n        item: {\n            isDirectory: false,\n            filename: '',\n            permissions: '',\n            modified: new Date()\n        }\n    }\n\n    private dialogDeleteDirectory: dialogRenameObject = {\n        show: false,\n        newName: '',\n        item: {\n            isDirectory: false,\n            filename: '',\n            permissions: '',\n            modified: new Date()\n        }\n    }\n\n    private input_rules = [\n        (value: string) => value.indexOf(' ') === -1 || 'Name contains spaces!'\n    ]\n\n    get currentPath() {\n        return this.$store.state.gui.view.gcodefiles.currentPath\n    }\n\n    set currentPath(newVal) {\n        this.$store.dispatch('gui/saveSettingWithoutUpload', { name: 'view.gcodefiles.currentPath', value: newVal })\n    }\n\n    get headers() {\n        const headers = [\n            { text: '',                                     value: '',                          align: 'left',  configable: false,  visible: true, filterable: false },\n            { text: this.$t('Files.Name'),                  value: 'filename',                  align: 'left',  configable: false,  visible: true },\n            { text: '',                                     value: 'status',                    align: 'left',  configable: false,  visible: true },\n            { text: this.$t('Files.Filesize'),              value: 'size',                      align: 'right', configable: true,   visible: true },\n            { text: this.$t('Files.LastModified'),          value: 'modified',                  align: 'right', configable: true,   visible: true },\n            { text: this.$t('Files.ObjectHeight'),          value: 'object_height',             align: 'right', configable: true,   visible: true },\n            { text: this.$t('Files.LayerHeight'),           value: 'layer_height',              align: 'right', configable: true,   visible: true },\n            { text: this.$t('Files.NozzleDiameter'),        value: 'nozzle_diameter',           align: 'right', configable: true,   visible: true },\n            { text: this.$t('Files.FilamentName'),          value: 'filament_name',             align: 'right', configable: true,   visible: true },\n            { text: this.$t('Files.FilamentType'),          value: 'filament_type',             align: 'right', configable: true,   visible: true },\n            { text: this.$t('Files.FilamentUsage'),         value: 'filament_total',            align: 'right', configable: true,   visible: true },\n            { text: this.$t('Files.FilamentWeight'),        value: 'filament_weight_total',     align: 'right', configable: true,   visible: true },\n            { text: this.$t('Files.PrintTime'),             value: 'estimated_time',            align: 'right', configable: true,   visible: true },\n            { text: this.$t('Files.Slicer'),                value: 'slicer',                    align: 'right', configable: true,   visible: true },\n        ]\n\n        headers.forEach((header) => {\n            if (header.visible && this.hideMetadataColums.includes(header.value)) {\n                header.visible = false\n            } else if (!header.visible && !this.hideMetadataColums.includes(header.value)) {\n                header.visible = true\n            }\n        })\n\n        return headers\n    }\n\n    get directory() {\n        return this.$store.getters['files/getDirectory'](this.currentPath)\n    }\n\n    get disk_usage() {\n        return this.directory?.disk_usage ?? { used: 0, free: 0, total: 0}\n    }\n\n    get files() {\n        let files = [...this.directory?.childrens ?? []]\n\n        if (!this.showHiddenFiles) {\n            files = files.filter(file => file.filename !== 'thumbs' && file.filename.substr(0, 1) !== '.')\n        }\n\n        if (!this.showPrintedFiles) {\n            files = files.filter(file => {\n                if (file.isDirectory) return true\n                else {\n                    return (this.$store.getters['server/history/getPrintStatusByFilename'](\n                        (this.currentPath+'/'+file.filename).substr(7),\n                        file.modified.getTime()\n                    ) !== 'completed')\n                }\n            })\n        }\n\n        return files\n    }\n\n    get configHeaders() {\n        return this.headers.filter(header => header.configable)\n    }\n\n    get filteredHeaders() {\n        return this.headers.filter(header => header.visible)\n    }\n\n    get hideMetadataColums() {\n        return this.$store.state.gui.view.gcodefiles.hideMetadataColums\n    }\n\n    set hideMetadataColums(newVal) {\n        this.$store.dispatch('gui/saveSetting', { name: 'view.gcodefiles.hideMetadataColums', value: newVal })\n    }\n\n    get showHiddenFiles() {\n        return this.$store.state.gui.view.gcodefiles.showHiddenFiles\n    }\n\n    set showHiddenFiles(newVal) {\n        this.$store.dispatch('gui/saveSetting', { name: 'view.gcodefiles.showHiddenFiles', value: newVal })\n    }\n\n    get showPrintedFiles() {\n        return this.$store.state.gui.view.gcodefiles.showPrintedFiles\n    }\n\n    set showPrintedFiles(newVal) {\n        this.$store.dispatch('gui/saveSetting', { name: 'view.gcodefiles.showPrintedFiles', value: newVal })\n    }\n\n    get sortBy() {\n        return this.$store.state.gui.view.gcodefiles.sortBy\n    }\n\n    set sortBy(newVal) {\n        if (newVal === undefined) newVal = 'modified'\n\n        this.$store.dispatch('gui/saveSetting', { name: 'view.gcodefiles.sortBy', value: newVal })\n    }\n\n    get sortDesc() {\n        return this.$store.state.gui.view.gcodefiles.sortDesc\n    }\n\n    set sortDesc(newVal) {\n        if (newVal === undefined) newVal = false\n\n        this.$store.dispatch('gui/saveSetting', { name: 'view.gcodefiles.sortDesc', value: newVal })\n    }\n\n    get countPerPage() {\n        return this.$store.state.gui.view.gcodefiles.countPerPage\n    }\n\n    set countPerPage(newVal) {\n        this.$store.dispatch('gui/saveSetting', { name: 'view.gcodefiles.countPerPage', value: newVal })\n    }\n\n    get timelapseEnabled() {\n        return this.$store.state.server.timelapse?.settings?.enabled ?? false\n    }\n\n    set timelapseEnabled(newVal) {\n        this.$socket.emit('machine.timelapse.post_settings', { enabled: newVal }, { action: 'server/timelapse/initSettings' })\n    }\n\n    getJobStatus(item: FileStateFile) {\n        return this.$store.getters['server/history/getPrintStatus'](item.job_id)\n    }\n\n    getStatusIcon(status: string) {\n        return this.$store.getters['server/history/getPrintStatusChipIcon'](status)\n    }\n\n    getStatusColor(status: string) {\n        return this.$store.getters['server/history/getPrintStatusChipColor'](status)\n    }\n\n    dragOverUpload(e: Event) {\n        if (!this.draggingFile.status) {\n            e.preventDefault()\n            e.stopPropagation()\n\n            this.dropzone.visibility = 'visible'\n            this.dropzone.opacity = 1\n        }\n    }\n\n    dragLeaveUpload(e: Event) {\n        if (!this.draggingFile.status) {\n            e.preventDefault()\n            e.stopPropagation()\n\n            this.dropzone.visibility = 'hidden'\n            this.dropzone.opacity = 0\n        }\n    }\n\n    async dragDropUpload(e: any) {\n        if (!this.draggingFile.status) {\n            e.preventDefault()\n\n            this.dropzone.visibility = 'hidden'\n            this.dropzone.opacity = 0\n\n            if (e.dataTransfer.files.length) {\n                const files = [...e.dataTransfer.files].filter((file: File) => {\n                    const format = file.name.slice(file.name.lastIndexOf('.'))\n\n                    if (!validGcodeExtensions.includes(format)) {\n                        this.$toast.error(this.$t('Files.WrongFileUploaded', { filename: file.name }).toString())\n\n                        return false\n                    }\n\n                    return true\n                })\n\n                this.$store.dispatch('socket/addLoading', { name: 'gcodeUpload' })\n                let successFiles = []\n                this.uploadSnackbar.number = 0\n                this.uploadSnackbar.max = files.length\n                for (const file of files) {\n                    this.uploadSnackbar.number++\n                    const result = await this.doUploadFile(file)\n                    successFiles.push(result)\n                }\n\n                this.$store.dispatch('socket/removeLoading', { name: 'gcodeUpload' })\n                for(const file of successFiles) {\n                    this.$toast.success(this.$t('Files.SuccessfullyUploaded', { filename: file }).toString())\n                }\n            }\n        }\n    }\n\n    doUploadFile(file: File) {\n        let formData = new FormData()\n        let filename = file.name\n\n        this.uploadSnackbar.filename = filename\n        this.uploadSnackbar.status = true\n        this.uploadSnackbar.percent = 0\n        this.uploadSnackbar.speed = 0\n        this.uploadSnackbar.lastProgress.loaded = 0\n        this.uploadSnackbar.lastProgress.time = 0\n\n        formData.append('file', file, (this.currentPath+'/'+filename).substring(7))\n\n        return new Promise(resolve => {\n            this.uploadSnackbar.cancelTokenSource = axios.CancelToken.source()\n            axios.post(this.apiUrl + '/server/files/upload',\n                formData, {\n                    cancelToken: this.uploadSnackbar.cancelTokenSource.token,\n                    headers: { 'Content-Type': 'multipart/form-data' },\n                    onUploadProgress: (progressEvent: any) => {\n                        this.uploadSnackbar.percent = (progressEvent.loaded * 100) / progressEvent.total\n                        if (this.uploadSnackbar.lastProgress.time) {\n                            const time = progressEvent.timeStamp - this.uploadSnackbar.lastProgress.time\n                            const data = progressEvent.loaded - this.uploadSnackbar.lastProgress.loaded\n\n                            if (time) this.uploadSnackbar.speed = data / (time / 1000)\n                        }\n\n                        this.uploadSnackbar.lastProgress.time = progressEvent.timeStamp\n                        this.uploadSnackbar.lastProgress.loaded = progressEvent.loaded\n                        this.uploadSnackbar.total = progressEvent.total\n                    }\n                }\n            ).then((result: any) => {\n                const filename = result.data.item.path.substr(result.data.item.path.indexOf('/')+1)\n                this.uploadSnackbar.status = false\n                resolve(filename)\n            }).catch(() => {\n                this.uploadSnackbar.status = false\n                this.$store.dispatch('socket/removeLoading', { name: 'gcodeUpload' })\n                this.$toast.error('Cannot upload the file!')\n            })\n        })\n    }\n\n    dragOverFilelist(e: any, row: any) {\n        if (this.draggingFile.status) {\n            e.preventDefault()\n            //e.stopPropagation()\n\n            if (row.isDirectory) {\n                e.target.parentElement.style.backgroundColor = '#43A04720'\n            }\n        }\n    }\n\n    dragLeaveFilelist(e: any) {\n        if (this.draggingFile.status) {\n            e.preventDefault()\n            e.stopPropagation()\n\n            e.target.parentElement.style.backgroundColor = 'transparent'\n        }\n    }\n\n    async dragDropFilelist(e: any, row: any) {\n        if (this.draggingFile.status) {\n            e.preventDefault()\n            e.target.parentElement.style.backgroundColor = 'transparent'\n\n            let dest = ''\n            if (row.filename === '..') {\n                dest = this.currentPath.substring(0, this.currentPath.lastIndexOf('/') + 1)+this.draggingFile.item.filename\n            } else dest = this.currentPath+'/'+row.filename+'/'+this.draggingFile.item.filename\n\n            this.$socket.emit('server.files.move', {\n                source: this.currentPath+'/'+this.draggingFile.item.filename,\n                dest: dest\n            }, { action: 'files/getMove' })\n        }\n    }\n\n    async uploadFile() {\n        if (this.$refs.fileUpload.files?.length) {\n            this.$store.dispatch('socket/addLoading', { name: 'gcodeUpload' })\n            let successFiles = []\n            this.uploadSnackbar.number = 0\n            this.uploadSnackbar.max = this.$refs.fileUpload.files.length\n            for (const file of this.$refs.fileUpload.files) {\n                this.uploadSnackbar.number++\n                const result = await this.doUploadFile(file)\n                successFiles.push(result)\n            }\n\n            this.$store.dispatch('socket/removeLoading', { name: 'gcodeUpload' })\n            for(const file of successFiles) {\n                this.$toast.success(this.$t('Files.SuccessfullyUploaded', { filename: file }).toString())\n            }\n\n            this.$refs.fileUpload.value = ''\n        }\n    }\n\n    clickUploadButton() {\n        this.$refs.fileUpload.click()\n    }\n\n    createDirectory() {\n        this.dialogCreateDirectory.name = ''\n        this.dialogCreateDirectory.show = true\n\n        setTimeout(() => {\n            this.$refs.inputFieldCreateDirectory?.focus()\n        }, 200)\n    }\n\n    createDirectoryAction() {\n        if (this.dialogCreateDirectory.name.length && this.dialogCreateDirectory.name.indexOf(' ') === -1) {\n            this.dialogCreateDirectory.show = false\n            this.$socket.emit('server.files.post_directory', { path: this.currentPath+'/'+this.dialogCreateDirectory.name }, { action: 'files/getCreateDir' })\n        }\n    }\n\n    refreshFileList() {\n        this.$socket.emit('server.files.get_directory', { path: this.currentPath }, { action: 'files/getDirectory' })\n    }\n\n    advancedSearch(value: string | number, search: string) {\n        return value != null &&\n            search != null &&\n            typeof value === 'string' &&\n            value.toString().toLowerCase().indexOf(search.toLowerCase()) !== -1\n    }\n\n    refreshMetadata(data: FileStateFile[]) {\n        const items = data.filter((file) => !file.isDirectory && !file.metadataRequested && !file.metadataPulled)\n        items.forEach((file: FileStateFile) => {\n            this.$store.dispatch('files/requestMetadata', {\n                filename: (this.currentPath+'/'+file.filename)\n            })\n        })\n    }\n\n    created() {\n        this.$socket.emit('server.files.get_directory', { path: this.currentPath }, { action: 'files/getDirectory' })\n    }\n\n    getSmallThumbnail(item: FileStateFile) {\n        if (item.thumbnails?.length) {\n            const thumbnail = item.thumbnails.find(thumb =>\n                thumb.width >= thumbnailSmallMin && thumb.width <= thumbnailSmallMax &&\n                thumb.height >= thumbnailSmallMin && thumb.height <= thumbnailSmallMax\n            )\n\n            if (thumbnail && 'relative_path' in thumbnail) {\n                return `${this.apiUrl}/server/files/${encodeURI(this.currentPath)}/${encodeURI(thumbnail.relative_path)}?timestamp=${item.modified.getTime()}`\n            }\n        }\n\n        return ''\n    }\n\n    getBigThumbnail(item: FileStateFile) {\n        if (item.thumbnails?.length) {\n            const thumbnail = item.thumbnails.find(thumb => thumb.width >= thumbnailBigMin)\n\n            if (thumbnail && 'relative_path' in thumbnail) {\n                return `${this.apiUrl}/server/files/${encodeURI(this.currentPath)}/${encodeURI(thumbnail.relative_path)}?timestamp=${item.modified.getTime()}`\n            }\n        }\n\n        return ''\n    }\n\n    getThumbnailWidth(item: FileStateFile) {\n        if (this.getBigThumbnail(item)) {\n            const thumbnail = item?.thumbnails?.find(thumb => thumb.width >= thumbnailBigMin)\n\n            if (thumbnail) return thumbnail.width\n        }\n\n        return 400\n    }\n\n    clickRow(item: FileStateFile, force = false) {\n        if (!this.contextMenu.shown || force) {\n            if (force) this.contextMenu.shown = false\n\n            if (item.isDirectory) {\n                this.currentPath += '/' + item.filename\n            } else if (!['error', 'printing', 'paused'].includes(this.printer_state) && this.isGcodeFile(item)) {\n                this.dialogPrintFile.show = true\n                this.dialogPrintFile.item = item\n            }\n        }\n    }\n\n    clickRowGoBack() {\n        this.currentPath = this.currentPath.substr(0, this.currentPath.lastIndexOf('/'))\n    }\n\n    addToQueue(item: FileStateFile) {\n        let path = this.currentPath.slice(7)\n        if (path != '') path += '/'\n        const filename = path+item.filename\n\n        this.$store.dispatch('server/jobQueue/addToQueue', [filename])\n    }\n\n    changeMetadataVisible(name: string) {\n        if (this.headers.filter(header => header.value === name).length) {\n            const value = this.headers.filter(header => header.value === name)[0].visible\n\n            this.$store.dispatch('gui/setGcodefilesMetadata', {name: name, value: value})\n        }\n    }\n\n    cancelUpload() {\n        this.uploadSnackbar.cancelTokenSource.cancel()\n        this.uploadSnackbar.status = false\n        this.$refs.fileUpload.value = ''\n    }\n\n    showContextMenu (e: any, item: FileStateFile) {\n        if (!this.contextMenu.shown) {\n            e?.preventDefault()\n            this.contextMenu.shown = true\n            this.contextMenu.x = e?.clientX || e?.pageX || window.screenX / 2\n            this.contextMenu.y = e?.clientY || e?.pageY || window.screenY / 2\n            this.contextMenu.item = item\n            this.$nextTick(() => {\n                this.contextMenu.shown = true\n            })\n        }\n    }\n\n    preheat() {\n        const file: any = this.contextMenu.item\n\n        if (\n            'first_layer_extr_temp' in file &&\n            'first_layer_bed_temp' in file &&\n            !['error', 'printing', 'paused'].includes(this.printer_state)\n        ) {\n            let gcode = ''\n            if (file.first_layer_extr_temp > 0) {\n                gcode = 'M104 S'+file.first_layer_extr_temp\n                this.$store.dispatch('server/addEvent', { message: gcode, type: 'command' })\n                this.$socket.emit('printer.gcode.script', { script: gcode })\n            }\n\n            if (file.first_layer_bed_temp > 0) {\n                gcode = 'M140 S'+file.first_layer_bed_temp\n                this.$store.dispatch('server/addEvent', { message: gcode, type: 'command' })\n                this.$socket.emit('printer.gcode.script', { script: gcode })\n            }\n        }\n    }\n\n    editFile(item: FileStateFile) {\n        const path = this.currentPath === 'gcodes' ? '' : this.currentPath.slice(7)\n\n        this.$store.dispatch('editor/openFile', {\n            root: 'gcodes',\n            path: path !== '' ? '/'+path : '',\n            filename: item.filename,\n            size: item.size,\n            permissions: item.permissions\n        })\n    }\n\n    downloadFile() {\n        const filename = (this.currentPath+'/'+this.contextMenu.item.filename)\n        const href = this.apiUrl + '/server/files/' + encodeURI(filename)\n\n        window.open(href)\n    }\n\n    renameFile(item: FileStateFile) {\n        this.dialogRenameFile.item = item\n        this.dialogRenameFile.newName = item.filename\n        this.dialogRenameFile.show = true\n\n        setTimeout(() => {\n            this.$refs.inputFieldRenameFile?.focus()\n        }, 200)\n    }\n\n    renameFileAction() {\n        this.dialogRenameFile.show = false\n        this.$socket.emit('server.files.move', {\n            source: this.currentPath+'/'+this.dialogRenameFile.item.filename,\n            dest: this.currentPath+'/'+this.dialogRenameFile.newName\n        }, { action: 'files/getMove' })\n    }\n\n    renameDirectory(item: FileStateFile) {\n        this.dialogRenameDirectory.item = item\n        this.dialogRenameDirectory.newName = item.filename\n        this.dialogRenameDirectory.show = true\n\n        setTimeout(() => {\n            this.$refs.inputFieldRenameDirectory?.focus()\n        }, 200)\n    }\n\n    renameDirectoryAction() {\n        this.dialogRenameDirectory.show = false\n        this.$socket.emit('server.files.move', {\n            source: this.currentPath+'/'+this.dialogRenameDirectory.item.filename,\n            dest: this.currentPath+'/'+this.dialogRenameDirectory.newName\n        }, { action: 'files/getMove' })\n    }\n\n    removeFile() {\n        this.$socket.emit('server.files.delete_file', { path: this.currentPath+'/'+this.contextMenu.item.filename }, { action: 'files/getDeleteFile' })\n    }\n\n    deleteDirectory(item: FileStateFile) {\n        this.dialogDeleteDirectory.item = item\n        this.dialogDeleteDirectory.show = true\n    }\n\n    deleteDirectoryAction() {\n        this.dialogDeleteDirectory.show = false\n        this.$socket.emit('server.files.delete_directory', { path: this.currentPath+'/'+this.contextMenu.item.filename, force: true }, { action: 'files/getDeleteDir' })\n    }\n\n    startPrint(filename = '') {\n        filename = (this.currentPath+'/'+filename).substring(7)\n        this.dialogPrintFile.show = false\n        this.$socket.emit('printer.print.start', { filename: filename }, { action: 'switchToDashboard' })\n    }\n\n    dragFile(e: Event, item: FileStateFile) {\n        e.preventDefault()\n        this.draggingFile.status = true\n        this.draggingFile.item = item\n    }\n\n    dragendFile(e: Event) {\n        e.preventDefault()\n        this.draggingFile.status = false\n        this.draggingFile.item = {\n            isDirectory: false,\n            filename: '',\n            permissions: '',\n            modified: new Date()\n        }\n    }\n\n    @Watch('hideMetadataColums')\n    hideMetadataColumsCanged(newVal: string[]) {\n        newVal.forEach((key) => {\n            let headerElement = this.headers.find(element => element.value === key)\n            if (headerElement) headerElement.visible = false\n        })\n    }\n\n    isGcodeFile(file: FileStateFile) {\n        const format = file.filename.slice(file.filename.lastIndexOf('.'))\n\n        return validGcodeExtensions.includes(format)\n    }\n\n    view3D(item: FileStateFile) {\n        this.$router.push({path: '/viewer', query: {filename: this.currentPath + '/' + item.filename}})\n    }\n}\n</script>\n"]}]}