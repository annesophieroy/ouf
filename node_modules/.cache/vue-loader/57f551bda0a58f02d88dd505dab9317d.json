{"remainingRequest":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/components/panels/ToolsPanel.vue?vue&type=style&index=0&id=ba90406e&scoped=true&lang=css&","dependencies":[{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/components/panels/ToolsPanel.vue","mtime":1644874918000},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1645990066541},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1645990070825},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/postcss-loader/src/index.js","mtime":1645990067674},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js","mtime":1645990064605},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1645990069130}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5oZWF0ZXItcm93IC52ZXJ0aWNhbF9hbGlnbl9jZW50ZXIgewogICAgbWFyZ2luOiBhdXRvIDA7Cn0KCi5jb2xIZWF0ZXJJY29ucyB7CiAgICB3aWR0aDogNjhweDsKfQoKLmNhbnZhc2pzLWNoYXJ0LXRvb2x0aXA+ZGl2IHsKICAgIGJvcmRlci1yYWRpdXM6IDEwcHggIWltcG9ydGFudDsKfQoKLmRhdGFzZXRDb2xvclN5bWJvbCB7CiAgICB3aWR0aDogOHB4OwogICAgaGVpZ2h0OiA4cHg7CiAgICBib3JkZXItc3R5bGU6IHNvbGlkOwogICAgYm9yZGVyLXdpZHRoOiAwcHg7CiAgICBjdXJzb3I6IHBvaW50ZXI7CiAgICBib3JkZXItcmFkaXVzOiA1MCU7Cn0KCg=="},{"version":3,"sources":["ToolsPanel.vue"],"names":[],"mappings":";AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ToolsPanel.vue","sourceRoot":"src/components/panels","sourcesContent":["<style scoped>\n    .heater-row .vertical_align_center {\n        margin: auto 0;\n    }\n\n    .colHeaterIcons {\n        width: 68px;\n    }\n\n    .canvasjs-chart-tooltip>div {\n        border-radius: 10px !important;\n    }\n\n    .datasetColorSymbol {\n        width: 8px;\n        height: 8px;\n        border-style: solid;\n        border-width: 0px;\n        cursor: pointer;\n        border-radius: 50%;\n    }\n\n</style>\n\n<template>\n    <panel\n        v-if=\"klipperReadyForGui\"\n        icon=\"mdi-thermometer-lines\"\n        :title=\"$t('Panels.ToolsPanel.Headline')\"\n        :collapsible=\"true\"\n        card-class=\"tools-panel\"\n    >\n        <template v-slot:buttons>\n            <v-menu :offset-y=\"true\" title=\"Preheat\" v-if=\"presets.length\">\n                <template v-slot:activator=\"{ on, attrs }\">\n                    <v-btn \n                        text\n                        tile\n                        color=\"primary\"\n                        v-bind=\"attrs\"\n                        v-on=\"on\"\n                        :disabled=\"['printing', 'paused'].includes(printer_state)\"\n                        class=\"pa-1\"\n                    >\n                        <span class=\"d-none ml-1 d-md-block\">{{ $t(\"Panels.ToolsPanel.Presets\") }}</span>\n                        <v-icon class=\"d-md-none\">mdi-fire</v-icon>\n                        <v-icon>mdi-menu-down</v-icon>\n                    </v-btn>\n                </template>\n                <v-list dense class=\"py-0\">\n                    <v-list-item v-for=\"preset of presets\" v-bind:key=\"preset.index\" link @click=\"preheat(preset)\">\n                        <v-list-item-icon class=\"mr-0\">\n                            <v-icon small>mdi-fire</v-icon>\n                        </v-list-item-icon>\n                        <v-list-item-content>\n                            <v-list-item-title v-text=\"preset.name\"></v-list-item-title>\n                        </v-list-item-content>\n                    </v-list-item>\n                </v-list>\n                <v-divider></v-divider>\n                <v-list dense class=\"py-0\">\n                    <v-list-item link @click=\"cooldown()\">\n                        <v-list-item-icon class=\"mr-0\">\n                            <v-icon small color=\"primary\">mdi-snowflake</v-icon>\n                        </v-list-item-icon>\n                        <v-list-item-content>\n                            <v-list-item-title class=\"primary--text\">{{ $t(\"Panels.ToolsPanel.Cooldown\") }}</v-list-item-title>\n                        </v-list-item-content>\n                    </v-list-item>\n                </v-list>\n            </v-menu>\n            <v-btn\n                :icon=\"$vuetify.breakpoint.smAndDown\"\n                :text=\"$vuetify.breakpoint.mdAndUp\"\n                tile\n                @click=\"cooldown()\"\n                v-if=\"presets.length === 0\"\n                color=\"primary\"\n            >\n                <v-icon small>mdi-snowflake</v-icon><span class=\"d-none ml-1 d-md-inline\">{{ $t(\"Panels.ToolsPanel.Cooldown\") }}</span>\n            </v-btn>\n            <v-menu :offset-y=\"true\" :close-on-content-click=\"false\" :title=\"$t('Panels.ToolsPanel.SetupTemperatures')\">\n                <template v-slot:activator=\"{ on, attrs }\">\n                    <v-btn icon tile v-bind=\"attrs\" v-on=\"on\"><v-icon small>mdi-cog</v-icon></v-btn>\n                </template>\n                <v-list>\n                    <v-list-item class=\"minHeight36\">\n                        <v-checkbox class=\"mt-0\" v-model=\"boolTempchart\" hide-details :label=\"$t('Panels.ToolsPanel.ShowChart')\"></v-checkbox>\n                    </v-list-item>\n                    <v-list-item class=\"minHeight36\">\n                        <v-checkbox class=\"mt-0\" v-model=\"autoscaleTempchart\" hide-details :label=\"$t('Panels.ToolsPanel.AutoscaleChart')\"></v-checkbox>\n                    </v-list-item>\n                </v-list>\n            </v-menu>\n        </template>\n        <v-card-text class=\"pa-0 content\">\n            <v-container class=\"px-0\">\n                <v-row align=\"center\">\n                    <v-col class=\"py-2 font-weight-bold\" style=\"padding-left: 68px;\">{{ $t(\"Panels.ToolsPanel.Name\") }}</v-col>\n                    <v-col class=\"py-2 text-center flex-grow-0 font-weight-bold d-none d-md-block\" v-if=\"boolTempchart\" style=\"min-width: 75px;\">{{ $t(\"Panels.ToolsPanel.Color\") }}</v-col>\n                    <v-col class=\"py-2 text-center font-weight-bold d-none d-md-block\">{{ $t(\"Panels.ToolsPanel.State\") }}</v-col>\n                    <v-col class=\"py-2 text-center font-weight-bold\">{{ $t(\"Panels.ToolsPanel.Current\") }}</v-col>\n                    <v-col class=\"py-2 pr-8 text-center font-weight-bold\">{{ $t(\"Panels.ToolsPanel.Target\") }}</v-col>\n                </v-row>\n                <div v-for=\"(heater, index) in heaters\" v-bind:key=\"index\" >\n                    <v-divider class=\"my-2\"></v-divider>\n                    <v-row align=\"center\">\n                        <v-col class=\"pl-8 pr-0 flex-grow-0 py-2 colHeaterIcons\">\n                            <v-icon :color=\"heater.iconColor\">mdi-{{ heater.icon }}</v-icon>\n                        </v-col>\n                        <v-col class=\"py-2 font-weight-bold\"><span style=\"cursor: pointer;\" @click=\"openHeater(heater)\">{{ convertName(heater.name) }}</span></v-col>\n                        <v-col class=\"py-2 flex-grow-0 text-center d-none d-md-block\" v-if=\"boolTempchart\" style=\"min-width: 75px;\">\n                            <div :style=\"'background-color: '+heater.chartColor+'cc;'\" class=\"datasetColorSymbol d-inline-block\" @click=\"openHeater(heater)\"></div>\n                        </v-col>\n                        <v-col class=\"py-2 text-center d-none d-md-block\">\n                            <v-tooltip top>\n                                <template v-slot:activator=\"{ on, attrs }\">\n                                    <small v-bind=\"attrs\" v-on=\"on\">{{ heater.target > 0 ? heater.power+'%' : \"off\" }}</small>\n                                </template>\n                                <span>{{ $t(\"Panels.ToolsPanel.Avg\") }}: {{ heater.avgPower+'%' }}</span>\n                            </v-tooltip>\n                        </v-col>\n                        <v-col class=\"py-2 text-center\">\n                            <span class=\"d-block\">{{ heater.temperature.toFixed(1) }}Â°C</span>\n                            <div v-for=\"(values, key) of heater.additionSensors\" v-bind:key=\"key\">\n                                <span v-if=\"values.bool\" class=\"d-block\"><small>{{ values.value }} {{ values.unit }}</small></span>\n                            </div>\n                        </v-col>\n                        <v-col class=\"text-center py-2 pr-8 vertical_align_center\">\n                            <tool-input\n                                :name=\"heater.name\"\n                                :target=\"heater.target\"\n                                :min_temp=\"heater.min_temp\"\n                                :max_temp=\"heater.max_temp\"\n                                :items=\"heater.presets\"\n                                command=\"SET_HEATER_TEMPERATURE\"\n                                attribute-name=\"HEATER\"\n                            ></tool-input>\n                        </v-col>\n                    </v-row>\n                </div>\n                <div v-for=\"(fan, index) in temperatureFans\" v-bind:key=\"index+99\" >\n                    <v-divider class=\"my-2\"></v-divider>\n                    <v-row align=\"center\">\n                        <v-col class=\"flex-grow-0 py-2 pl-8 pr-0  colHeaterIcons\">\n                            <v-icon :color=\"(fan.target ? 'grey lighten-5' : 'grey darken-2')\" :class=\"(fan.speed ? ' icon-rotate' : '')\">mdi-fan</v-icon>\n                        </v-col>\n                        <v-col class=\"py-2 font-weight-bold\"><span style=\"cursor: pointer;\" @click=\"openHeater(fan)\">{{ convertName(fan.name) }}</span></v-col>\n                        <v-col class=\"py-2 flex-grow-0 text-center d-none d-md-block\" v-if=\"boolTempchart\" style=\"min-width: 75px;\">\n                            <div :style=\"'background-color: '+fan.chartColor+'cc;'\" class=\"datasetColorSymbol d-inline-block\" @click=\"openHeater(fan)\"></div>\n                        </v-col>\n                        <v-col class=\"py-2 text-center d-none d-md-block\">\n                            <v-tooltip top>\n                                <template v-slot:activator=\"{ on, attrs }\">\n                                    <small class=\"d-block\" v-bind=\"attrs\" v-on=\"on\">{{ fan.target > 0 && fan.speed > 0 ? fan.speed+\"%\" : (fan.target > 0 ? \"standby\" : \"off\") }}</small>\n                                </template>\n                                <span>{{ $t(\"Panels.ToolsPanel.Avg\") }}: {{ fan.avgSpeed+'%' }}</span>\n                            </v-tooltip>\n                        </v-col>\n                        <v-col class=\"py-2 text-center\">\n                            <span class=\"d-block\">{{ fan.temperature.toFixed(1) }}Â°C</span>\n                            <div v-for=\"(values, key) of fan.additionSensors\" v-bind:key=\"key\">\n                                <span v-if=\"values.bool\" class=\"d-block\"><small>{{ values.value }} {{ values.unit }}</small></span>\n                            </div>\n                            <small v-if=\"fan.rpm !== null\" :class=\"'d-block ' + (fan.rpm === 0 && fan.speed > 0 ? 'red--text' : '')\">{{ fan.rpm }} RPM</small>\n                        </v-col>\n                        <v-col class=\"text-center py-2 pr-8 pr-0  vertical_align_center\">\n                            <tool-input\n                                :name=\"fan.name\"\n                                :target=\"fan.target\"\n                                :min_temp=\"fan.min_temp\"\n                                :max_temp=\"fan.max_temp\"\n                                :items=\"fan.presets\"\n                                command=\"SET_TEMPERATURE_FAN_TARGET\"\n                                attribute-name=\"temperature_fan\"\n                            ></tool-input>\n                        </v-col>\n                    </v-row>\n                </div>\n                <div v-for=\"(sensor,index) in temperatureSensors\" v-bind:key=\"index+999\">\n                    <v-divider class=\"my-2\"></v-divider>\n                    <v-row align=\"center\">\n                        <v-col class=\"flex-grow-0 py-2 pl-8 pr-0 colHeaterIcons\">\n                            <v-icon color=\"grey darken-2\" :title=\"$t('Panels.ToolsPanel.Min')+': '+sensor.min_temp+'Â° / ' + $t('Panels.ToolsPanel.Max')+': '+sensor.max_temp+'Â°'\">mdi-{{ sensor.icon }}</v-icon>\n                        </v-col>\n                        <v-col class=\"py-2 font-weight-bold\">\n                            <span style=\"cursor: pointer;\" @click=\"openHeater(sensor)\">{{ convertName(sensor.name) }}</span>\n                        </v-col>\n                        <v-col class=\"py-2 flex-grow-0 text-center d-none d-md-block\" v-if=\"boolTempchart\" style=\"min-width: 75px;\">\n                            <div :style=\"'background-color: '+sensor.chartColor+'CC;'\" class=\"datasetColorSymbol d-inline-block\" @click=\"openHeater(sensor)\"></div>\n                        </v-col>\n                        <v-col class=\"py-2 d-none d-md-block\"><span>&nbsp;</span></v-col>\n                        <v-col class=\"py-2 text-center\">\n                            <v-tooltip top>\n                                <template v-slot:activator=\"{ on, attrs }\">\n                                  <span\n                                      style=\"cursor: default;\"\n                                      class=\"d-block px-0\"\n                                      v-bind=\"attrs\"\n                                      v-on=\"on\"\n                                  >{{ sensor.temperature.toFixed(1) }}Â°C</span>\n                                </template>\n                                <span>{{ $t('Panels.ToolsPanel.Max')}}: {{ sensor.measured_max_temp }}Â°C<br />{{ $t('Panels.ToolsPanel.Min') }}: {{ sensor.measured_min_temp }}Â°C</span>\n                            </v-tooltip>\n                            <div v-for=\"(values, key) of sensor.additionSensors\" v-bind:key=\"key\">\n                                <span v-if=\"values.bool\" class=\"d-block\"><small>{{ values.value }} {{ values.unit }}</small></span>\n                            </div>\n                        </v-col>\n                        <v-col class=\"text-center py-2 pr-8 vertical_align_center\"><span>&nbsp;</span></v-col>\n                    </v-row>\n                </div>\n                <v-divider class=\"my-2\" v-if=\"boolTempchart\"></v-divider>\n                <v-row v-if=\"boolTempchart\">\n                    <v-col class=\"py-0 px-3\">\n                        <temp-chart></temp-chart>\n                    </v-col>\n                </v-row>\n            </v-container>\n        </v-card-text>\n        <v-dialog v-model=\"editHeater.bool\" persistent :width=\"400\">\n            <panel :title=\"convertName(editHeater.name)\" :icon=\"'mdi-'+editHeater.icon\" card-class=\"tools-edit-heater-dialog\" :margin-bottom=\"false\">\n                <template v-slot:buttons>\n                    <v-btn icon tile @click=\"editHeater.bool = false\"><v-icon>mdi-close-thick</v-icon></v-btn>\n                </template>\n                <v-card-text class=\"pt-6\">\n                    <v-row v-for=\"dataset in editHeater.chartSeries\" v-bind:key=\"dataset\">\n                        <v-col class=\"col-12 py-1\">\n                            <v-checkbox\n                                v-model=\"editHeater['bool' + dataset.charAt(0).toUpperCase() + dataset.slice(1)]\"\n                                :label=\"$t('Panels.ToolsPanel.ShowNameInChart', {name: $t('Panels.ToolsPanel.Dataset.'+dataset.charAt(0).toUpperCase() + dataset.slice(1))})\"\n                                hide-details\n                                class=\"mt-0\"\n                                @change=\"setVisible(dataset)\"\n                            ></v-checkbox>\n                        </v-col>\n                    </v-row>\n                    <v-row v-for=\"key in Object.keys(editHeater.additionSensors)\" v-bind:key=\"key\">\n                        <v-col class=\"col-12 py-1\">\n                            <v-checkbox\n                                v-model=\"editHeater.additionSensors[key]['bool']\"\n                                :label=\"$t('Panels.ToolsPanel.ShowNameInList', {name: key})\"\n                                hide-details\n                                class=\"mt-0\"\n                                @change=\"setVisibleAdditionalSensor(key)\"\n                            ></v-checkbox>\n                        </v-col>\n                    </v-row>\n                    <v-row>\n                        <v-col class=\"col-12 text-center pb-0\">\n                            <v-color-picker\n                                hide-mode-switch\n                                mode=\"hexa\"\n                                :value=\"editHeater.color\"\n                                @update:color=\"setChartColor\"\n                                class=\"mx-auto\"\n                            ></v-color-picker>\n                        </v-col>\n                    </v-row>\n                </v-card-text>\n            </panel>\n        </v-dialog>\n    </panel>\n</template>\n\n<script lang=\"ts\">\nimport Component from 'vue-class-component'\nimport {Mixins} from 'vue-property-decorator'\nimport BaseMixin from '@/components/mixins/base'\nimport { convertName } from '@/plugins/helpers'\nimport ToolInput from '@/components/inputs/ToolInput.vue'\nimport TempChart from '@/components/charts/TempChart.vue'\nimport {datasetTypes} from '@/store/variables'\nimport {PrinterStateHeater, PrinterStateSensor, PrinterStateTemperatureFan} from '@/store/printer/types'\nimport {Debounce} from 'vue-debounce-decorator'\nimport Panel from '@/components/ui/Panel.vue'\nimport {GuiPresetsStatePreset} from '@/store/gui/presets/types'\n\n@Component({\n    components: {Panel, TempChart, ToolInput}\n})\nexport default class ToolsPanel extends Mixins(BaseMixin) {\n    convertName = convertName\n    datasetTypes = datasetTypes\n\n    private editHeater: any = {\n        bool: false,\n        name: '',\n        icon: '',\n        boolTemperature: false,\n        boolTarget: false,\n        boolPower: false,\n        boolSpeed: false,\n        additionSensors: {},\n        color: '',\n    }\n\n    get presets(): GuiPresetsStatePreset[] {\n        return this.$store.getters['gui/presets/getPresets'] ?? []\n    }\n\n    get cooldownGcode(): string {\n        return this.$store.getters['gui/presets/getCooldownGcode']\n    }\n\n    get boolTempchart(): boolean {\n        return this.$store.state.gui.view.tempchart.boolTempchart ?? false\n    }\n\n    set boolTempchart(newVal: boolean) {\n        this.$store.dispatch('gui/saveSetting', { name: 'view.tempchart.boolTempchart', value: newVal })\n    }\n\n    get autoscaleTempchart(): boolean {\n        return this.$store.state.gui.view.tempchart.autoscale ?? false\n    }\n\n    set autoscaleTempchart(newVal: boolean) {\n        this.$store.dispatch('gui/saveSetting', { name: 'view.tempchart.autoscale', value: newVal })\n    }\n\n    get heaters(): PrinterStateHeater[] {\n        return this.$store.getters['printer/getHeaters'] ?? []\n    }\n\n    get temperatureFans(): PrinterStateTemperatureFan {\n        return this.$store.getters['printer/getTemperatureFans']\n    }\n\n    get temperatureSensors(): PrinterStateSensor {\n        return this.$store.getters['printer/getTemperatureSensors']\n    }\n\n    preheat(preset: GuiPresetsStatePreset): void {\n        for (const [name, attributes] of Object.entries(preset.values)) {\n            if (attributes.bool) {\n                let gcode = 'SET_HEATER_TEMPERATURE HEATER='+name+' TARGET='+attributes.value\n\n                if (attributes.type === 'temperature_fan') {\n                    const fanName = name.replace('temperature_fan ', '')\n                    gcode = 'SET_TEMPERATURE_FAN_TARGET temperature_fan='+fanName+' TARGET='+attributes.value\n                }\n\n                this.$store.dispatch('server/addEvent', { message: gcode, type: 'command' })\n                this.$socket.emit('printer.gcode.script', { script: gcode })\n            }\n        }\n\n        if (preset.gcode !== '') {\n            setTimeout(() => {\n                this.$store.dispatch('server/addEvent', { message: preset.gcode, type: 'command' })\n                this.$socket.emit('printer.gcode.script', { script: preset.gcode })\n            }, 100)\n        }\n    }\n\n    cooldown(): void {\n        this.$store.dispatch('server/addEvent', { message: this.cooldownGcode, type: 'command' })\n        this.$socket.emit('printer.gcode.script', { script: this.cooldownGcode })\n    }\n\n    openHeater(object: PrinterStateHeater | PrinterStateTemperatureFan | PrinterStateSensor): void {\n        this.editHeater.name = object.name\n        this.editHeater.icon = object.icon\n\n        this.editHeater.color = object.chartColor\n        this.editHeater.chartSeries = 'chartSeries' in object ? object.chartSeries : []\n        this.editHeater.boolTemperature = this.$store.getters['gui/getDatasetValue']({ name: object.name, type: 'temperature' })\n        this.editHeater.boolTarget = this.$store.getters['gui/getDatasetValue']({ name: object.name, type: 'target' })\n        this.editHeater.boolPower = this.$store.getters['gui/getDatasetValue']({ name: object.name, type: 'power' })\n        this.editHeater.boolSpeed = this.$store.getters['gui/getDatasetValue']({ name: object.name, type: 'speed' })\n        this.editHeater.additionSensors = object.additionSensors\n\n        this.editHeater.bool = true\n    }\n\n    setVisible(type: string): void {\n        const serieName = 'bool'+type.charAt(0).toUpperCase() + type.slice(1)\n        const value = this.editHeater[serieName]\n\n        const name = 'view.tempchart.datasetSettings.'+this.editHeater.name+'.'+type\n        this.$store.dispatch('gui/saveSetting', { name, value })\n    }\n\n    setVisibleAdditionalSensor(sensor: string): void {\n        const name = 'view.tempchart.datasetSettings.'+this.editHeater.name+'.additionalSensors.'+sensor\n        this.$store.dispatch('gui/saveSetting', { name, value: this.editHeater.additionSensors[sensor].bool })\n    }\n\n    @Debounce(500)\n    setChartColor(value: string | any): void {\n        if (typeof value === 'object' && 'hex' in value) value = value.hex\n        this.$store.commit('printer/tempHistory/setColor', { name: this.editHeater.name, value: value })\n\n        const name = 'view.tempchart.datasetSettings.'+this.editHeater.name+'.color'\n        this.$store.dispatch('gui/saveSetting', { name, value })\n    }\n\n\n}\n</script>"]}]}