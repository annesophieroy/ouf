{"remainingRequest":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/components/panels/JobqueuePanel.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/components/panels/JobqueuePanel.vue","mtime":1644874918000},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js","mtime":1645990064605},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/babel-loader/lib/index.js","mtime":1645990067759},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/ts-loader/index.js","mtime":1645990068168},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js","mtime":1645990064605},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1645990069130}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCmltcG9ydCB7Q29tcG9uZW50LCBNaXhpbnN9IGZyb20gJ3Z1ZS1wcm9wZXJ0eS1kZWNvcmF0b3InCmltcG9ydCBCYXNlTWl4aW4gZnJvbSAnQC9jb21wb25lbnRzL21peGlucy9iYXNlJwppbXBvcnQge1NlcnZlckhpc3RvcnlTdGF0ZUpvYn0gZnJvbSAnQC9zdG9yZS9zZXJ2ZXIvaGlzdG9yeS90eXBlcycKaW1wb3J0IHtmb3JtYXRGaWxlc2l6ZSwgZm9ybWF0UHJpbnRUaW1lfSBmcm9tICdAL3BsdWdpbnMvaGVscGVycycKaW1wb3J0IFBhbmVsIGZyb20gJ0AvY29tcG9uZW50cy91aS9QYW5lbC52dWUnCmltcG9ydCB7U2VydmVySm9iUXVldWVTdGF0ZUpvYn0gZnJvbSAnQC9zdG9yZS9zZXJ2ZXIvam9iUXVldWUvdHlwZXMnCmltcG9ydCB7dGh1bWJuYWlsQmlnTWluLCB0aHVtYm5haWxTbWFsbE1heCwgdGh1bWJuYWlsU21hbGxNaW59IGZyb20gJ0Avc3RvcmUvdmFyaWFibGVzJwpAQ29tcG9uZW50KHsKICAgIGNvbXBvbmVudHM6IHtQYW5lbH0KfSkKZXhwb3J0IGRlZmF1bHQgY2xhc3MgSm9icXVldWVQYW5lbCBleHRlbmRzIE1peGlucyhCYXNlTWl4aW4pIHsKICAgIGZvcm1hdEZpbGVzaXplID0gZm9ybWF0RmlsZXNpemUKCiAgICBwcml2YXRlIGNvbnRleHRNZW51ID0gewogICAgICAgIHNob3duOiBmYWxzZSwKICAgICAgICB0b3VjaFRpbWVyOiB1bmRlZmluZWQsCiAgICAgICAgeDogMCwKICAgICAgICB5OiAwLAogICAgICAgIGl0ZW06IHt9CiAgICB9CgogICAgZ2V0IGpvYnMoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLmdldHRlcnNbJ3NlcnZlci9qb2JRdWV1ZS9nZXRKb2JzJ10KICAgIH0KCiAgICBnZXQgcXVldWVTdGF0ZSgpIHsKICAgICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUuc2VydmVyLmpvYlF1ZXVlLnF1ZXVlX3N0YXRlID8/ICcnCiAgICB9CgogICAgZ2V0IGNvdW50UGVyUGFnZSgpIHsKICAgICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUuZ3VpLnZpZXcuam9icXVldWUuY291bnRQZXJQYWdlCiAgICB9CgogICAgc2V0IGNvdW50UGVyUGFnZShuZXdWYWwpIHsKICAgICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgnZ3VpL3NhdmVTZXR0aW5nJywgeyBuYW1lOiAndmlldy5qb2JxdWV1ZS5jb3VudFBlclBhZ2UnLCB2YWx1ZTogbmV3VmFsIH0pCiAgICB9CgogICAgcmVmcmVzaEhpc3RvcnkoKSB7CiAgICAgICAgdGhpcy4kc29ja2V0LmVtaXQoJ3NlcnZlci5oaXN0b3J5Lmxpc3QnLCB7IHN0YXJ0OiAwLCBsaW1pdDogNTAgfSwgeyBhY3Rpb246ICdzZXJ2ZXIvaGlzdG9yeS9nZXRIaXN0b3J5JyB9KQogICAgfQoKICAgIGZvcm1hdFByaW50VGltZSh0b3RhbFNlY29uZHM6IG51bWJlcikgewogICAgICAgIGlmICh0b3RhbFNlY29uZHMpIHsKICAgICAgICAgICAgbGV0IG91dHB1dCA9ICcnCgogICAgICAgICAgICBjb25zdCBkYXlzID0gTWF0aC5mbG9vcih0b3RhbFNlY29uZHMgLyAoMzYwMCAqIDI0KSkKICAgICAgICAgICAgaWYgKGRheXMpIHsKICAgICAgICAgICAgICAgIHRvdGFsU2Vjb25kcyAlPSAoMzYwMCAqIDI0KQogICAgICAgICAgICAgICAgb3V0cHV0ICs9IGRheXMrJ2QnCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGNvbnN0IGhvdXJzID0gTWF0aC5mbG9vcih0b3RhbFNlY29uZHMgLyAzNjAwKQogICAgICAgICAgICB0b3RhbFNlY29uZHMgJT0gMzYwMAogICAgICAgICAgICBpZiAoaG91cnMpIG91dHB1dCArPSAnICcraG91cnMrJ2gnCgogICAgICAgICAgICBjb25zdCBtaW51dGVzID0gTWF0aC5mbG9vcih0b3RhbFNlY29uZHMgLyA2MCkKICAgICAgICAgICAgaWYgKG1pbnV0ZXMpIG91dHB1dCArPSAnICcrbWludXRlcysnbScKCiAgICAgICAgICAgIGNvbnN0IHNlY29uZHMgPSB0b3RhbFNlY29uZHMgJSA2MAogICAgICAgICAgICBpZiAoc2Vjb25kcykgb3V0cHV0ICs9ICcgJytzZWNvbmRzLnRvRml4ZWQoMCkrJ3MnCgogICAgICAgICAgICByZXR1cm4gb3V0cHV0CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gJy0tJwogICAgfQogICAgCiAgICBzaG93Q29udGV4dE1lbnUgKGU6IGFueSwgaXRlbTogU2VydmVySGlzdG9yeVN0YXRlSm9iKSB7CiAgICAgICAgaWYgKCF0aGlzLmNvbnRleHRNZW51LnNob3duKSB7CiAgICAgICAgICAgIGU/LnByZXZlbnREZWZhdWx0KCkKICAgICAgICAgICAgdGhpcy5jb250ZXh0TWVudS5zaG93biA9IHRydWUKICAgICAgICAgICAgdGhpcy5jb250ZXh0TWVudS54ID0gZT8uY2xpZW50WCB8fCBlPy5wYWdlWCB8fCB3aW5kb3cuc2NyZWVuWCAvIDIKICAgICAgICAgICAgdGhpcy5jb250ZXh0TWVudS55ID0gZT8uY2xpZW50WSB8fCBlPy5wYWdlWSB8fCB3aW5kb3cuc2NyZWVuWSAvIDIKICAgICAgICAgICAgdGhpcy5jb250ZXh0TWVudS5pdGVtID0gaXRlbQogICAgICAgICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB7CiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHRNZW51LnNob3duID0gdHJ1ZQogICAgICAgICAgICB9KQogICAgICAgIH0KICAgIH0KCiAgICBkZWxldGVKb2IoaXRlbTogU2VydmVySm9iUXVldWVTdGF0ZUpvYikgewogICAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdzZXJ2ZXIvam9iUXVldWUvZGVsZXRlRnJvbVF1ZXVlJywgW2l0ZW0uam9iX2lkXSkKICAgIH0KCiAgICBzdGFydEpvYnF1ZXVlKCkgewogICAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdzZXJ2ZXIvam9iUXVldWUvc3RhcnQnKQogICAgfQoKICAgIHBhdXNlSm9icXVldWUoKSB7CiAgICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ3NlcnZlci9qb2JRdWV1ZS9wYXVzZScpCiAgICB9CgogICAgZ2V0U21hbGxUaHVtYm5haWwoaXRlbTogU2VydmVySm9iUXVldWVTdGF0ZUpvYikgewogICAgICAgIGlmIChpdGVtPy5tZXRhZGF0YT8udGh1bWJuYWlscz8ubGVuZ3RoKSB7CiAgICAgICAgICAgIGNvbnN0IHRodW1ibmFpbCA9IGl0ZW0/Lm1ldGFkYXRhPy50aHVtYm5haWxzLmZpbmQoKHRodW1iOiBhbnkpID0+CiAgICAgICAgICAgICAgICB0aHVtYi53aWR0aCA+PSB0aHVtYm5haWxTbWFsbE1pbiAmJiB0aHVtYi53aWR0aCA8PSB0aHVtYm5haWxTbWFsbE1heCAmJgogICAgICAgICAgICAgICAgdGh1bWIuaGVpZ2h0ID49IHRodW1ibmFpbFNtYWxsTWluICYmIHRodW1iLmhlaWdodCA8PSB0aHVtYm5haWxTbWFsbE1heAogICAgICAgICAgICApCiAgICAgICAgICAgIGNvbnN0IHBhdGggPSBpdGVtLmZpbGVuYW1lLmxhc3RJbmRleE9mKCcvJykgIT09IC0xID8gJ2djb2Rlcy8nK2l0ZW0uZmlsZW5hbWUuc2xpY2UoMCwgaXRlbS5maWxlbmFtZS5sYXN0SW5kZXhPZignLycpKSA6ICdnY29kZXMnCgogICAgICAgICAgICBpZiAodGh1bWJuYWlsICYmICdyZWxhdGl2ZV9wYXRoJyBpbiB0aHVtYm5haWwpIHJldHVybiB0aGlzLmFwaVVybCsnL3NlcnZlci9maWxlcy8nK3BhdGgrJy8nK2VuY29kZVVSSSh0aHVtYm5haWwucmVsYXRpdmVfcGF0aCkrJz90aW1lc3RhbXA9JytpdGVtLm1ldGFkYXRhPy5tb2RpZmllZC5nZXRUaW1lKCkKICAgICAgICB9CgogICAgICAgIHJldHVybiAnJwogICAgfQoKICAgIGdldEJpZ1RodW1ibmFpbChpdGVtOiBTZXJ2ZXJKb2JRdWV1ZVN0YXRlSm9iKSB7CiAgICAgICAgaWYgKGl0ZW0/Lm1ldGFkYXRhPy50aHVtYm5haWxzPy5sZW5ndGgpIHsKICAgICAgICAgICAgY29uc3QgdGh1bWJuYWlsID0gaXRlbT8ubWV0YWRhdGE/LnRodW1ibmFpbHMuZmluZCgodGh1bWI6IGFueSkgPT4gdGh1bWIud2lkdGggPj0gdGh1bWJuYWlsQmlnTWluKQogICAgICAgICAgICBjb25zdCBwYXRoID0gaXRlbS5maWxlbmFtZS5sYXN0SW5kZXhPZignLycpICE9PSAtMSA/ICdnY29kZXMvJytpdGVtLmZpbGVuYW1lLnNsaWNlKDAsIGl0ZW0uZmlsZW5hbWUubGFzdEluZGV4T2YoJy8nKSkgOiAnZ2NvZGVzJwoKICAgICAgICAgICAgaWYgKHRodW1ibmFpbCAmJiAncmVsYXRpdmVfcGF0aCcgaW4gdGh1bWJuYWlsKSByZXR1cm4gdGhpcy5hcGlVcmwrJy9zZXJ2ZXIvZmlsZXMvJytwYXRoKycvJytlbmNvZGVVUkkodGh1bWJuYWlsLnJlbGF0aXZlX3BhdGgpKyc/dGltZXN0YW1wPScraXRlbS5tZXRhZGF0YT8ubW9kaWZpZWQuZ2V0VGltZSgpCiAgICAgICAgfQoKICAgICAgICByZXR1cm4gJycKICAgIH0KCiAgICBnZXREZXNjcmlwdGlvbihpdGVtOiBTZXJ2ZXJKb2JRdWV1ZVN0YXRlSm9iKSB7CiAgICAgICAgbGV0IG91dHB1dCA9ICcnCgogICAgICAgIG91dHB1dCArPSB0aGlzLiR0KCdGaWxlcy5GaWxhbWVudCcpKyc6ICcKICAgICAgICBpZiAoaXRlbS5tZXRhZGF0YT8uZmlsYW1lbnRfdG90YWwgfHwgaXRlbS5tZXRhZGF0YS5maWxhbWVudF93ZWlnaHRfdG90YWwpIHsKICAgICAgICAgICAgaWYgKGl0ZW0ubWV0YWRhdGE/LmZpbGFtZW50X3RvdGFsKSBvdXRwdXQgKz0gaXRlbS5tZXRhZGF0YS5maWxhbWVudF90b3RhbC50b0ZpeGVkKCkrJyBtbScKICAgICAgICAgICAgaWYgKGl0ZW0ubWV0YWRhdGE/LmZpbGFtZW50X3RvdGFsICYmIGl0ZW0ubWV0YWRhdGEuZmlsYW1lbnRfd2VpZ2h0X3RvdGFsKSBvdXRwdXQgKz0gJyAvICcKICAgICAgICAgICAgaWYgKGl0ZW0ubWV0YWRhdGE/LmZpbGFtZW50X3dlaWdodF90b3RhbCkgb3V0cHV0ICs9IGl0ZW0ubWV0YWRhdGEuZmlsYW1lbnRfd2VpZ2h0X3RvdGFsLnRvRml4ZWQoMikrJyBnJwogICAgICAgIH0gZWxzZSBvdXRwdXQgKz0gJy0tJwoKICAgICAgICBvdXRwdXQgKz0gJywgJyt0aGlzLiR0KCdGaWxlcy5QcmludFRpbWUnKSsnOiAnCiAgICAgICAgaWYgKGl0ZW0ubWV0YWRhdGE/LmVzdGltYXRlZF90aW1lKSBvdXRwdXQgKz0gZm9ybWF0UHJpbnRUaW1lKGl0ZW0ubWV0YWRhdGEuZXN0aW1hdGVkX3RpbWUpCiAgICAgICAgZWxzZSBvdXRwdXQgKz0gJy0tJwoKICAgICAgICByZXR1cm4gb3V0cHV0CiAgICB9CgogICAgZXhpc3RNZXRhZGF0YShpdGVtOiBTZXJ2ZXJKb2JRdWV1ZVN0YXRlSm9iKSB7CiAgICAgICAgcmV0dXJuIGl0ZW0/Lm1ldGFkYXRhPy5tZXRhZGF0YVB1bGxlZAogICAgfQp9Cg=="},{"version":3,"sources":["JobqueuePanel.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA","file":"JobqueuePanel.vue","sourceRoot":"src/components/panels","sourcesContent":["<template>\n    <div>\n        <panel\n            icon=\"mdi-tray-full\"\n            :title=\"$t('JobQueue.JobQueue')\"\n            card-class=\"jobqueue-panel\"\n        >\n            <template v-slot:buttons>\n                <v-btn\n                    color=\"success\"\n                    @click=\"startJobqueue\"\n                    :loading=\"loadings.includes('startJobqueue')\"\n                    icon\n                    tile\n                    v-if=\"queueState === 'paused'\"\n                    :disabled=\"!klipperReadyForGui\"\n                >\n                    <v-tooltip top>\n                        <template v-slot:activator=\"{ on, attrs }\">\n                            <v-icon v-bind=\"attrs\" v-on=\"on\">mdi-play</v-icon>\n                        </template>\n                        <span>{{ $t('JobQueue.Start') }}</span>\n                    </v-tooltip>\n                </v-btn>\n                <v-btn\n                    color=\"warning\"\n                    @click=\"pauseJobqueue\"\n                    :loading=\"loadings.includes('pauseJobqueue')\"\n                    icon\n                    tile\n                    v-if=\"['ready', 'loading'].includes(queueState)\"\n                >\n                    <v-tooltip top>\n                        <template v-slot:activator=\"{ on, attrs }\">\n                            <v-icon v-bind=\"attrs\" v-on=\"on\">mdi-pause</v-icon>\n                        </template>\n                        <span>{{ $t('JobQueue.Pause') }}</span>\n                    </v-tooltip>\n                </v-btn>\n            </template>\n            <v-data-table\n                :items=\"jobs\"\n                class=\"jobqueue-table\"\n                sort-by=\"time_added\"\n                :items-per-page.sync=\"countPerPage\"\n                :footer-props=\"{\n                    itemsPerPageText: $t('JobQueue.Jobs'),\n                    itemsPerPageAllText: $t('JobQueue.AllJobs'),\n                    itemsPerPageOptions: [10,25,50,100,-1]\n                }\"\n                mobile-breakpoint=\"0\">\n\n                <template #no-data>\n                    <div class=\"text-center\">{{ $t('JobQueue.Empty') }}</div>\n                </template>\n\n                <template #item=\"{ index, item }\">\n                    <tr\n                        :key=\"item.job_id\"\n                        v-longpress:600=\"(e) => showContextMenu(e, item)\"\n                        @contextmenu=\"showContextMenu($event, item)\"\n                        class=\"file-list-cursor user-select-none\"\n                    >\n                        <td class=\"pr-0 text-center\" style=\"width: 32px;\">\n                            <template v-if=\"getSmallThumbnail(item) && getBigThumbnail(item)\">\n                                <v-tooltip v-if=\"!item.isDirectory && getSmallThumbnail(item) && getBigThumbnail(item)\" top content-class=\"tooltip__content-opacity1\">\n                                    <template v-slot:activator=\"{ on, attrs }\">\n                                        <vue-load-image>\n                                            <img slot=\"image\" :src=\"getSmallThumbnail(item)\" width=\"32\" height=\"32\" v-bind=\"attrs\" v-on=\"on\" />\n                                            <v-progress-circular slot=\"preloader\" indeterminate color=\"primary\"></v-progress-circular>\n                                            <v-icon slot=\"error\">mdi-file</v-icon>\n                                        </vue-load-image>\n                                    </template>\n                                    <span><img :src=\"getBigThumbnail(item)\" width=\"250\" /></span>\n                                </v-tooltip>\n                            </template>\n                            <template v-else-if=\"getSmallThumbnail(item)\">\n                                <vue-load-image>\n                                    <img slot=\"image\" :src=\"getSmallThumbnail(item)\" width=\"32\" height=\"32\" />\n                                    <v-progress-circular slot=\"preloader\" indeterminate color=\"primary\"></v-progress-circular>\n                                    <v-icon slot=\"error\">mdi-file</v-icon>\n                                </vue-load-image>\n                            </template>\n                            <template v-else>\n                                <v-icon>mdi-file</v-icon>\n                            </template>\n                        </td>\n                        <td class=\" \">\n                            {{ item.filename }}\n                            <template v-if=\"existMetadata(item)\">\n                                <br />\n                                <small>{{ getDescription(item) }}</small>\n                            </template>\n                        </td>\n                    </tr>\n                </template>\n            </v-data-table>\n        </panel>\n        <v-menu v-model=\"contextMenu.shown\" :position-x=\"contextMenu.x\" :position-y=\"contextMenu.y\" absolute offset-y>\n            <v-list>\n                <v-list-item @click=\"deleteJob(contextMenu.item)\">\n                    <v-icon class=\"mr-1\">mdi-delete</v-icon> {{ $t('JobQueue.Delete') }}\n                </v-list-item>\n            </v-list>\n        </v-menu>\n    </div>\n</template>\n\n<script lang=\"ts\">\nimport {Component, Mixins} from 'vue-property-decorator'\nimport BaseMixin from '@/components/mixins/base'\nimport {ServerHistoryStateJob} from '@/store/server/history/types'\nimport {formatFilesize, formatPrintTime} from '@/plugins/helpers'\nimport Panel from '@/components/ui/Panel.vue'\nimport {ServerJobQueueStateJob} from '@/store/server/jobQueue/types'\nimport {thumbnailBigMin, thumbnailSmallMax, thumbnailSmallMin} from '@/store/variables'\n@Component({\n    components: {Panel}\n})\nexport default class JobqueuePanel extends Mixins(BaseMixin) {\n    formatFilesize = formatFilesize\n\n    private contextMenu = {\n        shown: false,\n        touchTimer: undefined,\n        x: 0,\n        y: 0,\n        item: {}\n    }\n\n    get jobs() {\n        return this.$store.getters['server/jobQueue/getJobs']\n    }\n\n    get queueState() {\n        return this.$store.state.server.jobQueue.queue_state ?? ''\n    }\n\n    get countPerPage() {\n        return this.$store.state.gui.view.jobqueue.countPerPage\n    }\n\n    set countPerPage(newVal) {\n        this.$store.dispatch('gui/saveSetting', { name: 'view.jobqueue.countPerPage', value: newVal })\n    }\n\n    refreshHistory() {\n        this.$socket.emit('server.history.list', { start: 0, limit: 50 }, { action: 'server/history/getHistory' })\n    }\n\n    formatPrintTime(totalSeconds: number) {\n        if (totalSeconds) {\n            let output = ''\n\n            const days = Math.floor(totalSeconds / (3600 * 24))\n            if (days) {\n                totalSeconds %= (3600 * 24)\n                output += days+'d'\n            }\n\n            const hours = Math.floor(totalSeconds / 3600)\n            totalSeconds %= 3600\n            if (hours) output += ' '+hours+'h'\n\n            const minutes = Math.floor(totalSeconds / 60)\n            if (minutes) output += ' '+minutes+'m'\n\n            const seconds = totalSeconds % 60\n            if (seconds) output += ' '+seconds.toFixed(0)+'s'\n\n            return output\n        }\n\n        return '--'\n    }\n    \n    showContextMenu (e: any, item: ServerHistoryStateJob) {\n        if (!this.contextMenu.shown) {\n            e?.preventDefault()\n            this.contextMenu.shown = true\n            this.contextMenu.x = e?.clientX || e?.pageX || window.screenX / 2\n            this.contextMenu.y = e?.clientY || e?.pageY || window.screenY / 2\n            this.contextMenu.item = item\n            this.$nextTick(() => {\n                this.contextMenu.shown = true\n            })\n        }\n    }\n\n    deleteJob(item: ServerJobQueueStateJob) {\n        this.$store.dispatch('server/jobQueue/deleteFromQueue', [item.job_id])\n    }\n\n    startJobqueue() {\n        this.$store.dispatch('server/jobQueue/start')\n    }\n\n    pauseJobqueue() {\n        this.$store.dispatch('server/jobQueue/pause')\n    }\n\n    getSmallThumbnail(item: ServerJobQueueStateJob) {\n        if (item?.metadata?.thumbnails?.length) {\n            const thumbnail = item?.metadata?.thumbnails.find((thumb: any) =>\n                thumb.width >= thumbnailSmallMin && thumb.width <= thumbnailSmallMax &&\n                thumb.height >= thumbnailSmallMin && thumb.height <= thumbnailSmallMax\n            )\n            const path = item.filename.lastIndexOf('/') !== -1 ? 'gcodes/'+item.filename.slice(0, item.filename.lastIndexOf('/')) : 'gcodes'\n\n            if (thumbnail && 'relative_path' in thumbnail) return this.apiUrl+'/server/files/'+path+'/'+encodeURI(thumbnail.relative_path)+'?timestamp='+item.metadata?.modified.getTime()\n        }\n\n        return ''\n    }\n\n    getBigThumbnail(item: ServerJobQueueStateJob) {\n        if (item?.metadata?.thumbnails?.length) {\n            const thumbnail = item?.metadata?.thumbnails.find((thumb: any) => thumb.width >= thumbnailBigMin)\n            const path = item.filename.lastIndexOf('/') !== -1 ? 'gcodes/'+item.filename.slice(0, item.filename.lastIndexOf('/')) : 'gcodes'\n\n            if (thumbnail && 'relative_path' in thumbnail) return this.apiUrl+'/server/files/'+path+'/'+encodeURI(thumbnail.relative_path)+'?timestamp='+item.metadata?.modified.getTime()\n        }\n\n        return ''\n    }\n\n    getDescription(item: ServerJobQueueStateJob) {\n        let output = ''\n\n        output += this.$t('Files.Filament')+': '\n        if (item.metadata?.filament_total || item.metadata.filament_weight_total) {\n            if (item.metadata?.filament_total) output += item.metadata.filament_total.toFixed()+' mm'\n            if (item.metadata?.filament_total && item.metadata.filament_weight_total) output += ' / '\n            if (item.metadata?.filament_weight_total) output += item.metadata.filament_weight_total.toFixed(2)+' g'\n        } else output += '--'\n\n        output += ', '+this.$t('Files.PrintTime')+': '\n        if (item.metadata?.estimated_time) output += formatPrintTime(item.metadata.estimated_time)\n        else output += '--'\n\n        return output\n    }\n\n    existMetadata(item: ServerJobQueueStateJob) {\n        return item?.metadata?.metadataPulled\n    }\n}\n</script>\n"]}]}