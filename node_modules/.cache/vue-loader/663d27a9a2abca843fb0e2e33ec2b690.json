{"remainingRequest":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/components/charts/TempChart.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/components/charts/TempChart.vue","mtime":1644874918000},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js","mtime":1645990064605},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/babel-loader/lib/index.js","mtime":1645990067759},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/ts-loader/index.js","mtime":1645990068168},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js","mtime":1645990064605},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1645990069130}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["TempChart.vue"],"names":[],"mappings":";;;;;;;;;;;;AAYA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"TempChart.vue","sourceRoot":"src/components/charts","sourcesContent":["<template>\n    <ECharts\n        ref=\"tempchart\"\n        :option=\"chartOptions\"\n        :init-options=\"{ renderer: 'svg' }\"\n        style=\"height: 250px; width: 100%;\"\n        v-observe-visibility=\"visibilityChanged\"\n    ></ECharts>\n</template>\n\n<script lang=\"ts\">\n\nimport { convertName } from '@/plugins/helpers'\nimport Component from 'vue-class-component'\nimport {Mixins, Watch} from 'vue-property-decorator'\nimport BaseMixin from '../mixins/base'\nimport {PrinterTempHistoryStateSerie, PrinterTempHistoryStateSourceEntry} from '@/store/printer/tempHistory/types'\n\nimport { createComponent } from 'echarts-for-vue'\nimport * as echarts from 'echarts'\nimport {ECharts} from 'echarts/core'\n\ninterface echartsTooltipObj {\n    [key: string]: any\n}\n\n@Component({\n    components: {\n        ECharts: createComponent({ echarts }),\n    }\n})\nexport default class TempChart extends Mixins(BaseMixin) {\n    convertName = convertName\n\n    $refs!: {\n        tempchart: any\n    }\n\n    private isVisible = true\n    public chartOptions = {\n        darkMode: true,\n        animation: false,\n        tooltip: {\n            animation: false,\n            trigger: 'axis',\n            backgroundColor: 'rgba(0,0,0,0.9)',\n            borderWidth: 0,\n            textStyle: {\n                color: '#fff',\n                fontSize: '14px'\n            },\n            padding: 15,\n            formatter: this.tooltipFormater,\n            confine: true,\n            className: 'echarts-tooltip',\n            position: function (pos: any, params: any, dom: any, rect: any, size: any) {\n                // tooltip will be fixed on the right if mouse hovering on the left,\n                // and on the left if hovering on the right.\n                const obj: echartsTooltipObj = {top: 60}\n                obj[['left', 'right'][+(pos[0] < size.viewSize[0] / 2)]] = 5\n                return obj\n            }\n        },\n        grid: {\n            top: 35,\n            right: 15,\n            bottom: 30,\n            left: 25,\n        },\n        legend: {\n            animation: false,\n            show: false,\n            selected: {}\n        },\n        /*dataZoom: [{\n            type: 'inside',\n        }],*/\n        xAxis: {\n            type: 'time',\n            splitNumber: 5,\n            minInterval: 60*1000,\n            splitLine: {\n                show: true,\n                lineStyle: {\n                    color: 'rgba(255, 255, 255, 0.06)',\n                },\n            },\n            axisLabel: {\n                color: 'rgba(255, 255, 255, 0.24)',\n                margin: 10,\n            },\n        },\n        yAxis: [\n            {\n                name: this.$t('Panels.ToolsPanel.TemperaturesInChart'),\n                type: 'value',\n                min: 0,\n                max: (value: any) => {\n                    if (!this.autoscale) return this.maxTemp\n\n                    return Math.ceil((value.max + 5) / 20) * 20\n                },\n                minInterval: 20,\n                maxInterval: 100,\n                nameLocation: 'end',\n                nameGap: 5,\n                nameTextStyle: {\n                    color: 'rgba(255, 255, 255, 0.24)',\n                    align: 'left',\n                },\n                splitLine: {\n                    lineStyle: {\n                        color: 'rgba(255, 255, 255, 0.12)',\n                    },\n                },\n                axisLabel: {\n                    color: 'rgba(255, 255, 255, 0.24)',\n                    formatter: '{value}',\n                    rotate: 90,\n                    //showMaxLabel: false,\n                    showMinLabel: true,\n                    margin: 5,\n                },\n                axisLine: {\n                    show: true,\n                    lineStyle: {\n                        color: 'rgba(255, 255, 255, 0.12)',\n                    },\n                },\n            }, {\n                show: this.boolDisplayPwmAxis,\n                name: 'PWM [%]',\n                min: 0,\n                max: 1,\n                minInterval: 0.25,\n                type: 'value',\n                nameLocation: 'end',\n                nameGap: 5,\n                nameTextStyle: {\n                    color: 'rgba(255, 255, 255, 0.24)',\n                    align: 'right',\n                },\n                splitLine: {\n                    show: false,\n                },\n                axisLabel: {\n                    color: 'rgba(255, 255, 255, 0.24)',\n                    formatter: (value: number) => { return value * 100 },\n                    showMinLabel: true,\n                    rotate: 90,\n                    margin: 5,\n                },\n                axisLine: {\n                    show: true,\n                    lineStyle: {\n                        color: 'rgba(255, 255, 255, 0.12)',\n                    },\n                }\n            }\n        ],\n        media: [{\n            query: {\n                minWidth: 500,\n            },\n            option: {\n                grid: {\n                    right: 15,\n                    left: 40,\n                },\n                yAxis: [\n                    {\n                        maxInterval: 50,\n                        axisLabel: {\n                            showMinLabel: false,\n                            showMaxLabel: true,\n                            rotate: 0\n                        }\n                    },\n                    {\n                        maxInterval: 25,\n                        axisLabel: {\n                            showMinLabel: false,\n                            rotate: 0\n                        }\n                    },\n                ],\n            }\n        }],\n        dataset: {\n            source: []\n        },\n        series: []\n    }\n\n    get chart (): ECharts | null {\n        const tempchart = this.$refs.tempchart\n        return tempchart?.inst ?? null\n    }\n\n    get maxHistory() {\n        return this.$store.getters['server/getConfig']('server', 'temperature_store_size') ?? 1200\n    }\n\n    get series() {\n        return this.$store.state.printer.tempHistory.series ?? {}\n    }\n\n    get source() {\n        return this.$store.state.printer.tempHistory.source ?? []\n    }\n\n    get autoscale() {\n        return this.$store.state.gui.view.tempchart.autoscale ?? true\n    }\n\n    get maxTemp() {\n        return this.$store.getters['printer/getMaxTemp'] ?? 300\n    }\n\n    get boolDisplayPwmAxis() {\n        return this.$store.getters['printer/tempHistory/getBoolDisplayPwmAxis']\n    }\n\n    get selectedLegends() {\n        return this.$store.getters['printer/tempHistory/getSelectedLegends']\n    }\n\n    mounted() {\n        this.initChart()\n    }\n\n    beforeDestroy() {\n        if (typeof window === 'undefined') return\n        if (this.chart) this.chart.dispose()\n    }\n\n    initChart() {\n        this.chartOptions.series = this.series\n        this.chartOptions.legend.selected = this.selectedLegends\n        this.updateChartPwmAxis()\n    }\n\n    updateChart() {\n        if (this.chart && this.isVisible) {\n            //const t0 = performance.now()\n            const limitDate = new Date(Date.now() - this.maxHistory * 1000)\n            let newSource = [...this.source].filter((entry: PrinterTempHistoryStateSourceEntry) => {\n                return entry.date >= limitDate\n            })\n\n            this.chart?.setOption({\n                dataset: {\n                    source: newSource\n                },\n            })\n\n            //const t1 = performance.now()\n            //window.console.debug('calc chart', (t1-t0).toFixed(), newSource.length, this.source.length)\n\n            // reset tempHistory if working sources are smaller than 80%\n            if (this.source.length > 0 && newSource.length < this.maxHistory * 0.8) {\n                this.$socket.emit('server.temperature_store', {}, { action: 'printer/tempHistory/init' })\n            }\n        }\n    }\n\n    updateChartPwmAxis() {\n        if (this.boolDisplayPwmAxis) {\n            this.chartOptions.yAxis[1].show = true\n            this.chartOptions.grid.right = 25\n            this.chartOptions.media[0].option.grid.right = 35\n        } else {\n            this.chartOptions.yAxis[1].show = false\n            this.chartOptions.grid.right = 15\n            this.chartOptions.media[0].option.grid.right = 15\n        }\n    }\n\n    visibilityChanged (isVisible: boolean) {\n        this.isVisible = isVisible\n\n        if (isVisible) {\n            this.initChart()\n        }\n    }\n\n    tooltipFormater(datasets: any) {\n        let output = ''\n\n        const mainDatasets = datasets.filter((dataset: any) => {\n            if (dataset.seriesName === 'date') return false\n            if (dataset.seriesName.includes('-')) {\n                if (dataset.seriesName.lastIndexOf('-') > -1) {\n                    const suffix = dataset.seriesName.slice(dataset.seriesName.lastIndexOf('-') + 1)\n                    return !['target', 'power'].includes(suffix)\n                }\n\n                return true\n            }\n\n            return true\n        })\n        if (datasets.length) {\n            let outputTime = datasets[0]['axisValueLabel']\n            outputTime = outputTime.substr(outputTime.indexOf(' '))\n\n            output +=\n                '<div class=\"row\">' +\n                '<div class=\"col py-1\" style=\\'border-bottom: 1px solid rgba(255, 255, 255, 0.24);\\'>' +\n                '<span class=\\'v-icon mdi mdi-clock theme-dark\\' style=\\'font-size: 14px; margin-right: 5px;\\'></span>' +\n                '<span class=\\'font-weight-bold\\'>'+outputTime+'</span>' +\n                '</div>' +\n                '</div>'\n        }\n\n        mainDatasets.forEach((dataset: any) => {\n            output += '<div class=\"row\">'\n\n            output += '<div class=\"col-auto py-0\">'\n            output += dataset.marker\n            output += '<span class=\\'ml-2\\'>'+convertName(dataset.seriesName)+':</span>'\n            output += '</div>'\n\n            output += '<div class=\"col text-right py-0 font-weight-bold\">'\n\n            if (dataset.seriesName in dataset.value) output += dataset.value[dataset.seriesName].toFixed(1)\n            if (dataset.seriesName+'-target' in dataset.value) output += ' / '+dataset.value[dataset.seriesName+'-target'].toFixed(1)\n            output += '°C'\n\n            if (dataset.seriesName+'-power' in dataset.value) output += ' [ '+(dataset.value[dataset.seriesName+'-power']*100).toFixed(0)+'% ]'\n            if (dataset.seriesName+'-speed' in dataset.value) output += ' [ '+(dataset.value[dataset.seriesName+'-speed']*100).toFixed(0)+'% ]'\n\n            output += '</div>'\n            output += '</div>'\n        })\n\n        return output\n    }\n\n    @Watch('series', { deep: true })\n    seriesChanged(newVal: PrinterTempHistoryStateSerie[]) {\n        if (this.chart && this.chart?.isDisposed() !== true) {\n            this.chart.setOption({\n                series: newVal\n            })\n        }\n    }\n\n    @Watch('source')\n    sourceChanged() {\n        if (this.chart?.isDisposed() !== true) {\n            this.updateChart()\n        }\n    }\n\n    @Watch('selectedLegends')\n    selectedLegendsChanged(newVal: any, oldVal:any) {\n        if (this.chart?.isDisposed() !== true) {\n            Object.keys(newVal).forEach((key) => {\n                if (newVal[key] !== oldVal[key]) {\n                    const actionType = newVal[key] ? 'legendSelect' : 'legendUnSelect'\n                    this.chart?.dispatchAction({ type: actionType, name: key })\n                }\n            })\n        }\n    }\n\n    @Watch('boolDisplayPwmAxis')\n    boolDisplayPwmAxisChanged() {\n        this.updateChartPwmAxis()\n    }\n}\n</script>"]}]}