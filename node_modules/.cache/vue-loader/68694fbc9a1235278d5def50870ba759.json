{"remainingRequest":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/components/inputs/Codemirror.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/components/inputs/Codemirror.vue","mtime":1644874918000},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1645990066541},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1645990070825},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/postcss-loader/src/index.js","mtime":1645990067674},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js","mtime":1645990064605},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1645990069130}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci52dWUtY29kZW1pcnJvciAuY20tZWRpdG9yIHsKCn0K"},{"version":3,"sources":["Codemirror.vue"],"names":[],"mappings":";AACA;;AAEA","file":"Codemirror.vue","sourceRoot":"src/components/inputs","sourcesContent":["<style>\n    .vue-codemirror .cm-editor {\n\n    }\n</style>\n\n<template>\n    <div class=\"vue-codemirror\">\n        <div ref=\"codemirror\" v-observe-visibility=\"visibilityChanged\"></div>\n    </div>\n</template>\n\n<script lang=\"ts\">\n// Inspired by these repo: https://github.com/surmon-china/vue-codemirror\n\nimport {Component, Mixins, Prop, Watch} from 'vue-property-decorator'\nimport BaseMixin from '../mixins/base'\nimport {basicSetup, EditorState} from '@codemirror/basic-setup'\nimport {mainsailTheme} from '@/plugins/codemirrorTheme'\nimport {StreamLanguage} from '@codemirror/stream-parser'\nimport { klipper_config } from '@/plugins/StreamParserKlipperConfig'\nimport { gcode } from '@/plugins/StreamParserGcode'\nimport {EditorView, keymap} from '@codemirror/view'\nimport {indentWithTab} from '@codemirror/commands'\nimport {json} from '@codemirror/lang-json'\n\n@Component\nexport default class Codemirror extends Mixins(BaseMixin) {\n    private content = ''\n    private codemirror: null | EditorView = null\n    private cminstance: null | EditorView = null\n\n    $refs!: {\n        codemirror: HTMLElement\n    }\n\n    @Prop({ required: false, default: '' })\n    readonly code!: string\n\n    @Prop({ required: false, default: '' })\n    value!: string\n\n    @Prop({ required: false, default: 'codemirror' })\n    readonly name!: string\n\n    @Prop({ required: false, default: '' })\n    readonly fileExtension!: string\n\n    @Watch('value')\n    valueChanged(newVal: string) {\n        const cm_value = this.cminstance?.state?.doc.toString()\n        if (newVal !== cm_value) {\n            this.setCmValue(newVal)\n        }\n    }\n\n    mounted(): void {\n        this.initialize()\n    }\n\n    beforeDestroy() {\n        this.destroy()\n    }\n\n    destroy() {\n        this.cminstance?.destroy()\n    }\n\n    initialize() {\n        this.codemirror = new EditorView({\n            parent: this.$refs.codemirror,\n        })\n        this.cminstance = this.codemirror\n\n        this.$nextTick(() => {\n            this.setCmValue(this.code || this.value || this.content)\n\n            this.$emit('ready', this.codemirror)\n        })\n    }\n\n    setCmValue(content: string) {\n        this.cminstance?.setState(EditorState.create({ doc: content, extensions: this.cmExtensions }))\n    }\n\n    get cmExtensions() {\n        const extensions = [\n            basicSetup,\n            mainsailTheme,\n            keymap.of([indentWithTab]),\n            EditorView.updateListener.of(update => {\n                this.content = update.state?.doc.toString()\n                if (this.$emit) {\n                    this.$emit('input', this.content)\n                }\n            }),\n        ]\n\n        if (['cfg', 'conf'].includes(this.fileExtension))\n            extensions.push(StreamLanguage.define(klipper_config))\n        else if (['gcode'].includes(this.fileExtension))\n            extensions.push(StreamLanguage.define(gcode))\n        else if (['json'].includes(this.fileExtension))\n            extensions.push(json())\n\n        return extensions\n    }\n\n    visibilityChanged(isVisible: boolean) {\n        if (isVisible) this.cminstance?.focus()\n    }\n}\n</script>\n"]}]}