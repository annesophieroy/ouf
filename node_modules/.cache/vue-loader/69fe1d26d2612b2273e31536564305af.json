{"remainingRequest":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/App.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/App.vue","mtime":1644874918000},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js","mtime":1645990064605},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/thread-loader/dist/cjs.js","mtime":1645990064416},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/babel-loader/lib/index.js","mtime":1645990067759},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/ts-loader/index.js","mtime":1645990068168},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js","mtime":1645990064605},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1645990069130}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}