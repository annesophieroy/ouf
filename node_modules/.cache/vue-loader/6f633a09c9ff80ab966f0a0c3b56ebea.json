{"remainingRequest":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/components/gcodeviewer/Viewer.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/components/gcodeviewer/Viewer.vue","mtime":1644874918000},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js","mtime":1645990064605},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/babel-loader/lib/index.js","mtime":1645990067759},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/ts-loader/index.js","mtime":1645990068168},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js","mtime":1645990064605},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1645990069130}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCmltcG9ydCB7Q29tcG9uZW50LCBNaXhpbnMsIFByb3AsIFJlZiwgV2F0Y2h9IGZyb20gJ3Z1ZS1wcm9wZXJ0eS1kZWNvcmF0b3InCmltcG9ydCBCYXNlTWl4aW4gZnJvbSAnLi4vbWl4aW5zL2Jhc2UnCi8vIEB0cy1pZ25vcmUKaW1wb3J0IEdDb2RlVmlld2VyIGZyb20gJ0BzaW5kYXJpdXMvZ2NvZGV2aWV3ZXInCmltcG9ydCBheGlvcyBmcm9tICdheGlvcycKaW1wb3J0IHtmb3JtYXRGaWxlc2l6ZX0gZnJvbSAnQC9wbHVnaW5zL2hlbHBlcnMnCmltcG9ydCBQYW5lbCBmcm9tICdAL2NvbXBvbmVudHMvdWkvUGFuZWwudnVlJwoKaW50ZXJmYWNlIGRvd25sb2FkU25hY2tiYXIgewogICAgc3RhdHVzOiBib29sZWFuCiAgICBmaWxlbmFtZTogc3RyaW5nCiAgICBwZXJjZW50OiBudW1iZXIKICAgIHNwZWVkOiBudW1iZXIKICAgIHRvdGFsOiBudW1iZXIKICAgIGNhbmNlbFRva2VuU291cmNlOiBhbnkKICAgIGxhc3RQcm9ncmVzczogewogICAgICAgIHRpbWU6IG51bWJlcgogICAgICAgIGxvYWRlZDogbnVtYmVyCiAgICB9Cn0KCmxldCB2aWV3ZXI6IGFueSA9IG51bGwKQENvbXBvbmVudCh7CiAgICBjb21wb25lbnRzOiB7UGFuZWx9Cn0pCmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZpZXdlciBleHRlbmRzIE1peGlucyhCYXNlTWl4aW4pIHsKICAgIGZvcm1hdEZpbGVzaXplID0gZm9ybWF0RmlsZXNpemUKCiAgICBwcml2YXRlIGlzQnVzeSA9IGZhbHNlCiAgICBwcml2YXRlIGxvYWRpbmcgPSBmYWxzZQogICAgcHJpdmF0ZSBsb2FkaW5nUGVyY2VudCA9IDAKCiAgICBwcml2YXRlIHRyYWNraW5nID0gZmFsc2UKICAgIHByaXZhdGUgbG9hZGVkRmlsZTogc3RyaW5nIHwgbnVsbCA9IG51bGwKCiAgICBwcml2YXRlIHJlbG9hZFJlcXVpcmVkID0gZmFsc2UKICAgIHByaXZhdGUgZmlsZVNpemUgPSAwCiAgICBwcml2YXRlIG1heFpTbGlkZXIgPSAxMDAwMDAKICAgIHByaXZhdGUgelNsaWRlciA9IHRoaXMubWF4WlNsaWRlcgogICAgcHJpdmF0ZSB6U2xpY2VySGVpZ2h0ID0gMTAwCiAgICBwcml2YXRlIHJlbmRlclF1YWxpdHkgPSB0aGlzLnJlbmRlclF1YWxpdGllc1syXQoKICAgIHByaXZhdGUgZG93bmxvYWRTbmFja2JhcjogZG93bmxvYWRTbmFja2JhciA9IHsKICAgICAgICBzdGF0dXM6IGZhbHNlLAogICAgICAgIGZpbGVuYW1lOiAnJywKICAgICAgICBwZXJjZW50OiAwLAogICAgICAgIHNwZWVkOiAwLAogICAgICAgIHRvdGFsOiAwLAogICAgICAgIGNhbmNlbFRva2VuU291cmNlOiB7fSwKICAgICAgICBsYXN0UHJvZ3Jlc3M6IHsKICAgICAgICAgICAgdGltZTogMCwKICAgICAgICAgICAgbG9hZGVkOiAwCiAgICAgICAgfQogICAgfQoKICAgIEBQcm9wKHt0eXBlOiBTdHJpbmcsIGRlZmF1bHQ6ICcnLCByZXF1aXJlZDogZmFsc2V9KSBmaWxlbmFtZSE6IHN0cmluZwogICAgQFJlZignZmlsZUlucHV0JykgZmlsZUlucHV0ITogSFRNTElucHV0RWxlbWVudAogICAgLy9AUmVmKCd2aWV3ZXJDYW52YXNDb250YWluZXInKSB2aWV3ZXJDYW52YXNDb250YWluZXIhOiBIVE1MRWxlbWVudAoKICAgICRyZWZzITogewogICAgICAgIHZpZXdlckNhbnZhc0NvbnRhaW5lcjogSFRNTEVsZW1lbnQKICAgIH0KCiAgICBnZXQgcmVuZGVyUXVhbGl0aWVzKCkgewogICAgICAgIHJldHVybiBbCiAgICAgICAgICAgIHsgbGFiZWw6IHRoaXMuJHQoJ0dDb2RlVmlld2VyLkxvdycpLCAgICB2YWx1ZTogMiB9LAogICAgICAgICAgICB7IGxhYmVsOiB0aGlzLiR0KCdHQ29kZVZpZXdlci5NZWRpdW0nKSwgdmFsdWU6IDMgfSwKICAgICAgICAgICAgeyBsYWJlbDogdGhpcy4kdCgnR0NvZGVWaWV3ZXIuSGlnaCcpLCAgIHZhbHVlOiA0IH0sCiAgICAgICAgICAgIHsgbGFiZWw6IHRoaXMuJHQoJ0dDb2RlVmlld2VyLlVsdHJhJyksICB2YWx1ZTogNSB9LAogICAgICAgICAgICB7IGxhYmVsOiB0aGlzLiR0KCdHQ29kZVZpZXdlci5NYXgnKSwgICAgdmFsdWU6IDYgfSwKICAgICAgICBdCiAgICB9CgogICAgYXN5bmMgbW91bnRlZCgpIHsKICAgICAgICB0aGlzLmxvYWRlZEZpbGUgPSB0aGlzLiRzdG9yZS5zdGF0ZS5nY29kZXZpZXdlcj8ubG9hZGVkRmlsZUJhY2t1cCA/PyBudWxsCiAgICAgICAgdmlld2VyID0gdGhpcy4kc3RvcmUuc3RhdGUuZ2NvZGV2aWV3ZXI/LnZpZXdlckJhY2t1cCA/PyBudWxsCgogICAgICAgIGF3YWl0IHRoaXMuaW5pdCgpCgogICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLmV2ZW50TGlzdGVuZXJSZXNpemUpCiAgICB9CgogICAgYmVmb3JlRGVzdHJveSgpIHsKICAgICAgICBpZiAodmlld2VyKSB7CiAgICAgICAgICAgIHZpZXdlci5nY29kZVByb2Nlc3Nvci5sb2FkaW5nUHJvZ3Jlc3NDYWxsYmFjayA9IG51bGwKICAgICAgICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2djb2Rldmlld2VyL3NldExvYWRlZEZpbGVCYWNrdXAnLCB0aGlzLmxvYWRlZEZpbGUpCiAgICAgICAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdnY29kZXZpZXdlci9zZXRWaWV3ZXJCYWNrdXAnLCB2aWV3ZXIpCiAgICAgICAgfQoKICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5ldmVudExpc3RlbmVyUmVzaXplKQogICAgfQoKICAgIGV2ZW50TGlzdGVuZXJSZXNpemUoKSB7CiAgICAgICAgdmlld2VyPy5yZXNpemUoKQogICAgfQoKICAgIGdldCBmaWxlUG9zaXRpb24oKSB7CiAgICAgICAgcmV0dXJuIHRoaXMucHJpbnRlcklzUHJpbnRpbmcgPyB0aGlzLiRzdG9yZS5zdGF0ZS5wcmludGVyLnZpcnR1YWxfc2RjYXJkLmZpbGVfcG9zaXRpb24gOiAwCiAgICB9CgogICAgZ2V0IHNkQ2FyZEZpbGVQYXRoKCkgewogICAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS5wcmludGVyLnByaW50X3N0YXRzPy5maWxlbmFtZSA/PyAnJwogICAgfQoKICAgIGdldCBjdXJyZW50UG9zaXRpb24oKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLnByaW50ZXIubW90aW9uX3JlcG9ydD8ubGl2ZV9wb3NpdGlvbiA/PyBbMCwgMCwgMCwgMF0KICAgIH0KCiAgICBnZXQgc2hvd1RyYWNraW5nQnV0dG9uKCkgewogICAgICAgIHJldHVybiB0aGlzLnByaW50ZXJJc1ByaW50aW5nICYmIHRoaXMuc2RDYXJkRmlsZVBhdGggPT09IHRoaXMubG9hZGVkRmlsZQogICAgfQoKICAgIGdldCBwcmludGluZ19vYmplY3RzKCkgewogICAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS5wcmludGVyLmV4Y2x1ZGVfb2JqZWN0Py5vYmplY3RzID8/IFtdCiAgICB9CgogICAgZ2V0IGV4Y2x1ZGVkX29iamVjdHMoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLnByaW50ZXIuZXhjbHVkZV9vYmplY3Q/LmV4Y2x1ZGVkX29iamVjdHMgPz8gW10KICAgIH0KCiAgICBnZXQgbm96emxlX2RpYW1ldGVyKCkgewogICAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS5wcmludGVyLmNvbmZpZ2ZpbGU/LnNldHRpbmdzPy5leHRydWRlcj8ubm96emxlX2RpYW1ldGVyID8/IDAuNAogICAgfQoKICAgIGFzeW5jIGluaXQoKSB7CiAgICAgICAgbGV0IGNhbnZhc0VsZW1lbnQgPSB0aGlzLiRzdG9yZS5zdGF0ZS5nY29kZXZpZXdlcj8uY2FudmFzQmFja3VwID8/IG51bGwKCiAgICAgICAgaWYgKGNhbnZhc0VsZW1lbnQgPT09IG51bGwpIHsKICAgICAgICAgICAgY2FudmFzRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpCiAgICAgICAgICAgIGNhbnZhc0VsZW1lbnQuY2xhc3NOYW1lID0gJ3ZpZXdlcicKICAgICAgICAgICAgdGhpcy4kcmVmcy52aWV3ZXJDYW52YXNDb250YWluZXIuYXBwZW5kQ2hpbGQoY2FudmFzRWxlbWVudCkKICAgICAgICAgICAgYXdhaXQgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2djb2Rldmlld2VyL3NldENhbnZhc0JhY2t1cCcsIGNhbnZhc0VsZW1lbnQpCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGhpcy4kcmVmcy52aWV3ZXJDYW52YXNDb250YWluZXIuYXBwZW5kQ2hpbGQoY2FudmFzRWxlbWVudCkKICAgICAgICAgICAgaWYgKHZpZXdlcj8uZ2NvZGVQcm9jZXNzb3IpIHsKICAgICAgICAgICAgICAgIHZpZXdlci5nY29kZVByb2Nlc3Nvci51cGRhdGVGaWxlUG9zaXRpb24odmlld2VyPy5maWxlU2l6ZSkKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKHZpZXdlciA9PT0gbnVsbCkgewogICAgICAgICAgICBhd2FpdCB0aGlzLnZpZXdlckluaXQoY2FudmFzRWxlbWVudCkKICAgICAgICB9CgogICAgICAgIHRoaXMucmVnaXN0ZXJQcm9ncmVzc0NhbGxiYWNrKCkKCiAgICAgICAgaWYgKHRoaXMuJHJvdXRlLnF1ZXJ5Py5maWxlbmFtZSAmJiB0aGlzLmxvYWRlZEZpbGUgIT09IHRoaXMuJHJvdXRlLnF1ZXJ5Py5maWxlbmFtZT8udG9TdHJpbmcoKSkgewogICAgICAgICAgICAvL1RPRE86IHRlc3Qgd2l0aG91dCBzbGVlcAogICAgICAgICAgICBhd2FpdCB0aGlzLnNsZWVwKDEwMDApIC8vR2l2ZSB0aGUgc3RvcmUgYSBjaGFuY2UgdG8gaW5pdGlhbGl6IGJlZm9yZSBsb2FkaW5nIHRoZSBmaWxlLgogICAgICAgICAgICBhd2FpdCB0aGlzLmxvYWRGaWxlKHRoaXMuJHJvdXRlLnF1ZXJ5LmZpbGVuYW1lLnRvU3RyaW5nKCkpCiAgICAgICAgfQogICAgfQoKICAgIHZpZXdlckluaXQoZWxlbWVudDogSFRNTENhbnZhc0VsZW1lbnQpIHsKICAgICAgICB2aWV3ZXIgPSBuZXcgR0NvZGVWaWV3ZXIoZWxlbWVudCkKICAgICAgICB2aWV3ZXIuaW5pdCgpCiAgICAgICAgdmlld2VyLnNldEJhY2tncm91bmRDb2xvcih0aGlzLmJhY2tncm91bmRDb2xvcikKICAgICAgICB2aWV3ZXIuYmVkLnNldEJlZENvbG9yKHRoaXMuZ3JpZENvbG9yKQogICAgICAgIHZpZXdlci5zZXRDdXJzb3JWaXNpYmxpdHkodGhpcy5zaG93Q3Vyc29yKQogICAgICAgIHZpZXdlci5zZXRaQ2xpcFBsYW5lKDEwMDAwMDAsIC0xMDAwMDAwKQogICAgICAgIHZpZXdlci5heGVzLnNob3codGhpcy5zaG93QXhlcykKICAgICAgICB2aWV3ZXIuYmVkLnNldERlbHRhKHRoaXMua2luZW1hdGljcy5pbmNsdWRlcygnZGVsdGEnKSkKCiAgICAgICAgaWYgKHRoaXMuYmVkTWF4U2l6ZSAhPT0gbnVsbCkgewogICAgICAgICAgICB2aWV3ZXIuYmVkLmJ1aWxkVm9sdW1lWyd4J10ubWF4ID0gdGhpcy5iZWRNYXhTaXplWzBdCiAgICAgICAgICAgIHZpZXdlci5iZWQuYnVpbGRWb2x1bWVbJ3knXS5tYXggPSB0aGlzLmJlZE1heFNpemVbMV0KICAgICAgICAgICAgdmlld2VyLmJlZC5idWlsZFZvbHVtZVsneiddLm1heCA9IHRoaXMuYmVkTWF4U2l6ZVsyXQogICAgICAgIH0KCiAgICAgICAgaWYgKHRoaXMuYmVkTWluU2l6ZSAhPT0gbnVsbCkgewogICAgICAgICAgICB2aWV3ZXIuYmVkLmJ1aWxkVm9sdW1lWyd4J10ubWluID0gdGhpcy5iZWRNaW5TaXplWzBdCiAgICAgICAgICAgIHZpZXdlci5iZWQuYnVpbGRWb2x1bWVbJ3knXS5taW4gPSB0aGlzLmJlZE1pblNpemVbMV0KICAgICAgICAgICAgdmlld2VyLmJlZC5idWlsZFZvbHVtZVsneiddLm1pbiA9IHRoaXMuYmVkTWluU2l6ZVsyXQogICAgICAgIH0KCiAgICAgICAgdmlld2VyLmdjb2RlUHJvY2Vzc29yLnVzZUhpZ2hRdWFsaXR5RXh0cnVzaW9uKHRoaXMuaGRSZW5kZXJpbmcpCiAgICAgICAgdmlld2VyLmdjb2RlUHJvY2Vzc29yLnVwZGF0ZUZvcmNlV2lyZU1vZGUodGhpcy5mb3JjZUxpbmVSZW5kZXJpbmcpCiAgICAgICAgdmlld2VyLmdjb2RlUHJvY2Vzc29yLnNldEFscGhhKHRoaXMudHJhbnNwYXJlbmN5KQogICAgICAgIHZpZXdlci5nY29kZVByb2Nlc3Nvci5zZXRWb3hlbE1vZGUodGhpcy52b3hlbE1vZGUpCiAgICAgICAgdmlld2VyLmdjb2RlUHJvY2Vzc29yLnZveGVsV2lkdGggPSB0aGlzLnZveGVsV2lkdGgKICAgICAgICB2aWV3ZXIuZ2NvZGVQcm9jZXNzb3Iudm94ZWxIZWlnaHQgPSB0aGlzLnZveGVsSGVpZ2h0CiAgICAgICAgdmlld2VyLmdjb2RlUHJvY2Vzc29yLnVzZVNwZWN1bGFyQ29sb3IodGhpcy5zcGVjdWxhckxpZ2h0aW5nKQogICAgICAgIHZpZXdlci5nY29kZVByb2Nlc3Nvci5zZXRMaXZlVHJhY2tpbmcoZmFsc2UpCgogICAgICAgIHRoaXMubG9hZFRvb2xDb2xvcnModGhpcy5leHRydWRlckNvbG9ycykKCiAgICAgICAgaWYgKHZpZXdlci5sYXN0TG9hZEZhaWxlZCgpKSB7CiAgICAgICAgICAgIHRoaXMucmVuZGVyUXVhbGl0eSA9IHRoaXMucmVuZGVyUXVhbGl0aWVzWzBdCiAgICAgICAgICAgIHZpZXdlci51cGRhdGVSZW5kZXJRdWFsaXR5KDEpCiAgICAgICAgICAgIHZpZXdlci5jbGVhckxvYWRGbGFnKCkKICAgICAgICB9CiAgICB9CgogICAgcmVnaXN0ZXJQcm9ncmVzc0NhbGxiYWNrKCkgewogICAgICAgIGlmICh2aWV3ZXIpIHsKICAgICAgICAgICAgdmlld2VyLmdjb2RlUHJvY2Vzc29yLmxvYWRpbmdQcm9ncmVzc0NhbGxiYWNrID0gKHByb2dyZXNzOiBudW1iZXIpID0+IHsKICAgICAgICAgICAgICAgIHRoaXMubG9hZGluZ1BlcmNlbnQgPSBNYXRoLmNlaWwocHJvZ3Jlc3MgKiAxMDApCiAgICAgICAgICAgICAgICB0aGlzLmxvYWRpbmcgPSB0aGlzLmxvYWRpbmdQZXJjZW50IDw9IDk5CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICAKICAgIGFzeW5jIGNhbmNlbFJlbmRlcmluZygpIHsKICAgICAgICBpZiAodmlld2VyKSB7CiAgICAgICAgICAgIHZpZXdlci5nY29kZVByb2Nlc3Nvci5jYW5jZWxMb2FkID0gdHJ1ZQogICAgICAgICAgICBhd2FpdCB0aGlzLnNsZWVwKDEwMDApCiAgICAgICAgfQogICAgfQoKICAgIGNsZWFyTG9hZGVkRmlsZSgpIHsKICAgICAgICBpZiAodmlld2VyKSB7CiAgICAgICAgICAgIHZpZXdlci5jbGVhclNjZW5lKHRydWUpCiAgICAgICAgICAgIHRoaXMubG9hZGVkRmlsZSA9IG51bGwKICAgICAgICAgICAgdGhpcy50cmFja2luZyA9IGZhbHNlCiAgICAgICAgfQogICAgfQoKICAgIGNob29zZUZpbGUoKSB7CiAgICAgICAgaWYgKCF0aGlzLmlzQnVzeSkgewogICAgICAgICAgICB0aGlzLmZpbGVJbnB1dC5jbGljaygpCiAgICAgICAgfQogICAgfQoKICAgIGZpbmlzaExvYWQoKSB7CiAgICAgICAgdGhpcy5tYXhaU2xpZGVyID0gdmlld2VyLmdldE1heEhlaWdodCgpICsgMQogICAgICAgIHRoaXMuelNsaWRlciA9IHRoaXMubWF4WlNsaWRlcgogICAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlCiAgICAgICAgdmlld2VyLnNldEN1cnNvclZpc2libGl0eSh0aGlzLnNob3dDdXJzb3IpCgogICAgICAgIGlmICh0aGlzLmxvYWRlZEZpbGUgPT09IHRoaXMuc2RDYXJkRmlsZVBhdGggJiYgdGhpcy5wcmludGluZ19vYmplY3RzLmxlbmd0aCkgewogICAgICAgICAgICBsZXQgb2JqZWN0czogYW55ID0gW10KCiAgICAgICAgICAgIHRoaXMucHJpbnRpbmdfb2JqZWN0cy5mb3JFYWNoKChvYmplY3Q6IGFueSkgPT4gewogICAgICAgICAgICAgICAgY29uc3QgeFZhbHVlcyA9IG9iamVjdC5wb2x5Z29uLm1hcCgocG9pbnQ6IG51bWJlcltdKSA9PiBwb2ludFswXSkKICAgICAgICAgICAgICAgIGNvbnN0IHlWYWx1ZXMgPSBvYmplY3QucG9seWdvbi5tYXAoKHBvaW50OiBudW1iZXJbXSkgPT4gcG9pbnRbMV0pCgogICAgICAgICAgICAgICAgb2JqZWN0cy5wdXNoKHsKICAgICAgICAgICAgICAgICAgICBjYW5jZWxsZWQ6IHRoaXMuZXhjbHVkZWRfb2JqZWN0cy5pbmNsdWRlcyhvYmplY3QubmFtZSksCiAgICAgICAgICAgICAgICAgICAgbmFtZTogb2JqZWN0Lm5hbWUsCiAgICAgICAgICAgICAgICAgICAgeDogW01hdGgubWluKC4uLnhWYWx1ZXMpLCBNYXRoLm1heCguLi54VmFsdWVzKV0sCiAgICAgICAgICAgICAgICAgICAgeTogW01hdGgubWluKC4uLnlWYWx1ZXMpLCBNYXRoLm1heCguLi55VmFsdWVzKV0sCiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICB9KQoKICAgICAgICAgICAgdmlld2VyLmJ1aWxkT2JqZWN0cy5sb2FkT2JqZWN0Qm91bmRhcmllcyhvYmplY3RzKQogICAgICAgICAgICB2aWV3ZXIuYnVpbGRPYmplY3RzLnNob3dPYmplY3RTZWxlY3Rpb24odGhpcy5zaG93T2JqZWN0U2VsZWN0aW9uKQogICAgICAgIH0KCiAgICAgICAgdmlld2VyLmdjb2RlUHJvY2Vzc29yLnVwZGF0ZUZpbGVQb3NpdGlvbih2aWV3ZXIuZmlsZVNpemUpCiAgICB9CgogICAgYXN5bmMgZmlsZVNlbGVjdGVkKGU6IGFueSkgewogICAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCkKICAgICAgICByZWFkZXIuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGFzeW5jIChldmVudCkgPT4gewogICAgICAgICAgICBpZiAoIWV2ZW50IHx8ICFldmVudC50YXJnZXQpIHJldHVybgogICAgICAgICAgICBjb25zdCBibG9iID0gZXZlbnQudGFyZ2V0LnJlc3VsdAogICAgICAgICAgICBpZiAodHlwZW9mIGJsb2IgPT09ICdzdHJpbmcnKSB7CiAgICAgICAgICAgICAgICB0aGlzLmZpbGVTaXplID0gYmxvYi5sZW5ndGgKICAgICAgICAgICAgICAgIC8vIERvIHNvbWV0aGluZyB3aXRoIHJlc3VsdAogICAgICAgICAgICAgICAgYXdhaXQgdmlld2VyLnByb2Nlc3NGaWxlKGJsb2IpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgdGhpcy5maW5pc2hMb2FkKCkKICAgICAgICB9KQogICAgICAgIHRoaXMudHJhY2tpbmcgPSBmYWxzZQogICAgICAgIGlmIChlLnRhcmdldC5maWxlcz8ubGVuZ3RoKSB7CiAgICAgICAgICAgIHRoaXMubG9hZGVkRmlsZSA9IGU/LnRhcmdldD8uZmlsZXNbMF0ubmFtZQogICAgICAgICAgICByZWFkZXIucmVhZEFzVGV4dChlLnRhcmdldC5maWxlc1swXSkKICAgICAgICB9CiAgICAgICAgZS50YXJnZXQudmFsdWUgPSAnJwogICAgfQoKICAgIGFzeW5jIGxvYWRGaWxlKGZpbGVuYW1lOiBzdHJpbmcpIHsKICAgICAgICB0aGlzLmRvd25sb2FkU25hY2tiYXIuc3RhdHVzID0gdHJ1ZQogICAgICAgIHRoaXMuZG93bmxvYWRTbmFja2Jhci5zcGVlZCA9IDAKICAgICAgICB0aGlzLmRvd25sb2FkU25hY2tiYXIubGFzdFByb2dyZXNzLnRpbWUgPSAwCiAgICAgICAgdGhpcy5kb3dubG9hZFNuYWNrYmFyLmZpbGVuYW1lID0gZmlsZW5hbWUuc3RhcnRzV2l0aCgnZ2NvZGVzLycpID8gZmlsZW5hbWUuc2xpY2UoNykgOiBmaWxlbmFtZQogICAgICAgIGNvbnN0IENhbmNlbFRva2VuID0gYXhpb3MuQ2FuY2VsVG9rZW4KICAgICAgICB0aGlzLmRvd25sb2FkU25hY2tiYXIuY2FuY2VsVG9rZW5Tb3VyY2UgPSBDYW5jZWxUb2tlbi5zb3VyY2UoKQogICAgICAgIGNvbnN0IHRleHQgPSBhd2FpdCBheGlvcy5nZXQodGhpcy5hcGlVcmwgKyAnL3NlcnZlci9maWxlcy8nICsgZW5jb2RlVVJJKGZpbGVuYW1lKSwgewogICAgICAgICAgICBjYW5jZWxUb2tlbjogdGhpcy5kb3dubG9hZFNuYWNrYmFyLmNhbmNlbFRva2VuU291cmNlLnRva2VuLAogICAgICAgICAgICByZXNwb25zZVR5cGU6ICdibG9iJywKICAgICAgICAgICAgb25Eb3dubG9hZFByb2dyZXNzOiAocHJvZ3Jlc3NFdmVudCkgPT4gewogICAgICAgICAgICAgICAgdGhpcy5kb3dubG9hZFNuYWNrYmFyLnBlcmNlbnQgPSAocHJvZ3Jlc3NFdmVudC5sb2FkZWQgKiAxMDApIC8gcHJvZ3Jlc3NFdmVudC50b3RhbAogICAgICAgICAgICAgICAgaWYgKHRoaXMuZG93bmxvYWRTbmFja2Jhci5sYXN0UHJvZ3Jlc3MudGltZSkgewogICAgICAgICAgICAgICAgICAgIGNvbnN0IHRpbWUgPSBwcm9ncmVzc0V2ZW50LnRpbWVTdGFtcCAtIHRoaXMuZG93bmxvYWRTbmFja2Jhci5sYXN0UHJvZ3Jlc3MudGltZQogICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBwcm9ncmVzc0V2ZW50LmxvYWRlZCAtIHRoaXMuZG93bmxvYWRTbmFja2Jhci5sYXN0UHJvZ3Jlc3MubG9hZGVkCgogICAgICAgICAgICAgICAgICAgIGlmICh0aW1lID4gMTAwMCB8fCB0aGlzLmRvd25sb2FkU25hY2tiYXIuc3BlZWQgPT09IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kb3dubG9hZFNuYWNrYmFyLnNwZWVkID0gZGF0YSAvICh0aW1lIC8gMTAwMCkKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kb3dubG9hZFNuYWNrYmFyLmxhc3RQcm9ncmVzcy50aW1lID0gcHJvZ3Jlc3NFdmVudC50aW1lU3RhbXAKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kb3dubG9hZFNuYWNrYmFyLmxhc3RQcm9ncmVzcy5sb2FkZWQgPSBwcm9ncmVzc0V2ZW50LmxvYWRlZAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gZWxzZSB0aGlzLmRvd25sb2FkU25hY2tiYXIubGFzdFByb2dyZXNzLnRpbWUgPSBwcm9ncmVzc0V2ZW50LnRpbWVTdGFtcAoKICAgICAgICAgICAgICAgIHRoaXMuZG93bmxvYWRTbmFja2Jhci50b3RhbCA9IHByb2dyZXNzRXZlbnQudG90YWwKICAgICAgICAgICAgfQogICAgICAgIH0pLnRoZW4ocmVzID0+IHJlcy5kYXRhLnRleHQoKSkuY2F0Y2goKGUpID0+IHsKICAgICAgICAgICAgd2luZG93LmNvbnNvbGUuZXJyb3IoZS5tZXNzYWdlKQogICAgICAgIH0pCiAgICAgICAgdGhpcy5kb3dubG9hZFNuYWNrYmFyLnN0YXR1cyA9IGZhbHNlCiAgICAgICAgdGhpcy5sb2FkZWRGaWxlID0gdGhpcy5kb3dubG9hZFNuYWNrYmFyLmZpbGVuYW1lCgogICAgICAgIHZpZXdlci51cGRhdGVSZW5kZXJRdWFsaXR5KHRoaXMucmVuZGVyUXVhbGl0eS52YWx1ZSkKICAgICAgICBhd2FpdCB2aWV3ZXIucHJvY2Vzc0ZpbGUodGV4dCkKICAgICAgICB0aGlzLmxvYWRpbmdQZXJjZW50ID0gMTAwCiAgICAgICAgdGhpcy5maW5pc2hMb2FkKCkKICAgIH0KCiAgICBjYW5jZWxEb3dubG9hZCgpIHsKICAgICAgICB0aGlzLmRvd25sb2FkU25hY2tiYXIuY2FuY2VsVG9rZW5Tb3VyY2UuY2FuY2VsKCdVc2VyIGNhbmNlbGVkIGRvd25sb2FkIGdjb2RlIGZpbGUnKQogICAgfQoKICAgIGFzeW5jIHNsZWVwKG1zOiBudW1iZXIpIHsKICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dChyZXNvbHZlLCBtcykpCiAgICB9CgogICAgYXN5bmMgbG9hZEN1cnJlbnRGaWxlKCkgewogICAgICAgIGF3YWl0IHRoaXMubG9hZEZpbGUoJ2djb2Rlcy8nICsgdGhpcy5zZENhcmRGaWxlUGF0aCkKICAgICAgICB0aGlzLmxvYWRlZEZpbGUgPSB0aGlzLnNkQ2FyZEZpbGVQYXRoCiAgICB9CgogICAgYXN5bmMgcmVsb2FkVmlld2VyKCkgewogICAgICAgIGlmICh0aGlzLmxvYWRpbmcpIHsKICAgICAgICAgICAgLy9pZiB3ZSBhcmUgYWN0aXZlbHkgbG9hZGluZyBzaWduYWwgYSBjYW5jZWwgYW5kIHdhaXQgYSBzZWNvbmQKICAgICAgICAgICAgLy9UaGlzIHByZXZlbnRzIGEgdGltaW5nIGlzc3VlIHRoYXQgY2FuIGhhcHBlbiBpZiBhIHVzZXIgY2hhbmdlcyBzZXR0aW5ncyBhbmQgdGhlbgogICAgICAgICAgICAvL2hpdHMgdGhlIHJlbG9hZCB2aWV3ZXIgYnV0dG9uLiBXaWxsIGV2ZW50dWFsbHkgbW92ZSB0aGlzIHRvIGFwaQogICAgICAgICAgICB2aWV3ZXIuZ2NvZGVQcm9jZXNzb3IuY2FuY2VsTG9hZCA9IHRydWUKICAgICAgICAgICAgYXdhaXQgdGhpcy5zbGVlcCgxMDAwKQogICAgICAgIH0KCiAgICAgICAgdGhpcy5yZWxvYWRSZXF1aXJlZCA9IGZhbHNlCiAgICAgICAgdGhpcy5sb2FkaW5nID0gdHJ1ZQogICAgICAgIHRoaXMubG9hZGluZ1BlcmNlbnQgPSAwCiAgICAgICAgYXdhaXQgdmlld2VyLnJlbG9hZCgpCiAgICAgICAgdGhpcy5sb2FkaW5nUGVyY2VudCA9IDEwMAogICAgICAgIHRoaXMuZmluaXNoTG9hZCgpCiAgICB9CgogICAgcmVzZXRDYW1lcmEoKSB7CiAgICAgICAgdmlld2VyLnJlc2V0Q2FtZXJhKCkKICAgIH0KCiAgICBzZXRSZWxvYWRSZXF1aXJlZEZsYWcoKSB7CiAgICAgICAgaWYgKHRoaXMubG9hZGVkRmlsZSAmJiB0aGlzLmxvYWRlZEZpbGUgIT0gJycpIHsKICAgICAgICAgICAgdGhpcy5yZWxvYWRSZXF1aXJlZCA9IHRydWUKICAgICAgICB9CiAgICB9CgogICAgQFdhdGNoKCdyZW5kZXJRdWFsaXR5JykKICAgIGFzeW5jIHJlbmRlclF1YWxpdHlDaGFuZ2VkKG5ld1ZhbDogbnVtYmVyKSB7CiAgICAgICAgaWYgKHZpZXdlciAmJiB2aWV3ZXIucmVuZGVyUXVhbGl0eSAhPT0gbmV3VmFsKSB7CiAgICAgICAgICAgIHZpZXdlci51cGRhdGVSZW5kZXJRdWFsaXR5KG5ld1ZhbCkKICAgICAgICAgICAgYXdhaXQgdGhpcy5yZWxvYWRWaWV3ZXIoKQogICAgICAgIH0KICAgIH0KCiAgICBAV2F0Y2goJ2N1cnJlbnRQb3NpdGlvbicpCiAgICBjdXJyZW50UG9zaXRpb25DaGFuZ2VkKG5ld1ZhbDogbnVtYmVyW10pIHsKICAgICAgICBpZiAodmlld2VyKSB7CiAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uID0gWwogICAgICAgICAgICAgICAge2F4ZXM6ICdYJywgcG9zaXRpb246IG5ld1ZhbFswXX0sCiAgICAgICAgICAgICAgICB7YXhlczogJ1knLCBwb3NpdGlvbjogbmV3VmFsWzFdfSwKICAgICAgICAgICAgICAgIHtheGVzOiAnWicsIHBvc2l0aW9uOiBuZXdWYWxbMl19LAogICAgICAgICAgICBdCgogICAgICAgICAgICB2aWV3ZXIudXBkYXRlVG9vbFBvc2l0aW9uKHBvc2l0aW9uKQogICAgICAgIH0KICAgIH0KCiAgICBAV2F0Y2goJ2ZpbGVQb3NpdGlvbicpCiAgICBmaWxlUG9zaXRpb25DaGFuZ2VkKG5ld1ZhbDogbnVtYmVyKSB7CiAgICAgICAgaWYgKCF2aWV3ZXIpIHJldHVybgoKICAgICAgICBjb25zdCBvZmZzZXQgPSAzNTAKICAgICAgICBpZiAobmV3VmFsID4gMCAmJiB0aGlzLnByaW50ZXJJc1ByaW50aW5nICYmIHRoaXMudHJhY2tpbmcgJiYgbmV3VmFsID4gb2Zmc2V0KSB7CiAgICAgICAgICAgIHZpZXdlci5nY29kZVByb2Nlc3Nvci51cGRhdGVGaWxlUG9zaXRpb24obmV3VmFsIC0gb2Zmc2V0KQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHZpZXdlci5nY29kZVByb2Nlc3Nvci51cGRhdGVGaWxlUG9zaXRpb24odmlld2VyLmZpbGVTaXplKQogICAgICAgIH0KICAgIH0KCiAgICBAV2F0Y2goJ3RyYWNraW5nJykKICAgIGFzeW5jIHRyYWNraW5nQ2hhbmdlZChuZXdWYWw6IGJvb2xlYW4pIHsKICAgICAgICBpZiAoIXZpZXdlcikgcmV0dXJuCiAgICAgICAgaWYgKG5ld1ZhbCkgewogICAgICAgICAgICAvL1NldCB6U2xpZGVyIHRvIG1heCB2YWx1ZQogICAgICAgICAgICB0aGlzLnpTbGlkZXIgPSB0aGlzLm1heFpTbGlkZXIKICAgICAgICAgICAgLy9Gb3JjZSByZW5kZXJlcnMgcmVsb2FkLgogICAgICAgICAgICB2aWV3ZXIuZ2NvZGVQcm9jZXNzb3IudXBkYXRlRmlsZVBvc2l0aW9uKDApCiAgICAgICAgICAgIHZpZXdlcj8uZm9yY2VSZW5kZXIoKQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHZpZXdlci5nY29kZVByb2Nlc3Nvci5zZXRMaXZlVHJhY2tpbmcoZmFsc2UpCiAgICAgICAgICAgIGF3YWl0IHRoaXMucmVsb2FkVmlld2VyKCkKICAgICAgICB9CiAgICB9CgogICAgQFdhdGNoKCdwcmludGVySXNQcmludGluZycpCiAgICBwcmludGVySXNQcmludGluZ0NoYW5nZWQoKSB7CiAgICAgICAgdGhpcy50cmFja2luZyA9IGZhbHNlCiAgICB9CgogICAgZ2V0IHNob3dDdXJzb3IoKTogYm9vbGVhbiB7CiAgICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLmd1aS5nY29kZVZpZXdlci5zaG93Q3Vyc29yID8/IGZhbHNlCiAgICB9CgogICAgc2V0IHNob3dDdXJzb3IobmV3VmFsOiBib29sZWFuKSB7CiAgICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2d1aS9zYXZlU2V0dGluZycsIHtuYW1lOiAnZ2NvZGVWaWV3ZXIuc2hvd0N1cnNvcicsIHZhbHVlOiBuZXdWYWx9KQogICAgfQoKICAgIEBXYXRjaCgnc2hvd0N1cnNvcicpCiAgICBzaG93Q3Vyc29yQ2hhbmdlZChuZXdWYWw6IGJvb2xlYW4pIHsKICAgICAgICB2aWV3ZXI/LnNldEN1cnNvclZpc2libGl0eShuZXdWYWwpCiAgICB9CgogICAgZ2V0IHNob3dUcmF2ZWxNb3ZlcygpOiBib29sZWFuIHsKICAgICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUuZ3VpLmdjb2RlVmlld2VyLnNob3dUcmF2ZWxNb3ZlcyA/PyBmYWxzZQogICAgfQoKICAgIHNldCBzaG93VHJhdmVsTW92ZXMobmV3VmFsOiBib29sZWFuKSB7CiAgICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2d1aS9zYXZlU2V0dGluZycsIHtuYW1lOiAnZ2NvZGVWaWV3ZXIuc2hvd1RyYXZlbE1vdmVzJywgdmFsdWU6IG5ld1ZhbH0pCiAgICB9CgogICAgQFdhdGNoKCdzaG93VHJhdmVsTW92ZXMnKQogICAgc2hvd1RyYXZlbE1vdmVzQ2hhbmdlZChuZXdWYWw6IGJvb2xlYW4pIHsKICAgICAgICB2aWV3ZXI/LnRvZ2dsZVRyYXZlbHMobmV3VmFsKQogICAgfQoKICAgIGdldCBzaG93T2JqZWN0U2VsZWN0aW9uKCk6IGJvb2xlYW4gewogICAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS5ndWkuZ2NvZGVWaWV3ZXIuc2hvd09iamVjdFNlbGVjdGlvbiA/PyBmYWxzZQogICAgfQoKICAgIHNldCBzaG93T2JqZWN0U2VsZWN0aW9uKG5ld1ZhbDogYm9vbGVhbikgewogICAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdndWkvc2F2ZVNldHRpbmcnLCB7bmFtZTogJ2djb2RlVmlld2VyLnNob3dPYmplY3RTZWxlY3Rpb24nLCB2YWx1ZTogbmV3VmFsfSkKICAgIH0KCiAgICBAV2F0Y2goJ3Nob3dPYmplY3RTZWxlY3Rpb24nKQogICAgc2hvd09iamVjdFNlbGVjdGlvbkNoYW5nZWQobmV3VmFsOiBib29sZWFuKSB7CiAgICAgICAgdmlld2VyPy5idWlsZE9iamVjdHMuc2hvd09iamVjdFNlbGVjdGlvbihuZXdWYWwpCiAgICB9CgogICAgZ2V0IGhkUmVuZGVyaW5nKCkgewogICAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS5ndWkuZ2NvZGVWaWV3ZXIuaGRSZW5kZXJpbmcKICAgIH0KCiAgICBzZXQgaGRSZW5kZXJpbmcobmV3VmFsKSB7CiAgICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2d1aS9zYXZlU2V0dGluZycsIHtuYW1lOiAnZ2NvZGVWaWV3ZXIuaGRSZW5kZXJpbmcnLCB2YWx1ZTogbmV3VmFsfSkKICAgIH0KCiAgICBAV2F0Y2goJ2hkUmVuZGVyaW5nJykKICAgIGFzeW5jIGhkUmVuZGVyaW5nQ2hhbmdlZChuZXdWYWw6IGJvb2xlYW4pIHsKICAgICAgICBpZiAodmlld2VyKSB7CiAgICAgICAgICAgIHZpZXdlci5nY29kZVByb2Nlc3Nvci51c2VIaWdoUXVhbGl0eUV4dHJ1c2lvbihuZXdWYWwpCiAgICAgICAgICAgIGF3YWl0IHRoaXMucmVsb2FkVmlld2VyKCkKICAgICAgICB9CiAgICB9CgogICAgZ2V0IGZvcmNlTGluZVJlbmRlcmluZygpIHsKICAgICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUuZ3VpLmdjb2RlVmlld2VyLmZvcmNlTGluZVJlbmRlcmluZwogICAgfQoKICAgIHNldCBmb3JjZUxpbmVSZW5kZXJpbmcobmV3VmFsKSB7CiAgICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2d1aS9zYXZlU2V0dGluZycsIHtuYW1lOiAnZ2NvZGVWaWV3ZXIuZm9yY2VMaW5lUmVuZGVyaW5nJywgdmFsdWU6IG5ld1ZhbH0pCiAgICB9CgogICAgQFdhdGNoKCdmb3JjZUxpbmVSZW5kZXJpbmcnKQogICAgYXN5bmMgZm9yY2VMaW5lUmVuZGVyaW5nQ2hhbmdlZChuZXdWYWw6IGJvb2xlYW4pIHsKICAgICAgICBpZiAodmlld2VyKSB7CiAgICAgICAgICAgIHZpZXdlci5nY29kZVByb2Nlc3Nvci51cGRhdGVGb3JjZVdpcmVNb2RlKG5ld1ZhbCkKICAgICAgICAgICAgYXdhaXQgdGhpcy5yZWxvYWRWaWV3ZXIoKQogICAgICAgIH0KICAgIH0KCiAgICBnZXQgdHJhbnNwYXJlbmN5KCkgewogICAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS5ndWkuZ2NvZGVWaWV3ZXIudHJhbnNwYXJlbmN5CiAgICB9CgogICAgc2V0IHRyYW5zcGFyZW5jeShuZXdWYWwpIHsKICAgICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgnZ3VpL3NhdmVTZXR0aW5nJywge25hbWU6ICdnY29kZVZpZXdlci50cmFuc3BhcmVuY3knLCB2YWx1ZTogbmV3VmFsfSkKICAgIH0KCiAgICBAV2F0Y2goJ3RyYW5zcGFyZW5jeScpCiAgICBhc3luYyB0cmFuc3BhcmVuY3lDaGFuZ2VkKG5ld1ZhbDogYm9vbGVhbikgewogICAgICAgIGlmICh2aWV3ZXIpIHsKICAgICAgICAgICAgdmlld2VyLmdjb2RlUHJvY2Vzc29yLnNldEFscGhhKG5ld1ZhbCkKICAgICAgICAgICAgYXdhaXQgdGhpcy5yZWxvYWRWaWV3ZXIoKQogICAgICAgIH0KICAgIH0KCiAgICBnZXQgdm94ZWxNb2RlKCkgewogICAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS5ndWkuZ2NvZGVWaWV3ZXIudm94ZWxNb2RlCiAgICB9CgogICAgc2V0IHZveGVsTW9kZShuZXdWYWwpIHsKICAgICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgnZ3VpL3NhdmVTZXR0aW5nJywge25hbWU6ICdnY29kZVZpZXdlci52b3hlbE1vZGUnLCB2YWx1ZTogbmV3VmFsfSkKICAgIH0KCiAgICBAV2F0Y2goJ3ZveGVsTW9kZScpCiAgICBhc3luYyB2b3hlbE1vZGVDaGFuZ2VkKG5ld1ZhbDogYm9vbGVhbikgewogICAgICAgIGlmICh2aWV3ZXIpIHsKICAgICAgICAgICAgdmlld2VyLmdjb2RlUHJvY2Vzc29yLnNldFZveGVsTW9kZShuZXdWYWwpCiAgICAgICAgICAgIHZpZXdlci5nY29kZVByb2Nlc3Nvci52b3hlbFdpZHRoID0gdGhpcy52b3hlbFdpZHRoCiAgICAgICAgICAgIHZpZXdlci5nY29kZVByb2Nlc3Nvci52b3hlbEhlaWdodCA9IHRoaXMudm94ZWxIZWlnaHQKICAgICAgICAgICAgYXdhaXQgdGhpcy5yZWxvYWRWaWV3ZXIoKQogICAgICAgIH0KICAgIH0KCiAgICBnZXQgdm94ZWxXaWR0aCgpIHsKICAgICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUuZ3VpLmdjb2RlVmlld2VyLnZveGVsV2lkdGggPz8gMQogICAgfQoKICAgIHNldCB2b3hlbFdpZHRoKG5ld1ZhbCkgewogICAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdndWkvc2F2ZVNldHRpbmcnLCB7bmFtZTogJ2djb2RlVmlld2VyLnZveGVsV2lkdGgnLCB2YWx1ZTogbmV3VmFsfSkKICAgIH0KCiAgICBnZXQgdm94ZWxIZWlnaHQoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLmd1aS5nY29kZVZpZXdlci52b3hlbEhlaWdodCA/PyAxCiAgICB9CgogICAgc2V0IHZveGVsSGVpZ2h0KG5ld1ZhbCkgewogICAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdndWkvc2F2ZVNldHRpbmcnLCB7bmFtZTogJ2djb2RlVmlld2VyLnZveGVsSGVpZ2h0JywgdmFsdWU6IG5ld1ZhbH0pCiAgICB9CgogICAgZ2V0IHNwZWN1bGFyTGlnaHRpbmcoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLmd1aS5nY29kZVZpZXdlci5zcGVjdWxhckxpZ2h0aW5nCiAgICB9CgogICAgc2V0IHNwZWN1bGFyTGlnaHRpbmcobmV3VmFsKSB7CiAgICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2d1aS9zYXZlU2V0dGluZycsIHtuYW1lOiAnZ2NvZGVWaWV3ZXIuc3BlY3VsYXJMaWdodGluZycsIHZhbHVlOiBuZXdWYWx9KQogICAgfQoKICAgIEBXYXRjaCgnc3BlY3VsYXJMaWdodGluZycpCiAgICBhc3luYyBzcGVjdWxhckxpZ2h0aW5nQ2hhbmdlZChuZXdWYWw6IGJvb2xlYW4pIHsKICAgICAgICBpZiAodmlld2VyKSB7CiAgICAgICAgICAgIHZpZXdlci5nY29kZVByb2Nlc3Nvci51c2VTcGVjdWxhckNvbG9yKG5ld1ZhbCkKICAgICAgICAgICAgLy9hd2FpdCB0aGlzLnJlbG9hZFZpZXdlcigpCiAgICAgICAgfQogICAgfQoKICAgIGdldCBleHRydWRlckNvbG9ycygpIHsKICAgICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUuZ3VpLmdjb2RlVmlld2VyPy5leHRydWRlckNvbG9ycyA/PyBmYWxzZQogICAgfQoKICAgIGxvYWRUb29sQ29sb3JzKGNvbG9yczogc3RyaW5nW10pIHsKICAgICAgICBpZiAodmlld2VyICYmIGNvbG9ycy5sZW5ndGgpIHsKICAgICAgICAgICAgdmlld2VyLmdjb2RlUHJvY2Vzc29yLnJlc2V0VG9vbHMoKQogICAgICAgICAgICBjb2xvcnMuZm9yRWFjaCgoY29sb3I6IHN0cmluZykgPT4gewogICAgICAgICAgICAgICAgdmlld2VyLmdjb2RlUHJvY2Vzc29yLmFkZFRvb2woY29sb3IsIHRoaXMubm96emxlX2RpYW1ldGVyKQogICAgICAgICAgICB9KQogICAgICAgICAgICB0aGlzLnNldFJlbG9hZFJlcXVpcmVkRmxhZygpCiAgICAgICAgfQogICAgfQoKICAgIEBXYXRjaCgnZXh0cnVkZXJDb2xvcnMnKQogICAgZXh0cnVkZXJDb2xvcnNDaGFuZ2VkKG5ld1ZhbDogc3RyaW5nW10pIHsKICAgICAgICBpZiAodmlld2VyICYmIG5ld1ZhbCAmJiBuZXdWYWwubGVuZ3RoKSB7CiAgICAgICAgICAgIHRoaXMubG9hZFRvb2xDb2xvcnMobmV3VmFsKQogICAgICAgICAgICB0aGlzLnNldFJlbG9hZFJlcXVpcmVkRmxhZygpCiAgICAgICAgfQogICAgfQoKICAgIHByaXZhdGUgY29sb3JNb2RlcyA9IFsKICAgICAgICB7dGV4dDogJ0V4dHJ1ZGVyJywgdmFsdWU6IDB9LAogICAgICAgIHt0ZXh0OiAnRmVlZCBSYXRlJywgdmFsdWU6IDF9LAogICAgICAgIHt0ZXh0OiAnRmVhdHVyZScsIHZhbHVlOiAyfSwKICAgIF0KCiAgICBnZXQgY29sb3JNb2RlKCk6IG51bWJlciB7CiAgICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLmd1aS5nY29kZVZpZXdlcj8uY29sb3JNb2RlID8/IDIKICAgIH0KCiAgICBzZXQgY29sb3JNb2RlKG5ld1ZhbDogbnVtYmVyKSB7CiAgICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2d1aS9zYXZlU2V0dGluZycsIHtuYW1lOiAnZ2NvZGVWaWV3ZXIuY29sb3JNb2RlJywgdmFsdWU6IG5ld1ZhbH0pCgogICAgICAgIGlmICh2aWV3ZXIpIHsKICAgICAgICAgICAgaWYgKHZpZXdlci5nY29kZVByb2Nlc3Nvci5jb2xvck1vZGUgIT09IG5ld1ZhbCkgewogICAgICAgICAgICAgICAgdmlld2VyLmdjb2RlUHJvY2Vzc29yLnNldENvbG9yTW9kZShuZXdWYWwpCiAgICAgICAgICAgICAgICB0aGlzLnJlbG9hZFZpZXdlcigpCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgZ2V0IGJhY2tncm91bmRDb2xvcigpIHsKICAgICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUuZ3VpLmdjb2RlVmlld2VyPy5iYWNrZ3JvdW5kQ29sb3IgPz8gJyMxMjEyMTInCiAgICB9CgogICAgQFdhdGNoKCdiYWNrZ3JvdW5kQ29sb3InKQogICAgYmFja2dyb3VuZENvbG9yQ2hhbmdlZChuZXdWYWw6IHN0cmluZykgewogICAgICAgIGlmICghdmlld2VyKSByZXR1cm4KICAgICAgICB2aWV3ZXIuc2V0QmFja2dyb3VuZENvbG9yKG5ld1ZhbCkKICAgIH0KCiAgICBnZXQgZ3JpZENvbG9yKCkgewogICAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS5ndWkuZ2NvZGVWaWV3ZXI/LmdyaWRDb2xvciA/PyAnI0IzQjNCMycKICAgIH0KCiAgICBAV2F0Y2goJ2dyaWRDb2xvcicpCiAgICBncmlkQ29sb3JDaGFuZ2VkKG5ld1ZhbDogc3RyaW5nKSB7CiAgICAgICAgaWYgKCF2aWV3ZXIpIHJldHVybgogICAgICAgIHZpZXdlci5iZWQuc2V0QmVkQ29sb3IobmV3VmFsKQogICAgfQoKICAgIGdldCBzaG93QXhlcygpIHsKICAgICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUuZ3VpLmdjb2RlVmlld2VyPy5zaG93QXhlcyA/PyB0cnVlCiAgICB9CgogICAgQFdhdGNoKCdzaG93QXhlcycpCiAgICBzaG93QXhlc0NoYW5nZWQobmV3VmFsOiBib29sZWFuKSB7CiAgICAgICAgaWYgKCF2aWV3ZXIpIHJldHVybgogICAgICAgIHZpZXdlci5heGVzLnNob3cobmV3VmFsKQogICAgfQoKICAgIGdldCBtaW5GZWVkKCkgewogICAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS5ndWkuZ2NvZGVWaWV3ZXI/Lm1pbkZlZWQgPz8gMjAKICAgIH0KCiAgICBAV2F0Y2goJ21pbkZlZWQnKQogICAgbWluRmVlZENoYW5nZWQobmV3VmFsOiBudW1iZXIpIHsKICAgICAgICBpZiAoIXZpZXdlcikgcmV0dXJuCiAgICAgICAgdmlld2VyLmdjb2RlUHJvY2Vzc29yLnVwZGF0ZUNvbG9yUmF0ZShuZXdWYWwgKiA2MCwgdGhpcy5tYXhGZWVkICogNjApCiAgICB9CgogICAgZ2V0IG1heEZlZWQoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLmd1aS5nY29kZVZpZXdlcj8ubWF4RmVlZCA/PyAxMDAKICAgIH0KCiAgICBAV2F0Y2goJ21heEZlZWQnKQogICAgbWF4RmVlZENoYW5nZWQobmV3VmFsOiBudW1iZXIpIHsKICAgICAgICBpZiAoIXZpZXdlcikgcmV0dXJuCiAgICAgICAgdmlld2VyLmdjb2RlUHJvY2Vzc29yLnVwZGF0ZUNvbG9yUmF0ZSh0aGlzLm1pbkZlZWQgKiA2MCwgbmV3VmFsICogNjApCiAgICB9CgogICAgZ2V0IG1pbkZlZWRDb2xvcigpIHsKICAgICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUuZ3VpLmdjb2RlVmlld2VyPy5taW5GZWVkQ29sb3IgPz8gJyMwMDAwRkYnCiAgICB9CgogICAgQFdhdGNoKCdtaW5GZWVkQ29sb3InKQogICAgbWluRmVlZENvbG9yVXBkYXRlZChuZXdWYWw6IHN0cmluZykgewogICAgICAgIGlmICghdmlld2VyKSByZXR1cm4KICAgICAgICB2aWV3ZXIuZ2NvZGVQcm9jZXNzb3IudXBkYXRlTWluRmVlZENvbG9yKG5ld1ZhbCkKICAgICAgICB0aGlzLnNldFJlbG9hZFJlcXVpcmVkRmxhZygpCiAgICB9CgogICAgZ2V0IG1heEZlZWRDb2xvcigpIHsKICAgICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUuZ3VpLmdjb2RlVmlld2VyPy5tYXhGZWVkQ29sb3IgPz8gJyNGRjAwMDAnCiAgICB9CgogICAgQFdhdGNoKCdtYXhGZWVkQ29sb3InKQogICAgbWF4RmVlZENvbG9yVXBkYXRlZChuZXdWYWw6IHN0cmluZykgewogICAgICAgIGlmICghdmlld2VyKSByZXR1cm4KICAgICAgICB2aWV3ZXIuZ2NvZGVQcm9jZXNzb3IudXBkYXRlTWF4RmVlZENvbG9yKG5ld1ZhbCkKICAgICAgICB0aGlzLnNldFJlbG9hZFJlcXVpcmVkRmxhZygpCiAgICB9CgogICAgZ2V0IGtpbmVtYXRpY3MoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLnByaW50ZXIuY29uZmlnZmlsZT8uc2V0dGluZ3M/LnByaW50ZXI/LmtpbmVtYXRpY3MgPz8gJycKICAgIH0KCiAgICBAV2F0Y2goJ2tpbmVtYXRpY3MnKQogICAga2luZW1hdGljc0NoYW5nZWQobmV3VmFsOiBzdHJpbmcpIHsKICAgICAgICBpZiAodmlld2VyICYmIG5ld1ZhbCkgewogICAgICAgICAgICB2aWV3ZXIuYmVkLnNldERlbHRhKG5ld1ZhbC5pbmNsdWRlcygnZGVsdGEnKSkKICAgICAgICB9CiAgICB9CgogICAgZ2V0IGJlZE1pblNpemUoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLnByaW50ZXIudG9vbGhlYWQ/LmF4aXNfbWluaW11bSA/PyBudWxsCiAgICB9CgogICAgQFdhdGNoKCdiZWRNaW5TaXplJywge2RlZXA6IHRydWV9KQogICAgYmVkTWluU2l6ZUNoYW5nZWQobmV3VmFsOiBudW1iZXJbXSB8IG51bGwpIHsKICAgICAgICBpZiAodmlld2VyICYmIG5ld1ZhbCkgewogICAgICAgICAgICB2aWV3ZXIuYmVkLmJ1aWxkVm9sdW1lWyd4J10ubWluID0gbmV3VmFsWzBdCiAgICAgICAgICAgIHZpZXdlci5iZWQuYnVpbGRWb2x1bWVbJ3knXS5taW4gPSBuZXdWYWxbMV0KICAgICAgICAgICAgdmlld2VyLmJlZC5idWlsZFZvbHVtZVsneiddLm1pbiA9IG5ld1ZhbFsyXQogICAgICAgIH0KICAgIH0KCiAgICBnZXQgYmVkTWF4U2l6ZSgpIHsKICAgICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUucHJpbnRlci50b29saGVhZD8uYXhpc19tYXhpbXVtID8/IG51bGwKICAgIH0KCiAgICBAV2F0Y2goJ2JlZE1heFNpemUnLCB7ZGVlcDogdHJ1ZX0pCiAgICBiZWRNYXhTaXplQ2hhbmdlZChuZXdWYWw6IG51bWJlcltdIHwgbnVsbCkgewogICAgICAgIGlmIChuZXdWYWwgJiYgdmlld2VyKSB7CiAgICAgICAgICAgIHZpZXdlci5iZWQuYnVpbGRWb2x1bWVbJ3gnXS5tYXggPSBuZXdWYWxbMF0KICAgICAgICAgICAgdmlld2VyLmJlZC5idWlsZFZvbHVtZVsneSddLm1heCA9IG5ld1ZhbFsxXQogICAgICAgICAgICB2aWV3ZXIuYmVkLmJ1aWxkVm9sdW1lWyd6J10ubWF4ID0gbmV3VmFsWzJdCiAgICAgICAgfQogICAgfQoKICAgIEBXYXRjaCgnelNsaWRlcicpCiAgICB6U2xpZGVyQ2hhbmdlZChuZXdWYWw6IG51bWJlcikgewogICAgICAgIHZpZXdlcj8uc2V0WkNsaXBQbGFuZShuZXdWYWwsIC0xKQogICAgICAgIHZpZXdlcj8uZm9yY2VSZW5kZXIoKQogICAgfQoKICAgIGdldCBwcm9ncmVzc0NvbG9yKCkgewogICAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS5ndWkuZ2NvZGVWaWV3ZXI/LnByb2dyZXNzQ29sb3IgPz8gJyNGRkZGRkYnCiAgICB9CgogICAgQFdhdGNoKCdwcm9ncmVzc0NvbG9yJykKICAgIHByb2dyZXNzQ29sb3JDaGFuZ2VkKG5ld1ZhbDogc3RyaW5nKSB7CiAgICAgICAgdmlld2VyPy5zZXRQcm9ncmVzc0NvbG9yKG5ld1ZhbCkKICAgIH0KCiAgICB1cGRhdGVaU2xpZGVyKG5ld1ZhbDogYW55KSB7CiAgICAgICAgdGhpcy56U2xpZGVyID0gbmV3VmFsCiAgICB9Cn0K"},{"version":3,"sources":["Viewer.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2LA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"Viewer.vue","sourceRoot":"src/components/gcodeviewer","sourcesContent":["<!-- Because the viewer lives outside of the components DOM it can't be scoped -->\n<style>\n.viewer {\n    width: 100%;\n    height: calc(var(--app-height) - 266px);\n    border: 1px solid #3f3f3f;\n}\n\n.slider-autoheight,\n.slider-autoheight .v-slider {\n    height: calc(var(--app-height) - 286px);\n}\n\n@media (min-width: 600px) and (max-width: 959px) {\n    .viewer {\n        height: calc(var(--app-height) - 318px);\n    }\n    .slider-autoheight,\n    .slider-autoheight .v-slider {\n        height: calc(var(--app-height) - 338px);\n    }\n}\n\n@media (max-width: 599px) {\n    .viewer {\n        height: calc(var(--app-height) - 356px);\n    }\n    .slider-autoheight,\n    .slider-autoheight .v-slider {\n        height: calc(var(--app-height) - 376px);\n    }\n}\n\n.slider-autoheight .v-slider {\n    margin-top: 0;\n    margin-bottom: 0;\n}\n.slider-autoheight .v-input__slot {\n    height: 100%;\n}\n</style>\n\n<style scoped>\n.progress-text {\n    font-size: small;\n}\n\n.progress-container {\n    position: absolute;\n    width: 80.5%;\n}\n\n.disable-transition {\n    transition: none !important;\n}\n\n</style>\n\n<template>\n    <div>\n        <panel :title=\"$t('GCodeViewer.Title')\" icon=\"mdi-video-3d\" card-class=\"gcode-viewer-panel\">\n            <template v-slot:buttons>\n                <v-btn \n                    :icon=\"$vuetify.breakpoint.xs\"\n                    :text=\"$vuetify.breakpoint.smAndUp\"\n                    tile\n                    @click=\"reloadViewer\"\n                    color=\"info\"\n                    class=\"ml-3\"\n                    v-show=\"reloadRequired\"\n                >\n                    <span class=\"d-none d-sm-block\">{{$t(\"GCodeViewer.ReloadRequired\")}}</span>\n                    <v-icon class=\"d-sm-none\">mdi-reload-alert</v-icon>\n                </v-btn>\n                <v-btn icon tile @click=\"resetCamera\"><v-icon>mdi-camera-retake</v-icon></v-btn>\n            </template>\n            <v-card-text>\n                <v-row>\n                    <v-col>\n                        <div ref=\"viewerCanvasContainer\"></div>\n                    </v-col>\n                    <v-col class=\"col-auto pr-6\">\n                        <v-slider\n                            vertical\n                            :disabled=\"loading || !loadedFile\"\n                            :max=\"maxZSlider\"\n                            :min=\"0\"\n                            :value=\"zSlider\"\n                            class=\"slider-autoheight mt-3\"\n                            @input=\"updateZSlider\"\n                        ></v-slider>\n                    </v-col>\n                </v-row>\n                <v-row class=\"mt-0 d-flex align-top\">\n                    <v-col>\n                        <v-row>\n                            <v-col order-md=\"2\" class=\"d-flex align-content-space-around justify-center flex-wrap flex-md-nowrap col-12 col-md-4\"> \n                                <template v-if=\"loadedFile === null\">\n                                    <v-btn @click=\"loadCurrentFile\" class=\"mr-3\" v-if=\"sdCardFilePath !== '' && sdCardFilePath !== loadedFile\">{{ $t(\"GCodeViewer.LoadCurrentFile\")}}</v-btn>\n                                    <v-btn @click=\"chooseFile\">{{ $t(\"GCodeViewer.LoadLocal\") }}</v-btn>\n                                </template>\n                                <template v-else>\n                                    <v-btn @click=\"tracking=!tracking\" class=\"mr-3\" v-if=\"showTrackingButton\"><v-icon v-html=\"tracking ? 'mdi-toggle-switch' : 'mdi-toggle-switch-off-outline'\" class=\"mr-2\"></v-icon>{{ $t(\"GCodeViewer.Tracking\") }}</v-btn>\n                                    <v-btn @click=\"clearLoadedFile\">{{ $t(\"GCodeViewer.ClearLoadedFile\") }}</v-btn>\n                                </template>\n                            </v-col>\n                            <v-col class=\"col-12 col-sm-6 col-md-4\">\n                                <v-select :items=\"colorModes\" :label=\"$t('GCodeViewer.ColorMode')\" item-text=\"text\" dense v-model=\"colorMode\" hide-details outlined></v-select>\n                            </v-col>\n                            <v-col order-md=\"3\" class=\"col-12 col-sm-6 col-md-4\">\n                                <v-select :items=\"renderQualities\" :label=\"$t('GCodeViewer.RenderQuality')\" item-text=\"label\" dense v-model=\"renderQuality\" hide-details outlined></v-select>\n                            </v-col>\n                        </v-row>\n                    </v-col>\n                        <v-menu :offset-y=\"true\" :offset-x=\"true\" top :close-on-content-click=\"false\" :title=\"$t('Files.SetupCurrentList')\">\n                            <template v-slot:activator=\"{ on, attrs }\">\n                                <v-btn class=\"minwidth-0 px-2 mr-3 mt-3\" v-bind=\"attrs\" v-on=\"on\"><v-icon>mdi-cog</v-icon></v-btn>\n                            </template>\n                            <v-list>\n                                <v-list-item class=\"minHeight36\">\n                                    <v-checkbox class=\"mt-0\" hide-details v-model=\"showCursor\"  :label=\"$t('GCodeViewer.ShowToolhead')\"></v-checkbox>\n                                </v-list-item>\n                                <v-list-item class=\"minHeight36\">\n                                    <v-checkbox class=\"mt-0\" hide-details v-model=\"showTravelMoves\"  :label=\"$t('GCodeViewer.ShowTravelMoves')\"></v-checkbox>\n                                </v-list-item>\n                                <v-list-item class=\"minHeight36\" v-if=\"loadedFile === sdCardFilePath && printing_objects.length > 1\">\n                                    <v-checkbox class=\"mt-0\" hide-details v-model=\"showObjectSelection\"  :label=\"$t('GCodeViewer.ShowObjectSelection')\"></v-checkbox>\n                                </v-list-item>\n                                <v-divider></v-divider>\n                                <v-list-item class=\"minHeight36\">\n                                    <v-checkbox class=\"mt-0\" hide-details v-model=\"hdRendering\" :label=\"$t('GCodeViewer.HDRendering')\"></v-checkbox>\n                                </v-list-item>\n                                <v-list-item class=\"minHeight36\">\n                                    <v-checkbox class=\"mt-0\" hide-details v-model=\"forceLineRendering\" :label=\"$t('GCodeViewer.ForceLineRendering')\"></v-checkbox>\n                                </v-list-item>\n                                <v-list-item class=\"minHeight36\">\n                                    <v-checkbox class=\"mt-0\" hide-details v-model=\"transparency\" :label=\"$t('GCodeViewer.Transparency')\"></v-checkbox>\n                                </v-list-item>\n                                <v-list-item class=\"minHeight36\">\n                                    <v-checkbox class=\"mt-0\" hide-details v-model=\"voxelMode\" :label=\"$t('GCodeViewer.VoxelMode')\"></v-checkbox>\n                                </v-list-item>\n                                <v-list-item class=\"minHeight36\">\n                                    <v-checkbox class=\"mt-0\" hide-details v-model=\"specularLighting\" :label=\"$t('GCodeViewer.SpecularLighting')\"></v-checkbox>\n                                </v-list-item>\n                            </v-list>\n                        </v-menu>\n                </v-row>\n                <input :accept=\"'.g,.gcode,.gc,.gco,.nc,.ngc,.tap'\" @change=\"fileSelected\" hidden multiple ref=\"fileInput\" type=\"file\" />\n            </v-card-text>\n        </panel>\n        <v-snackbar v-model=\"loading\" :timeout=\"-1\" :value=\"true\" fixed right bottom dark>\n            <div>\n                {{ $t('GCodeViewer.Rendering') }} - {{ loadingPercent }}%<br />\n                <strong>{{ this.loadedFile }}</strong>\n            </div>\n            <v-progress-linear class=\"mt-2\" :value=\"loadingPercent\"></v-progress-linear>\n            <template v-slot:action=\"{ attrs }\">\n                <v-btn color=\"red\" text v-bind=\"attrs\" style=\"min-width: auto;\" @click=\"cancelRendering()\">\n                    <v-icon class=\"0\">mdi-close</v-icon>\n                </v-btn>\n            </template>\n        </v-snackbar>\n        <v-snackbar v-model=\"downloadSnackbar.status\" :timeout=\"-1\" :value=\"true\" fixed right bottom dark>\n            <template v-if=\"downloadSnackbar.total > 0\">\n                <div>\n                    {{ $t('GCodeViewer.Downloading') }} - {{ Math.round(downloadSnackbar.percent) }} % @ {{ formatFilesize(Math.round(downloadSnackbar.speed)) }}/s<br />\n                    <strong>{{ downloadSnackbar.filename }}</strong>\n                </div>\n                <v-progress-linear class=\"mt-2\" :value=\"downloadSnackbar.percent\"></v-progress-linear>\n            </template>\n            <template v-else>\n                <div>\n                    {{ $t('GCodeViewer.Downloading') }}<br />\n                    <strong>{{ downloadSnackbar.filename }}</strong>\n                </div>\n                <v-progress-linear class=\"mt-2\" indeterminate></v-progress-linear>\n            </template>\n            <template v-slot:action=\"{ attrs }\">\n                <v-btn color=\"red\" text v-bind=\"attrs\" @click=\"cancelDownload\" style=\"min-width: auto;\" >\n                    <v-icon class=\"0\">mdi-close</v-icon>\n                </v-btn>\n            </template>\n        </v-snackbar>\n    </div>\n</template>\n\n<script lang=\"ts\">\nimport {Component, Mixins, Prop, Ref, Watch} from 'vue-property-decorator'\nimport BaseMixin from '../mixins/base'\n// @ts-ignore\nimport GCodeViewer from '@sindarius/gcodeviewer'\nimport axios from 'axios'\nimport {formatFilesize} from '@/plugins/helpers'\nimport Panel from '@/components/ui/Panel.vue'\n\ninterface downloadSnackbar {\n    status: boolean\n    filename: string\n    percent: number\n    speed: number\n    total: number\n    cancelTokenSource: any\n    lastProgress: {\n        time: number\n        loaded: number\n    }\n}\n\nlet viewer: any = null\n@Component({\n    components: {Panel}\n})\nexport default class Viewer extends Mixins(BaseMixin) {\n    formatFilesize = formatFilesize\n\n    private isBusy = false\n    private loading = false\n    private loadingPercent = 0\n\n    private tracking = false\n    private loadedFile: string | null = null\n\n    private reloadRequired = false\n    private fileSize = 0\n    private maxZSlider = 100000\n    private zSlider = this.maxZSlider\n    private zSlicerHeight = 100\n    private renderQuality = this.renderQualities[2]\n\n    private downloadSnackbar: downloadSnackbar = {\n        status: false,\n        filename: '',\n        percent: 0,\n        speed: 0,\n        total: 0,\n        cancelTokenSource: {},\n        lastProgress: {\n            time: 0,\n            loaded: 0\n        }\n    }\n\n    @Prop({type: String, default: '', required: false}) filename!: string\n    @Ref('fileInput') fileInput!: HTMLInputElement\n    //@Ref('viewerCanvasContainer') viewerCanvasContainer!: HTMLElement\n\n    $refs!: {\n        viewerCanvasContainer: HTMLElement\n    }\n\n    get renderQualities() {\n        return [\n            { label: this.$t('GCodeViewer.Low'),    value: 2 },\n            { label: this.$t('GCodeViewer.Medium'), value: 3 },\n            { label: this.$t('GCodeViewer.High'),   value: 4 },\n            { label: this.$t('GCodeViewer.Ultra'),  value: 5 },\n            { label: this.$t('GCodeViewer.Max'),    value: 6 },\n        ]\n    }\n\n    async mounted() {\n        this.loadedFile = this.$store.state.gcodeviewer?.loadedFileBackup ?? null\n        viewer = this.$store.state.gcodeviewer?.viewerBackup ?? null\n\n        await this.init()\n\n        window.addEventListener('resize', this.eventListenerResize)\n    }\n\n    beforeDestroy() {\n        if (viewer) {\n            viewer.gcodeProcessor.loadingProgressCallback = null\n            this.$store.dispatch('gcodeviewer/setLoadedFileBackup', this.loadedFile)\n            this.$store.dispatch('gcodeviewer/setViewerBackup', viewer)\n        }\n\n        window.removeEventListener('resize', this.eventListenerResize)\n    }\n\n    eventListenerResize() {\n        viewer?.resize()\n    }\n\n    get filePosition() {\n        return this.printerIsPrinting ? this.$store.state.printer.virtual_sdcard.file_position : 0\n    }\n\n    get sdCardFilePath() {\n        return this.$store.state.printer.print_stats?.filename ?? ''\n    }\n\n    get currentPosition() {\n        return this.$store.state.printer.motion_report?.live_position ?? [0, 0, 0, 0]\n    }\n\n    get showTrackingButton() {\n        return this.printerIsPrinting && this.sdCardFilePath === this.loadedFile\n    }\n\n    get printing_objects() {\n        return this.$store.state.printer.exclude_object?.objects ?? []\n    }\n\n    get excluded_objects() {\n        return this.$store.state.printer.exclude_object?.excluded_objects ?? []\n    }\n\n    get nozzle_diameter() {\n        return this.$store.state.printer.configfile?.settings?.extruder?.nozzle_diameter ?? 0.4\n    }\n\n    async init() {\n        let canvasElement = this.$store.state.gcodeviewer?.canvasBackup ?? null\n\n        if (canvasElement === null) {\n            canvasElement = document.createElement('canvas')\n            canvasElement.className = 'viewer'\n            this.$refs.viewerCanvasContainer.appendChild(canvasElement)\n            await this.$store.dispatch('gcodeviewer/setCanvasBackup', canvasElement)\n        } else {\n            this.$refs.viewerCanvasContainer.appendChild(canvasElement)\n            if (viewer?.gcodeProcessor) {\n                viewer.gcodeProcessor.updateFilePosition(viewer?.fileSize)\n            }\n        }\n\n        if (viewer === null) {\n            await this.viewerInit(canvasElement)\n        }\n\n        this.registerProgressCallback()\n\n        if (this.$route.query?.filename && this.loadedFile !== this.$route.query?.filename?.toString()) {\n            //TODO: test without sleep\n            await this.sleep(1000) //Give the store a chance to initializ before loading the file.\n            await this.loadFile(this.$route.query.filename.toString())\n        }\n    }\n\n    viewerInit(element: HTMLCanvasElement) {\n        viewer = new GCodeViewer(element)\n        viewer.init()\n        viewer.setBackgroundColor(this.backgroundColor)\n        viewer.bed.setBedColor(this.gridColor)\n        viewer.setCursorVisiblity(this.showCursor)\n        viewer.setZClipPlane(1000000, -1000000)\n        viewer.axes.show(this.showAxes)\n        viewer.bed.setDelta(this.kinematics.includes('delta'))\n\n        if (this.bedMaxSize !== null) {\n            viewer.bed.buildVolume['x'].max = this.bedMaxSize[0]\n            viewer.bed.buildVolume['y'].max = this.bedMaxSize[1]\n            viewer.bed.buildVolume['z'].max = this.bedMaxSize[2]\n        }\n\n        if (this.bedMinSize !== null) {\n            viewer.bed.buildVolume['x'].min = this.bedMinSize[0]\n            viewer.bed.buildVolume['y'].min = this.bedMinSize[1]\n            viewer.bed.buildVolume['z'].min = this.bedMinSize[2]\n        }\n\n        viewer.gcodeProcessor.useHighQualityExtrusion(this.hdRendering)\n        viewer.gcodeProcessor.updateForceWireMode(this.forceLineRendering)\n        viewer.gcodeProcessor.setAlpha(this.transparency)\n        viewer.gcodeProcessor.setVoxelMode(this.voxelMode)\n        viewer.gcodeProcessor.voxelWidth = this.voxelWidth\n        viewer.gcodeProcessor.voxelHeight = this.voxelHeight\n        viewer.gcodeProcessor.useSpecularColor(this.specularLighting)\n        viewer.gcodeProcessor.setLiveTracking(false)\n\n        this.loadToolColors(this.extruderColors)\n\n        if (viewer.lastLoadFailed()) {\n            this.renderQuality = this.renderQualities[0]\n            viewer.updateRenderQuality(1)\n            viewer.clearLoadFlag()\n        }\n    }\n\n    registerProgressCallback() {\n        if (viewer) {\n            viewer.gcodeProcessor.loadingProgressCallback = (progress: number) => {\n                this.loadingPercent = Math.ceil(progress * 100)\n                this.loading = this.loadingPercent <= 99\n            }\n        }\n    }\n    \n    async cancelRendering() {\n        if (viewer) {\n            viewer.gcodeProcessor.cancelLoad = true\n            await this.sleep(1000)\n        }\n    }\n\n    clearLoadedFile() {\n        if (viewer) {\n            viewer.clearScene(true)\n            this.loadedFile = null\n            this.tracking = false\n        }\n    }\n\n    chooseFile() {\n        if (!this.isBusy) {\n            this.fileInput.click()\n        }\n    }\n\n    finishLoad() {\n        this.maxZSlider = viewer.getMaxHeight() + 1\n        this.zSlider = this.maxZSlider\n        this.loading = false\n        viewer.setCursorVisiblity(this.showCursor)\n\n        if (this.loadedFile === this.sdCardFilePath && this.printing_objects.length) {\n            let objects: any = []\n\n            this.printing_objects.forEach((object: any) => {\n                const xValues = object.polygon.map((point: number[]) => point[0])\n                const yValues = object.polygon.map((point: number[]) => point[1])\n\n                objects.push({\n                    cancelled: this.excluded_objects.includes(object.name),\n                    name: object.name,\n                    x: [Math.min(...xValues), Math.max(...xValues)],\n                    y: [Math.min(...yValues), Math.max(...yValues)],\n                })\n            })\n\n            viewer.buildObjects.loadObjectBoundaries(objects)\n            viewer.buildObjects.showObjectSelection(this.showObjectSelection)\n        }\n\n        viewer.gcodeProcessor.updateFilePosition(viewer.fileSize)\n    }\n\n    async fileSelected(e: any) {\n        const reader = new FileReader()\n        reader.addEventListener('load', async (event) => {\n            if (!event || !event.target) return\n            const blob = event.target.result\n            if (typeof blob === 'string') {\n                this.fileSize = blob.length\n                // Do something with result\n                await viewer.processFile(blob)\n            }\n            this.finishLoad()\n        })\n        this.tracking = false\n        if (e.target.files?.length) {\n            this.loadedFile = e?.target?.files[0].name\n            reader.readAsText(e.target.files[0])\n        }\n        e.target.value = ''\n    }\n\n    async loadFile(filename: string) {\n        this.downloadSnackbar.status = true\n        this.downloadSnackbar.speed = 0\n        this.downloadSnackbar.lastProgress.time = 0\n        this.downloadSnackbar.filename = filename.startsWith('gcodes/') ? filename.slice(7) : filename\n        const CancelToken = axios.CancelToken\n        this.downloadSnackbar.cancelTokenSource = CancelToken.source()\n        const text = await axios.get(this.apiUrl + '/server/files/' + encodeURI(filename), {\n            cancelToken: this.downloadSnackbar.cancelTokenSource.token,\n            responseType: 'blob',\n            onDownloadProgress: (progressEvent) => {\n                this.downloadSnackbar.percent = (progressEvent.loaded * 100) / progressEvent.total\n                if (this.downloadSnackbar.lastProgress.time) {\n                    const time = progressEvent.timeStamp - this.downloadSnackbar.lastProgress.time\n                    const data = progressEvent.loaded - this.downloadSnackbar.lastProgress.loaded\n\n                    if (time > 1000 || this.downloadSnackbar.speed === 0) {\n                        this.downloadSnackbar.speed = data / (time / 1000)\n                        this.downloadSnackbar.lastProgress.time = progressEvent.timeStamp\n                        this.downloadSnackbar.lastProgress.loaded = progressEvent.loaded\n                    }\n                } else this.downloadSnackbar.lastProgress.time = progressEvent.timeStamp\n\n                this.downloadSnackbar.total = progressEvent.total\n            }\n        }).then(res => res.data.text()).catch((e) => {\n            window.console.error(e.message)\n        })\n        this.downloadSnackbar.status = false\n        this.loadedFile = this.downloadSnackbar.filename\n\n        viewer.updateRenderQuality(this.renderQuality.value)\n        await viewer.processFile(text)\n        this.loadingPercent = 100\n        this.finishLoad()\n    }\n\n    cancelDownload() {\n        this.downloadSnackbar.cancelTokenSource.cancel('User canceled download gcode file')\n    }\n\n    async sleep(ms: number) {\n        await new Promise((resolve) => setTimeout(resolve, ms))\n    }\n\n    async loadCurrentFile() {\n        await this.loadFile('gcodes/' + this.sdCardFilePath)\n        this.loadedFile = this.sdCardFilePath\n    }\n\n    async reloadViewer() {\n        if (this.loading) {\n            //if we are actively loading signal a cancel and wait a second\n            //This prevents a timing issue that can happen if a user changes settings and then\n            //hits the reload viewer button. Will eventually move this to api\n            viewer.gcodeProcessor.cancelLoad = true\n            await this.sleep(1000)\n        }\n\n        this.reloadRequired = false\n        this.loading = true\n        this.loadingPercent = 0\n        await viewer.reload()\n        this.loadingPercent = 100\n        this.finishLoad()\n    }\n\n    resetCamera() {\n        viewer.resetCamera()\n    }\n\n    setReloadRequiredFlag() {\n        if (this.loadedFile && this.loadedFile != '') {\n            this.reloadRequired = true\n        }\n    }\n\n    @Watch('renderQuality')\n    async renderQualityChanged(newVal: number) {\n        if (viewer && viewer.renderQuality !== newVal) {\n            viewer.updateRenderQuality(newVal)\n            await this.reloadViewer()\n        }\n    }\n\n    @Watch('currentPosition')\n    currentPositionChanged(newVal: number[]) {\n        if (viewer) {\n            const position = [\n                {axes: 'X', position: newVal[0]},\n                {axes: 'Y', position: newVal[1]},\n                {axes: 'Z', position: newVal[2]},\n            ]\n\n            viewer.updateToolPosition(position)\n        }\n    }\n\n    @Watch('filePosition')\n    filePositionChanged(newVal: number) {\n        if (!viewer) return\n\n        const offset = 350\n        if (newVal > 0 && this.printerIsPrinting && this.tracking && newVal > offset) {\n            viewer.gcodeProcessor.updateFilePosition(newVal - offset)\n        } else {\n            viewer.gcodeProcessor.updateFilePosition(viewer.fileSize)\n        }\n    }\n\n    @Watch('tracking')\n    async trackingChanged(newVal: boolean) {\n        if (!viewer) return\n        if (newVal) {\n            //Set zSlider to max value\n            this.zSlider = this.maxZSlider\n            //Force renderers reload.\n            viewer.gcodeProcessor.updateFilePosition(0)\n            viewer?.forceRender()\n        } else {\n            viewer.gcodeProcessor.setLiveTracking(false)\n            await this.reloadViewer()\n        }\n    }\n\n    @Watch('printerIsPrinting')\n    printerIsPrintingChanged() {\n        this.tracking = false\n    }\n\n    get showCursor(): boolean {\n        return this.$store.state.gui.gcodeViewer.showCursor ?? false\n    }\n\n    set showCursor(newVal: boolean) {\n        this.$store.dispatch('gui/saveSetting', {name: 'gcodeViewer.showCursor', value: newVal})\n    }\n\n    @Watch('showCursor')\n    showCursorChanged(newVal: boolean) {\n        viewer?.setCursorVisiblity(newVal)\n    }\n\n    get showTravelMoves(): boolean {\n        return this.$store.state.gui.gcodeViewer.showTravelMoves ?? false\n    }\n\n    set showTravelMoves(newVal: boolean) {\n        this.$store.dispatch('gui/saveSetting', {name: 'gcodeViewer.showTravelMoves', value: newVal})\n    }\n\n    @Watch('showTravelMoves')\n    showTravelMovesChanged(newVal: boolean) {\n        viewer?.toggleTravels(newVal)\n    }\n\n    get showObjectSelection(): boolean {\n        return this.$store.state.gui.gcodeViewer.showObjectSelection ?? false\n    }\n\n    set showObjectSelection(newVal: boolean) {\n        this.$store.dispatch('gui/saveSetting', {name: 'gcodeViewer.showObjectSelection', value: newVal})\n    }\n\n    @Watch('showObjectSelection')\n    showObjectSelectionChanged(newVal: boolean) {\n        viewer?.buildObjects.showObjectSelection(newVal)\n    }\n\n    get hdRendering() {\n        return this.$store.state.gui.gcodeViewer.hdRendering\n    }\n\n    set hdRendering(newVal) {\n        this.$store.dispatch('gui/saveSetting', {name: 'gcodeViewer.hdRendering', value: newVal})\n    }\n\n    @Watch('hdRendering')\n    async hdRenderingChanged(newVal: boolean) {\n        if (viewer) {\n            viewer.gcodeProcessor.useHighQualityExtrusion(newVal)\n            await this.reloadViewer()\n        }\n    }\n\n    get forceLineRendering() {\n        return this.$store.state.gui.gcodeViewer.forceLineRendering\n    }\n\n    set forceLineRendering(newVal) {\n        this.$store.dispatch('gui/saveSetting', {name: 'gcodeViewer.forceLineRendering', value: newVal})\n    }\n\n    @Watch('forceLineRendering')\n    async forceLineRenderingChanged(newVal: boolean) {\n        if (viewer) {\n            viewer.gcodeProcessor.updateForceWireMode(newVal)\n            await this.reloadViewer()\n        }\n    }\n\n    get transparency() {\n        return this.$store.state.gui.gcodeViewer.transparency\n    }\n\n    set transparency(newVal) {\n        this.$store.dispatch('gui/saveSetting', {name: 'gcodeViewer.transparency', value: newVal})\n    }\n\n    @Watch('transparency')\n    async transparencyChanged(newVal: boolean) {\n        if (viewer) {\n            viewer.gcodeProcessor.setAlpha(newVal)\n            await this.reloadViewer()\n        }\n    }\n\n    get voxelMode() {\n        return this.$store.state.gui.gcodeViewer.voxelMode\n    }\n\n    set voxelMode(newVal) {\n        this.$store.dispatch('gui/saveSetting', {name: 'gcodeViewer.voxelMode', value: newVal})\n    }\n\n    @Watch('voxelMode')\n    async voxelModeChanged(newVal: boolean) {\n        if (viewer) {\n            viewer.gcodeProcessor.setVoxelMode(newVal)\n            viewer.gcodeProcessor.voxelWidth = this.voxelWidth\n            viewer.gcodeProcessor.voxelHeight = this.voxelHeight\n            await this.reloadViewer()\n        }\n    }\n\n    get voxelWidth() {\n        return this.$store.state.gui.gcodeViewer.voxelWidth ?? 1\n    }\n\n    set voxelWidth(newVal) {\n        this.$store.dispatch('gui/saveSetting', {name: 'gcodeViewer.voxelWidth', value: newVal})\n    }\n\n    get voxelHeight() {\n        return this.$store.state.gui.gcodeViewer.voxelHeight ?? 1\n    }\n\n    set voxelHeight(newVal) {\n        this.$store.dispatch('gui/saveSetting', {name: 'gcodeViewer.voxelHeight', value: newVal})\n    }\n\n    get specularLighting() {\n        return this.$store.state.gui.gcodeViewer.specularLighting\n    }\n\n    set specularLighting(newVal) {\n        this.$store.dispatch('gui/saveSetting', {name: 'gcodeViewer.specularLighting', value: newVal})\n    }\n\n    @Watch('specularLighting')\n    async specularLightingChanged(newVal: boolean) {\n        if (viewer) {\n            viewer.gcodeProcessor.useSpecularColor(newVal)\n            //await this.reloadViewer()\n        }\n    }\n\n    get extruderColors() {\n        return this.$store.state.gui.gcodeViewer?.extruderColors ?? false\n    }\n\n    loadToolColors(colors: string[]) {\n        if (viewer && colors.length) {\n            viewer.gcodeProcessor.resetTools()\n            colors.forEach((color: string) => {\n                viewer.gcodeProcessor.addTool(color, this.nozzle_diameter)\n            })\n            this.setReloadRequiredFlag()\n        }\n    }\n\n    @Watch('extruderColors')\n    extruderColorsChanged(newVal: string[]) {\n        if (viewer && newVal && newVal.length) {\n            this.loadToolColors(newVal)\n            this.setReloadRequiredFlag()\n        }\n    }\n\n    private colorModes = [\n        {text: 'Extruder', value: 0},\n        {text: 'Feed Rate', value: 1},\n        {text: 'Feature', value: 2},\n    ]\n\n    get colorMode(): number {\n        return this.$store.state.gui.gcodeViewer?.colorMode ?? 2\n    }\n\n    set colorMode(newVal: number) {\n        this.$store.dispatch('gui/saveSetting', {name: 'gcodeViewer.colorMode', value: newVal})\n\n        if (viewer) {\n            if (viewer.gcodeProcessor.colorMode !== newVal) {\n                viewer.gcodeProcessor.setColorMode(newVal)\n                this.reloadViewer()\n            }\n        }\n    }\n\n    get backgroundColor() {\n        return this.$store.state.gui.gcodeViewer?.backgroundColor ?? '#121212'\n    }\n\n    @Watch('backgroundColor')\n    backgroundColorChanged(newVal: string) {\n        if (!viewer) return\n        viewer.setBackgroundColor(newVal)\n    }\n\n    get gridColor() {\n        return this.$store.state.gui.gcodeViewer?.gridColor ?? '#B3B3B3'\n    }\n\n    @Watch('gridColor')\n    gridColorChanged(newVal: string) {\n        if (!viewer) return\n        viewer.bed.setBedColor(newVal)\n    }\n\n    get showAxes() {\n        return this.$store.state.gui.gcodeViewer?.showAxes ?? true\n    }\n\n    @Watch('showAxes')\n    showAxesChanged(newVal: boolean) {\n        if (!viewer) return\n        viewer.axes.show(newVal)\n    }\n\n    get minFeed() {\n        return this.$store.state.gui.gcodeViewer?.minFeed ?? 20\n    }\n\n    @Watch('minFeed')\n    minFeedChanged(newVal: number) {\n        if (!viewer) return\n        viewer.gcodeProcessor.updateColorRate(newVal * 60, this.maxFeed * 60)\n    }\n\n    get maxFeed() {\n        return this.$store.state.gui.gcodeViewer?.maxFeed ?? 100\n    }\n\n    @Watch('maxFeed')\n    maxFeedChanged(newVal: number) {\n        if (!viewer) return\n        viewer.gcodeProcessor.updateColorRate(this.minFeed * 60, newVal * 60)\n    }\n\n    get minFeedColor() {\n        return this.$store.state.gui.gcodeViewer?.minFeedColor ?? '#0000FF'\n    }\n\n    @Watch('minFeedColor')\n    minFeedColorUpdated(newVal: string) {\n        if (!viewer) return\n        viewer.gcodeProcessor.updateMinFeedColor(newVal)\n        this.setReloadRequiredFlag()\n    }\n\n    get maxFeedColor() {\n        return this.$store.state.gui.gcodeViewer?.maxFeedColor ?? '#FF0000'\n    }\n\n    @Watch('maxFeedColor')\n    maxFeedColorUpdated(newVal: string) {\n        if (!viewer) return\n        viewer.gcodeProcessor.updateMaxFeedColor(newVal)\n        this.setReloadRequiredFlag()\n    }\n\n    get kinematics() {\n        return this.$store.state.printer.configfile?.settings?.printer?.kinematics ?? ''\n    }\n\n    @Watch('kinematics')\n    kinematicsChanged(newVal: string) {\n        if (viewer && newVal) {\n            viewer.bed.setDelta(newVal.includes('delta'))\n        }\n    }\n\n    get bedMinSize() {\n        return this.$store.state.printer.toolhead?.axis_minimum ?? null\n    }\n\n    @Watch('bedMinSize', {deep: true})\n    bedMinSizeChanged(newVal: number[] | null) {\n        if (viewer && newVal) {\n            viewer.bed.buildVolume['x'].min = newVal[0]\n            viewer.bed.buildVolume['y'].min = newVal[1]\n            viewer.bed.buildVolume['z'].min = newVal[2]\n        }\n    }\n\n    get bedMaxSize() {\n        return this.$store.state.printer.toolhead?.axis_maximum ?? null\n    }\n\n    @Watch('bedMaxSize', {deep: true})\n    bedMaxSizeChanged(newVal: number[] | null) {\n        if (newVal && viewer) {\n            viewer.bed.buildVolume['x'].max = newVal[0]\n            viewer.bed.buildVolume['y'].max = newVal[1]\n            viewer.bed.buildVolume['z'].max = newVal[2]\n        }\n    }\n\n    @Watch('zSlider')\n    zSliderChanged(newVal: number) {\n        viewer?.setZClipPlane(newVal, -1)\n        viewer?.forceRender()\n    }\n\n    get progressColor() {\n        return this.$store.state.gui.gcodeViewer?.progressColor ?? '#FFFFFF'\n    }\n\n    @Watch('progressColor')\n    progressColorChanged(newVal: string) {\n        viewer?.setProgressColor(newVal)\n    }\n\n    updateZSlider(newVal: any) {\n        this.zSlider = newVal\n    }\n}\n</script>\n\n"]}]}