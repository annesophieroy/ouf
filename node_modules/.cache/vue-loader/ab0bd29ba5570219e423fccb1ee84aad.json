{"remainingRequest":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/components/panels/Timelapse/TimelapseFilesPanel.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/components/panels/Timelapse/TimelapseFilesPanel.vue","mtime":1644874918000},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js","mtime":1645990064605},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/babel-loader/lib/index.js","mtime":1645990067759},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/ts-loader/index.js","mtime":1645990068168},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js","mtime":1645990064605},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1645990069130}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["TimelapseFilesPanel.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmQA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"TimelapseFilesPanel.vue","sourceRoot":"src/components/panels/Timelapse","sourcesContent":["<style scoped>\n.v-data-table .v-data-table-header__icon {\n    margin-left: 7px;\n}\n\n.v-data-table th {\n    white-space: nowrap;\n}\n\n.v-data-table .file-list-cursor:hover {\n    cursor: pointer;\n}\n\n</style>\n\n<template>\n    <div>\n        <panel :title=\"$t('Timelapse.TimelapseFiles')\" icon=\"mdi-file-document-multiple-outline\" card-class=\"timelapse-files-panel\">\n            <v-card-text>\n                <v-row>\n                    <v-col class=\"col-12 d-flex align-center\">\n                        <v-text-field\n                            v-model=\"search\"\n                            append-icon=\"mdi-magnify\"\n                            :label=\"$t('Timelapse.Search')\"\n                            single-line\n                            outlined\n                            clearable\n                            hide-details\n                            dense\n                            style=\"max-width: 300px;\"\n                        ></v-text-field>\n                        <v-spacer></v-spacer>\n                        <v-btn v-if=\"this.directoryPermissions.includes('w')\" @click=\"createDirectory\" :title=\"$t('Timelapse.CreateNewDirectory')\" class=\"px-2 minwidth-0 ml-3\"><v-icon>mdi-folder-plus</v-icon></v-btn>\n                        <v-btn @click=\"refreshFileList\" :title=\"$t('Timelapse.RefreshCurrentDirectory')\" class=\"px-2 minwidth-0 ml-3\"><v-icon>mdi-refresh</v-icon></v-btn>\n                    </v-col>\n                </v-row>\n            </v-card-text>\n            <v-card-text>\n                <v-row>\n                    <v-col class=\"col-12 py-2 d-flex align-center\">\n                        <span><b>{{ $t('Timelapse.CurrentPath') }}:</b> {{ this.currentPath !== 'timelapse' ? \"/\"+this.currentPath.substring(10) : \"/\" }}</span>\n                        <v-spacer></v-spacer>\n                        <template v-if=\"this.disk_usage !== null\">\n                            <v-tooltip top>\n                                <template v-slot:activator=\"{ on, attrs }\">\n                                    <span v-bind=\"attrs\" v-on=\"on\">\n                                        <b>{{ $t('Timelapse.FreeDisk') }}:</b> {{ formatFilesize(disk_usage.free) }}\n                                    </span>\n                                </template>\n                                <span>\n                                    {{ $t('Timelapse.Used') }}: {{ formatFilesize(this.disk_usage.used) }}<br />\n                                    {{ $t('Timelapse.Free') }}: {{ formatFilesize(this.disk_usage.free) }}<br />\n                                    {{ $t('Timelapse.Total') }}: {{ formatFilesize(this.disk_usage.total) }}\n                                </span>\n                            </v-tooltip>\n                        </template>\n                    </v-col>\n                </v-row>\n            </v-card-text>\n            <v-divider class=\"mb-3\"></v-divider>\n            <v-data-table\n                :items=\"displayFiles\"\n                class=\"files-table\"\n                :headers=\"headers\"\n                :custom-sort=\"sortFiles\"\n                :sort-by.sync=\"sortBy\"\n                :sort-desc.sync=\"sortDesc\"\n                :items-per-page.sync=\"countPerPage\"\n                :footer-props=\"{\n                    itemsPerPageText: $t('Timelapse.Files'),\n                    itemsPerPageAllText: $t('Timelapse.AllFiles'),\n                    itemsPerPageOptions: [10,25,50,100,-1]\n                }\"\n                item-key=\"name\"\n                :search=\"search\"\n                :custom-filter=\"advancedSearch\"\n                mobile-breakpoint=\"0\">\n\n                <template slot=\"items\">\n                    <td v-for=\"header in headers\" v-bind:key=\"header.value\">{{ header.text }}</td>\n                </template>\n\n                <template #no-data>\n                    <div class=\"text-center font-italic\">{{ $t('Timelapse.Empty') }}</div>\n                </template>\n\n                <template slot=\"body.prepend\" v-if=\"(currentPath !== 'timelapse')\">\n                    <tr\n                        class=\"file-list-cursor\"\n                        @click=\"clickRowGoBack\"\n                    >\n                        <td class=\"pr-0 text-center\" style=\"width: 32px;\"><v-icon>mdi-folder-upload</v-icon></td>\n                        <td class=\" \" :colspan=\"headers.length\">..</td>\n                    </tr>\n                </template>\n\n                <template #item=\"{ index, item }\">\n                    <tr\n                        :key=\"`${index} ${item.filename}`\"\n                        v-longpress:600=\"(e) => showContextMenu(e, item)\"\n                        @contextmenu=\"showContextMenu($event, item)\"\n                        @click=\"clickRow(item)\"\n                        class=\"file-list-cursor user-select-none\"\n                    >\n                        <td class=\"pr-0 text-center\" style=\"width: 32px;\">\n                            <template v-if=\"item.isDirectory\">\n                                <v-icon>mdi-folder</v-icon>\n                            </template>\n                            <template v-else-if=\"item.filename.endsWith('zip')\">\n                                <v-icon>mdi-folder-zip-outline</v-icon>\n                            </template>\n                            <template v-else-if=\"getThumbnail(item)\">\n                                <v-tooltip v-if=\"!item.isDirectory && getThumbnail(item)\" top content-class=\"tooltip__content-opacity1\">\n                                    <template v-slot:activator=\"{ on, attrs }\">\n                                        <vue-load-image>\n                                            <img slot=\"image\" :src=\"getThumbnail(item)\" :alt=\"item.filename\" width=\"32\" v-bind=\"attrs\" v-on=\"on\" />\n                                            <v-progress-circular slot=\"preloader\" indeterminate color=\"primary\"></v-progress-circular>\n                                            <v-icon slot=\"error\">mdi-file</v-icon>\n                                        </vue-load-image>\n                                    </template>\n                                    <span><img :src=\"getThumbnail(item)\" :alt=\"item.filename\" width=\"250\" /></span>\n                                </v-tooltip>\n                            </template>\n                            <template v-else>\n                                <v-icon>mdi-file</v-icon>\n                            </template>\n                        </td>\n                        <td class=\" \">{{ item.filename }}</td>\n                        <td class=\"text-no-wrap text-right\" v-if=\"headers.find(header => header.value === 'size').visible\">{{ item.isDirectory ? '--' : formatFilesize(item.size) }}</td>\n                        <td class=\"text-right\" v-if=\"headers.find(header => header.value === 'modified').visible\">{{ formatDate(item.modified) }}</td>\n                    </tr>\n                </template>\n            </v-data-table>\n        </panel>\n        <v-menu v-model=\"contextMenu.shown\" :position-x=\"contextMenu.x\" :position-y=\"contextMenu.y\" absolute offset-y>\n            <v-list>\n                <v-list-item @click=\"downloadFile(contextMenu.item.filename)\" v-if=\"!contextMenu.item.isDirectory\">\n                    <v-icon left>mdi-cloud-download</v-icon> {{ $t('Timelapse.Download')}}\n                </v-list-item>\n                <v-list-item @click=\"renameDirectory(contextMenu.item)\" v-if=\"contextMenu.item.isDirectory && contextMenu.item.permissions.includes('w')\">\n                    <v-icon left>mdi-rename-box</v-icon> {{ $t('Timelapse.Rename')}}\n                </v-list-item>\n                <v-list-item @click=\"renameFile(contextMenu.item)\" v-if=\"!contextMenu.item.isDirectory && contextMenu.item.permissions.includes('w')\">\n                    <v-icon left>mdi-rename-box</v-icon> {{ $t('Timelapse.Rename')}}\n                </v-list-item>\n                <v-list-item @click=\"removeFile\" v-if=\"!contextMenu.item.isDirectory && contextMenu.item.permissions.includes('w')\">\n                    <v-icon left>mdi-delete</v-icon> {{ $t('Timelapse.Delete')}}\n                </v-list-item>\n                <v-list-item @click=\"deleteDirectory(contextMenu.item)\" v-if=\"contextMenu.item.isDirectory && contextMenu.item.permissions.includes('w')\">\n                    <v-icon left>mdi-delete</v-icon> {{ $t('Timelapse.Delete')}}\n                </v-list-item>\n            </v-list>\n        </v-menu>\n        <v-dialog v-model=\"dialogRenameFile.show\" max-width=\"400\">\n            <panel :title=\"$t('Timelapse.RenameFile')\" card-class=\"gcode-files-rename-file-dialog\" :margin-bottom=\"false\">\n                <template v-slot:buttons>\n                    <v-btn icon tile @click=\"dialogRenameFile.show = false\"><v-icon>mdi-close-thick</v-icon></v-btn>\n                </template>\n                <v-card-text>\n                    <v-text-field\n                        v-model=\"dialogRenameFile.newName\"\n                        :label=\"$t('Timelapse.Name')\"\n                        ref=\"inputFieldRenameFile\"\n                        @keypress.enter=\"renameFileAction\"\n                        required\n                    ></v-text-field>\n                </v-card-text>\n                <v-card-actions>\n                    <v-spacer></v-spacer>\n                    <v-btn color=\"\" text @click=\"dialogRenameFile.show = false\">{{ $t('Timelapse.Cancel') }}</v-btn>\n                    <v-btn color=\"primary\" text @click=\"renameFileAction\">{{ $t('Timelapse.Rename') }}</v-btn>\n                </v-card-actions>\n            </panel>\n        </v-dialog>\n        <v-dialog v-model=\"dialogCreateDirectory.show\" max-width=\"400\">\n            <panel :title=\"$t('Timelapse.NewDirectory')\" card-class=\"gcode-files-new-directory-dialog\" :margin-bottom=\"false\">\n                <template v-slot:buttons>\n                    <v-btn icon tile @click=\"dialogCreateDirectory.show = false\"><v-icon>mdi-close-thick</v-icon></v-btn>\n                </template>\n                <v-card-text>\n                    <v-text-field\n                        v-model=\"dialogCreateDirectory.name\"\n                        ref=\"inputFieldCreateDirectory\"\n                        @keypress.enter=\"createDirectoryAction\"\n                        :label=\"$t('Timelapse.Name')\"\n                        :rules=\"input_rules\"\n                        required\n                    ></v-text-field>\n                </v-card-text>\n                <v-card-actions>\n                    <v-spacer></v-spacer>\n                    <v-btn color=\"\" text @click=\"dialogCreateDirectory.show = false\">{{ $t('Timelapse.Cancel') }}</v-btn>\n                    <v-btn color=\"primary\" text @click=\"createDirectoryAction\">{{ $t('Timelapse.Create') }}</v-btn>\n                </v-card-actions>\n            </panel>\n        </v-dialog>\n        <v-dialog v-model=\"dialogRenameDirectory.show\" max-width=\"400\">\n            <panel :title=\"$t('Timelapse.RenameDirectory')\" card-class=\"gcode-files-rename-directory-dialog\" :margin-bottom=\"false\">\n                <template v-slot:buttons>\n                    <v-btn icon tile @click=\"dialogRenameDirectory.show = false\"><v-icon>mdi-close-thick</v-icon></v-btn>\n                </template>\n                <v-card-text>\n                    <v-text-field\n                        v-model=\"dialogRenameDirectory.newName\"\n                        ref=\"inputFieldRenameDirectory\"\n                        :label=\"$t('Timelapse.Name')\"\n                        @keyup.enter=\"renameDirectoryAction\"\n                        required\n                    ></v-text-field>\n                </v-card-text>\n                <v-card-actions>\n                    <v-spacer></v-spacer>\n                    <v-btn color=\"\" text @click=\"dialogRenameDirectory.show = false\">{{ $t('Timelapse.Cancel') }}</v-btn>\n                    <v-btn color=\"primary\" text @click=\"renameDirectoryAction\">{{ $t('Timelapse.Rename') }}</v-btn>\n                </v-card-actions>\n            </panel>\n        </v-dialog>\n        <v-dialog v-model=\"dialogDeleteDirectory.show\" max-width=\"400\">\n            <panel :title=\"$t('Timelapse.DeleteDirectory')\" card-class=\"gcode-files-delete-directory-dialog\" :margin-bottom=\"false\">\n                <template v-slot:buttons>\n                    <v-btn icon tile @click=\"dialogDeleteDirectory.show = false\"><v-icon>mdi-close-thick</v-icon></v-btn>\n                </template>\n                <v-card-text>\n                    <p class=\"mb-0\">{{ $t('Timelapse.DeleteDirectoryQuestion', { name: dialogDeleteDirectory.item.filename } )}}</p>\n                </v-card-text>\n                <v-card-actions>\n                    <v-spacer></v-spacer>\n                    <v-btn color=\"\" text @click=\"dialogDeleteDirectory.show = false\">{{ $t('Timelapse.Cancel') }}</v-btn>\n                    <v-btn color=\"error\" text @click=\"deleteDirectoryAction\">{{ $t('Timelapse.Delete') }}</v-btn>\n                </v-card-actions>\n            </panel>\n        </v-dialog>\n        <v-dialog v-model=\"boolVideoDialog\" :max-width=\"700\">\n            <panel :title=\"$t('Timelapse.Video')\" icon=\"mdi-file-video\" card-class=\"timelapse-video-dialog\" :margin-bottom=\"false\">\n                <template v-slot:buttons>\n                    <v-btn icon tile @click=\"boolVideoDialog = false\"><v-icon>mdi-close-thick</v-icon></v-btn>\n                </template>\n                <v-card-text class=\"\">\n                    <v-row>\n                        <v-col class=\"pb-0\">\n                            <video :src=\"hostUrl+'server/files/'+videoDialogFilename\" controls style=\"width: 100%;\">\n                                Sorry, your browser doesn't support embedded videos,\n                                but don't worry, you can <a :href=\"hostUrl+'server/files/'+videoDialogFilename\">download it</a>\n                                and watch it with your favorite video player!\n                            </video>\n                        </v-col>\n                    </v-row>\n                    <v-row>\n                        <v-col class=\"text-center\">\n                            <v-btn text color=\"primary\" :href=\"hostUrl+'server/files/'+videoDialogFilename\" target=\"_blank\">{{ $t('Timelapse.Download') }}</v-btn>\n                        </v-col>\n                    </v-row>\n                </v-card-text>\n            </panel>\n        </v-dialog>\n    </div>\n</template>\n<script lang=\"ts\">\nimport {Component, Mixins} from 'vue-property-decorator'\nimport BaseMixin from '@/components/mixins/base'\nimport {formatFilesize, formatDate, sortFiles} from '@/plugins/helpers'\nimport {FileStateFile} from '@/store/files/types'\nimport Panel from '@/components/ui/Panel.vue'\n\ninterface dialogRenameObject {\n    show: boolean\n    newName: string\n    item: FileStateFile\n}\n\n@Component({\n    components: {Panel}\n})\nexport default class TimelapseFilesPanel extends Mixins(BaseMixin) {\n    formatDate = formatDate\n    formatFilesize = formatFilesize\n    sortFiles = sortFiles\n\n    $refs!: {\n        inputFieldRenameFile: any,\n        inputFieldCreateDirectory: any,\n        inputFieldRenameDirectory: any,\n    }\n\n    private search = ''\n    private boolVideoDialog = false\n    private videoDialogFilename = ''\n\n    private dialogCreateDirectory = {\n        show: false,\n        name: ''\n    }\n\n    private contextMenu = {\n        shown: false,\n        isDirectory: false,\n        touchTimer: undefined,\n        x: 0,\n        y: 0,\n        item: {\n            isDirectory: false,\n            filename: '',\n            permissions: '',\n            modified: new Date()\n        }\n    }\n\n    private dialogRenameFile: dialogRenameObject = {\n        show: false,\n        newName: '',\n        item: {\n            isDirectory: false,\n            filename: '',\n            permissions: '',\n            modified: new Date()\n        }\n    }\n\n    private dialogRenameDirectory: dialogRenameObject = {\n        show: false,\n        newName: '',\n        item: {\n            isDirectory: false,\n            filename: '',\n            permissions: '',\n            modified: new Date()\n        }\n    }\n\n    private dialogDeleteDirectory: dialogRenameObject = {\n        show: false,\n        newName: '',\n        item: {\n            isDirectory: false,\n            filename: '',\n            permissions: '',\n            modified: new Date()\n        }\n    }\n\n    private input_rules = [\n        (value: string) => value.indexOf(' ') === -1 || 'Name contains spaces!'\n    ]\n\n    get headers() {\n        return [\n            { text: '',                                     value: '',                          align: 'left',  configable: false,  visible: true, filterable: false },\n            { text: this.$t('Timelapse.Name'),              value: 'filename',                  align: 'left',  configable: false,  visible: true },\n            { text: this.$t('Timelapse.Filesize'),          value: 'size',                      align: 'right', configable: true,   visible: true },\n            { text: this.$t('Timelapse.LastModified'),      value: 'modified',                  align: 'right', configable: true,   visible: true },\n        ]\n    }\n\n    get directory() {\n        return this.$store.getters['files/getDirectory'](this.currentPath)\n    }\n\n    get disk_usage() {\n        return this.directory?.disk_usage ?? { used: 0, free: 0, total: 0}\n    }\n\n    get directoryPermissions() {\n        return this.directory?.permissions ?? 'r'\n    }\n\n    get files() {\n        return [...this.directory?.childrens ?? []]\n    }\n\n    get sortBy() {\n        return this.$store.state.gui.view.gcodefiles.sortBy ?? 'modified'\n    }\n\n    set sortBy(newVal) {\n        if (newVal === undefined) newVal = 'modified'\n\n        this.$store.dispatch('gui/saveSetting', { name: 'view.timelapse.sortBy', value: newVal })\n    }\n\n    get sortDesc() {\n        return this.$store.state.gui.view.gcodefiles.sortDesc ?? true\n    }\n\n    set sortDesc(newVal) {\n        if (newVal === undefined) newVal = false\n\n        this.$store.dispatch('gui/saveSetting', { name: 'view.timelapse.sortDesc', value: newVal })\n    }\n\n    get countPerPage() {\n        return this.$store.state.gui.view.gcodefiles?.countPerPage ?? 10\n    }\n\n    set countPerPage(newVal) {\n        this.$store.dispatch('gui/saveSetting', { name: 'view.timelapse.countPerPage', value: newVal })\n    }\n\n    get displayFiles() {\n        return this.files?.filter((file) => {\n            if (file.isDirectory) return true\n\n            return (file.filename.endsWith('mp4') || file.filename.endsWith('zip'))\n        }) ?? []\n    }\n\n    get currentPath() {\n        return this.$store.state.gui.view.timelapse.currentPath\n    }\n\n    set currentPath(newVal) {\n        this.$store.dispatch('gui/saveSettingWithoutUpload', { name: 'view.timelapse.currentPath', value: newVal })\n    }\n\n    createDirectory() {\n        this.dialogCreateDirectory.name = ''\n        this.dialogCreateDirectory.show = true\n\n        setTimeout(() => {\n            this.$refs.inputFieldCreateDirectory?.focus()\n        }, 200)\n    }\n\n    createDirectoryAction() {\n        if (this.dialogCreateDirectory.name.length && this.dialogCreateDirectory.name.indexOf(' ') === -1) {\n            this.dialogCreateDirectory.show = false\n            this.$socket.emit('server.files.post_directory', { path: this.currentPath+'/'+this.dialogCreateDirectory.name }, { action: 'files/getCreateDir' })\n        }\n    }\n\n    refreshFileList() {\n        this.$socket.emit('server.files.get_directory', { path: this.currentPath }, { action: 'files/getDirectory' })\n    }\n\n    advancedSearch(value: string | number, search: string) {\n        return value != null &&\n            search != null &&\n            typeof value === 'string' &&\n            value.toString().toLowerCase().indexOf(search.toLowerCase()) !== -1\n    }\n\n    getThumbnail(item: FileStateFile) {\n        const filename = item.filename.slice(0, item.filename.lastIndexOf('.'))\n        const preview = this.files?.find((file) => file.filename === filename+'.jpg')\n        if (preview) {\n            return `${this.apiUrl}/server/files/${encodeURI(this.currentPath)}/${encodeURI(preview.filename)}?timestamp=${preview.modified.getTime()}`\n        }\n\n        return ''\n    }\n\n    clickRow(item: FileStateFile, force = false) {\n        if (!this.contextMenu.shown || force) {\n            if (force) this.contextMenu.shown = false\n\n            if (item.isDirectory) this.currentPath += '/' + item.filename\n            else if (item.filename.endsWith('zip')) {\n                this.downloadFile(item.filename)\n            } else if (item.filename.endsWith('mp4')) {\n                this.videoDialogFilename =  encodeURI(`${this.currentPath}/${item.filename}`)\n                this.boolVideoDialog = true\n            }\n        }\n    }\n\n    clickRowGoBack() {\n        this.currentPath = this.currentPath.substr(0, this.currentPath.lastIndexOf('/'))\n    }\n\n    showContextMenu (e: any, item: FileStateFile) {\n        if (!this.contextMenu.shown) {\n            e?.preventDefault()\n            this.contextMenu.shown = true\n            this.contextMenu.x = e?.clientX || e?.pageX || window.screenX / 2\n            this.contextMenu.y = e?.clientY || e?.pageY || window.screenY / 2\n            this.contextMenu.item = item\n            this.$nextTick(() => {\n                this.contextMenu.shown = true\n            })\n        }\n    }\n\n    existsFramesZip(item: FileStateFile) {\n        const posLastPoint = item.filename.lastIndexOf('.')\n        const zipFilename = item.filename.substr(0, posLastPoint)+'.zip'\n\n        return (this.files.findIndex((file) => file.filename === zipFilename) !== -1)\n    }\n\n    downloadFile(filename: string) {\n        const path = (this.currentPath+'/'+filename)\n        const href = this.apiUrl + '/server/files/' + encodeURI(path)\n\n        window.open(href)\n    }\n\n    renameFile(item: FileStateFile) {\n        const posLastPoint = item.filename.lastIndexOf('.')\n        this.dialogRenameFile.newName = item.filename.substr(0, posLastPoint)\n\n        this.dialogRenameFile.item = item\n        this.dialogRenameFile.show = true\n\n        setTimeout(() => {\n            this.$refs.inputFieldRenameFile?.focus()\n        }, 200)\n    }\n\n    renameFileAction() {\n        const posLastPoint = this.dialogRenameFile.item.filename.lastIndexOf('.')\n        const oldNameWithoutExtension = this.dialogRenameFile.item.filename.substr(0, posLastPoint)\n\n        this.dialogRenameFile.show = false\n        this.$socket.emit('server.files.move', {\n            source: this.currentPath+'/'+this.dialogRenameFile.item.filename,\n            dest: this.currentPath+'/'+this.dialogRenameFile.newName+'.mp4'\n        }, { action: 'files/getMove' })\n\n        const fileJpg = this.files.find((file) => file.filename === oldNameWithoutExtension+'.jpg')\n        if (fileJpg) {\n            this.$socket.emit('server.files.move', {\n                source: this.currentPath+'/'+oldNameWithoutExtension+'.jpg',\n                dest: this.currentPath+'/'+this.dialogRenameFile.newName+'.jpg'\n            })\n        }\n    }\n\n    renameDirectory(item: FileStateFile) {\n        this.dialogRenameDirectory.item = item\n        this.dialogRenameDirectory.newName = item.filename\n        this.dialogRenameDirectory.show = true\n\n        setTimeout(() => {\n            this.$refs.inputFieldRenameDirectory?.focus()\n        }, 200)\n    }\n\n    renameDirectoryAction() {\n        this.dialogRenameDirectory.show = false\n        this.$socket.emit('server.files.move', {\n            source: this.currentPath+'/'+this.dialogRenameDirectory.item.filename,\n            dest: this.currentPath+'/'+this.dialogRenameDirectory.newName\n        }, { action: 'files/getMove' })\n    }\n\n    removeFile() {\n        const filename = this.contextMenu.item.filename.slice(0, this.contextMenu.item.filename.lastIndexOf('.'))\n        const previewFilename = filename+'.jpg'\n        const previewExists = (this.files.findIndex((file) => file.filename === previewFilename) !== -1)\n\n        if(previewExists) this.$socket.emit('server.files.delete_file', { path: this.currentPath+'/'+previewFilename }, { action: 'files/getDeleteFile' })\n        this.$socket.emit('server.files.delete_file', { path: this.currentPath+'/'+this.contextMenu.item.filename }, { action: 'files/getDeleteFile' })\n    }\n\n    deleteDirectory(item: FileStateFile) {\n        this.dialogDeleteDirectory.item = item\n        this.dialogDeleteDirectory.show = true\n    }\n\n    deleteDirectoryAction() {\n        this.dialogDeleteDirectory.show = false\n        this.$socket.emit('server.files.delete_directory', { path: this.currentPath+'/'+this.contextMenu.item.filename, force: true }, { action: 'files/getDeleteDir' })\n    }\n}\n</script>\n"]}]}