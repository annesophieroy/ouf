{"remainingRequest":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/components/inputs/ToolSlider.vue?vue&type=style&index=0&id=5430853f&scoped=true&lang=css&","dependencies":[{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/components/inputs/ToolSlider.vue","mtime":1644874918000},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1645990066541},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1645990070825},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/postcss-loader/src/index.js","mtime":1645990067674},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js","mtime":1645990064605},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1645990069130}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5fdG9vbC1zbGlkZXItc3ViaGVhZGVyIHsKICAgIGhlaWdodDogYXV0bzsKfQo="},{"version":3,"sources":["ToolSlider.vue"],"names":[],"mappings":";AACA;AACA;AACA","file":"ToolSlider.vue","sourceRoot":"src/components/inputs","sourcesContent":["<style scoped>\n    ._tool-slider-subheader {\n        height: auto;\n    }\n</style>\n\n<template>\n    <v-container class=\"px-0 py-2\">\n        <v-row>\n            <v-col class=\"pb-1 pt-3\">\n                <v-subheader class=\"_tool-slider-subheader\">\n                    <v-btn\n                        v-if=\"lockSliders && isTouchDevice\"\n                        @click=\"isLocked = !isLocked\"\n                        plain\n                        small\n                        icon\n                    >\n                        <v-icon small :color=\"(isLocked ? 'red' : '')\">\n                            {{ isLocked ? 'mdi-lock-outline' : 'mdi-lock-open-variant-outline' }}\n                        </v-icon>\n                    </v-btn>\n                    <v-icon small :class=\"'mr-2'\">\n                        {{ icon }}\n                    </v-icon>\n                    <span>{{ label }}</span>\n                    <v-btn\n                        v-if=\"value !== defaultValue\"\n                        class=\"ml-2\"\n                        x-small\n                        icon\n                        :disabled=\"isLocked\"\n                        @click=\"resetSlider\"\n                    >\n                        <v-icon>mdi-restart</v-icon>\n                    </v-btn>\n                    <v-spacer></v-spacer>\n                    <span class=\"font-weight-bold\">\n                        {{ value }} {{ unit }}\n                    </span>\n                </v-subheader>\n                <v-card-text class=\"py-0\">\n                    <v-slider\n                        v-model=\"value\"\n                        v-touch=\"{start: resetLockTimer}\"\n                        :disabled=\"isLocked\"\n                        :min=\"min\"\n                        :max=\"processedMax\"\n                        :color=\"colorBar\"\n                        @change=\"changeSlider\"\n                        hide-details>\n\n                        <template v-slot:prepend>\n                            <v-icon @click=\"decrement\" :disabled=\"isLocked\">mdi-minus</v-icon>\n                        </template>\n\n                        <template v-slot:append>\n                            <v-icon @click=\"increment\" :disabled=\"isLocked\">mdi-plus</v-icon>\n                        </template>\n                    </v-slider>\n                </v-card-text>\n            </v-col>\n        </v-row>\n    </v-container>\n</template>\n\n\n<script lang=\"ts\">\nimport {Component, Mixins, Prop, Watch} from 'vue-property-decorator'\nimport BaseMixin from '@/components/mixins/base'\nimport {Debounce} from 'vue-debounce-decorator'\n\n@Component\nexport default class ToolSlider extends Mixins(BaseMixin) {\n    private timeout: number | undefined\n    private isLocked = false\n    value = 0\n    startValue = 0\n    processedMax = 100\n    dynamicStep = 50\n\n    @Prop({ type: Number, required: true }) readonly target!: number\n    @Prop({ type: String, required: true }) readonly command!: string\n    @Prop({ type: String, default: '' }) readonly attributeName!: string\n    @Prop({ type: String, default: '' }) readonly label!: string\n    @Prop({ type: String, default: '' }) readonly icon!: string \n    @Prop({ type: String, default: '%' }) readonly unit!: string\n    @Prop({ type: Number, default: 1 }) readonly attributeScale!: number\n    @Prop({ type: Number, default: 0 }) readonly min!: number\n    @Prop({ type: Number, default: 100 }) readonly max!: number\n    @Prop({ type: Boolean, default: false }) readonly dynamicRange!: boolean\n    @Prop({ type: Number, default: 100 }) readonly defaultValue!: number\n    @Prop({ type: Number, default: 100 }) readonly step!: number\n    @Prop({ type: Number, default: 1 }) readonly multi!: number\n\n    created() {\n        this.value = this.target * this.multi\n        this.startValue = this.target * this.multi\n        this.dynamicStep = Math.floor((this.max - this.min) / 2)\n\n        if (this.value >= this.processedMax) {\n            this.processedMax = (Math.ceil(this.value / this.dynamicStep) + 1) * this.dynamicStep\n        }\n    }\n\n    @Watch('lockSliders', {immediate: true})\n    lockSlidersChanged(){\n        this.isLocked = this.lockSliders && this.isTouchDevice\n    }\n\n    startLockTimer() {\n        let t = this.lockSlidersDelay\n        if (!this.isTouchDevice || !this.lockSliders || (t <= 0)) return\n        this.timeout = setTimeout(() => this.isLocked = true, t * 1000)\n    }\n\n    resetLockTimer() {\n        clearTimeout(this.timeout)\n    }\n\n    get lockSliders() {\n        return this.$store.state.gui.uiSettings.lockSlidersOnTouchDevices\n    }\n\n    get lockSlidersDelay() {\n        return this.$store.state.gui.uiSettings.lockSlidersDelay\n    }\n\n    get colorBar() {\n        return this.max < this.value ? 'warning' : 'primary'\n    }\n\n    @Debounce(250)\n    changeSlider() {\n        this.sendCmd()\n\n        if (!this.dynamicRange) return\n        if (this.value >= this.processedMax) {\n            this.processedMax = this.value + this.dynamicStep\n        }\n    }\n\n    @Watch('target', { immediate: true })\n    targetChanged(newVal: number) {\n        this.value = Math.round(newVal * this.multi)\n\n        if (!this.dynamicRange) return\n        if (this.value >= this.processedMax) {\n            this.processedMax = this.value + this.dynamicStep\n        }\n    }\n\n    @Watch('max', { immediate: true })\n    maxChanged(newVal: number) {\n        this.processedMax = newVal > this.value ? newVal : Math.ceil(this.value / this.dynamicStep) * this.dynamicStep\n    }\n\n    resetSlider() {\n        this.value = this.defaultValue\n        this.processedMax = this.max\n        if (this.value >= this.processedMax) {\n            this.processedMax = (Math.ceil(this.value / this.dynamicStep) + 1) * this.dynamicStep\n        }\n\n        this.sendCmd()\n    }\n\n    sendCmd() {\n        const gcode = this.command + ' ' + this.attributeName + (Math.max(1, this.value) * this.attributeScale).toFixed(0)\n        this.$store.dispatch('server/addEvent', {message: gcode, type: 'command'})\n        this.$socket.emit('printer.gcode.script', {script: gcode})\n\n        this.startLockTimer()\n    }\n\n    decrement() {\n        this.value = this.value > this.min ? Math.round(this.value - this.step) : this.min\n        this.sendCmd()\n    }\n\n    increment() {\n        this.value = this.value < this.processedMax || this.dynamicRange ? Math.round(this.value + this.step) : this.processedMax\n        this.sendCmd()\n    }\n}\n</script>\n"]}]}