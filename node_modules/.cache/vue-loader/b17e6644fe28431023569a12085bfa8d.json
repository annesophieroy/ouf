{"remainingRequest":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/components/settings/SettingsDashboardTabDesktop.vue?vue&type=style&index=0&id=da458548&scoped=true&lang=css&","dependencies":[{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/components/settings/SettingsDashboardTabDesktop.vue","mtime":1644874918000},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1645990066541},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1645990070825},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/postcss-loader/src/index.js","mtime":1645990067674},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js","mtime":1645990064605},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1645990069130}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5naG9zdCB7CiAgICBvcGFjaXR5OiAwLjU7CiAgICBiYWNrZ3JvdW5kOiAjYzhlYmZiOwp9Cg=="},{"version":3,"sources":["SettingsDashboardTabDesktop.vue"],"names":[],"mappings":";AACA;AACA;AACA;AACA","file":"SettingsDashboardTabDesktop.vue","sourceRoot":"src/components/settings","sourcesContent":["<style scoped>\n    .ghost {\n        opacity: 0.5;\n        background: #c8ebfb;\n    }\n</style>\n\n<template>\n    <v-card flat>\n        <v-card-text>\n            <v-row>\n                <v-col class=\"col-12 col-md-6\">\n                    <v-card class=\"mx-auto\" max-width=\"300\" tile >\n                        <v-list dense>\n                            <v-list-item>\n                                <v-row>\n                                    <v-col class=\"col-auto pr-0\">\n                                        <v-icon>mdi-information</v-icon>\n                                    </v-col>\n                                    <v-col>\n                                        {{ $t('Panels.StatusPanel.Headline') }}\n                                    </v-col>\n                                    <v-col class=\"col-auto\">\n                                        <v-icon color=\"grey lighten-1\">mdi-lock</v-icon>\n                                    </v-col>\n                                </v-row>\n                            </v-list-item>\n                            <draggable v-model=\"desktopLayout1\" :handle=\"isMobile ? '.handle' : ''\" class=\"v-list-item-group\" ghost-class=\"ghost\" group=\"desktopViewport\">\n                                <template v-for=\"(element) in desktopLayout1\">\n                                    <v-list-item :key=\"'item-desktop-'+element.name\" link>\n                                        <v-row>\n                                            <v-col class=\"col-auto pr-0\">\n                                                <v-icon v-if=\"isMobile\" class=\"handle\">mdi-arrow-up-down</v-icon>\n                                                <v-icon v-else v-text=\"convertPanelnameToIcon(element.name)\"></v-icon>\n                                            </v-col>\n                                            <v-col class=\"pr-0\">\n                                                {{ getPanelName(element.name) }}\n                                            </v-col>\n                                            <v-col class=\"col-auto pl-0\">\n                                                <v-icon v-if=\"!element.visible\" color=\"grey lighten-1\" @click.stop=\"changeState1(element.name,true)\">mdi-checkbox-blank-outline</v-icon>\n                                                <v-icon v-else color=\"primary\" @click.stop=\"changeState1(element.name,false)\">mdi-checkbox-marked</v-icon>\n                                            </v-col>\n                                        </v-row>\n                                    </v-list-item>\n                                </template>\n                            </draggable>\n                        </v-list>\n                    </v-card>\n                </v-col>\n                <v-col class=\"col-12 col-md-6\">\n                    <v-card class=\"mx-auto\" max-width=\"300\" tile >\n                        <v-list dense>\n                            <draggable v-model=\"desktopLayout2\" :handle=\"isMobile ? '.handle' : ''\" class=\"v-list-item-group\" ghost-class=\"ghost\" group=\"desktopViewport\">\n                                <template v-for=\"(element) in desktopLayout2\">\n                                    <v-list-item :key=\"'item-desktop-'+element.name\" link>\n                                        <v-row>\n                                            <v-col class=\"col-auto pr-0\">\n                                                <v-icon v-if=\"isMobile\" class=\"handle\">mdi-arrow-up-down</v-icon>\n                                                <v-icon v-else v-text=\"convertPanelnameToIcon(element.name)\"></v-icon>\n                                            </v-col>\n                                            <v-col class=\"pr-0\">\n                                                {{ getPanelName(element.name) }}\n                                            </v-col>\n                                            <v-col class=\"col-auto pl-0\">\n                                                <v-icon v-if=\"!element.visible\" color=\"grey lighten-1\" @click.stop=\"changeState2(element.name,true)\">mdi-checkbox-blank-outline</v-icon>\n                                                <v-icon v-else color=\"primary\" @click.stop=\"changeState2(element.name,false)\">mdi-checkbox-marked</v-icon>\n                                            </v-col>\n                                        </v-row>\n                                    </v-list-item>\n                                </template>\n                            </draggable>\n                        </v-list>\n                    </v-card>\n                </v-col>\n            </v-row>\n            <v-row>\n                <v-col class=\"text-center\">\n                    <v-btn color=\"error\" @click=\"resetLayout\">{{ $t('Settings.DashboardTab.ResetLayout') }}</v-btn>\n                </v-col>\n            </v-row>\n        </v-card-text>\n    </v-card>\n</template>\n\n<script lang=\"ts\">\nimport Component from 'vue-class-component'\nimport { Mixins } from 'vue-property-decorator'\nimport draggable from 'vuedraggable'\nimport {capitalize, convertPanelnameToIcon} from '@/plugins/helpers'\nimport DashboardMixin from '@/components/mixins/dashboard'\n@Component( {\n    components: {\n        draggable\n    }\n}\n)\nexport default class SettingsDashboardTabDesktop extends Mixins(DashboardMixin) {\n    capitalize = capitalize\n    convertPanelnameToIcon = convertPanelnameToIcon\n\n    get desktopLayout1() {\n        let panels = this.$store.getters['gui/getPanels']('desktopLayout1')\n        panels = panels.concat(this.missingPanelsDesktop)\n\n        return panels\n    }\n\n    set desktopLayout1(newVal) {\n        newVal = newVal.filter((element: any) => element !== undefined)\n\n        this.$store.dispatch('gui/saveSetting', {name: 'dashboard.desktopLayout1', value: newVal })\n    }\n\n    get desktopLayout2() {\n        return this.$store.getters['gui/getPanels']('desktopLayout2')\n    }\n\n    set desktopLayout2(newVal) {\n        newVal = newVal.filter((element: any) => element !== undefined)\n\n        this.$store.dispatch('gui/saveSetting', {name: 'dashboard.desktopLayout2', value: newVal })\n    }\n\n    changeState1(name: string, newVal: boolean) {\n        const index = this.desktopLayout1.findIndex((element: any) => element.name === name)\n        if (index !== -1) {\n            this.desktopLayout1[index].visible = newVal\n            this.$store.dispatch('gui/saveSetting', {name: 'dashboard.desktopLayout1', value: this.desktopLayout1 })\n        }\n    }\n\n    changeState2(name: string, newVal: boolean) {\n        const index = this.desktopLayout2.findIndex((element: any) => element.name === name)\n        if (index !== -1) {\n            this.desktopLayout2[index].visible = newVal\n            this.$store.dispatch('gui/saveSetting', {name: 'dashboard.desktopLayout2', value: this.desktopLayout2 })\n        }\n    }\n\n    resetLayout() {\n        this.$store.dispatch('gui/resetLayout', 'desktopLayout1')\n        this.$store.dispatch('gui/resetLayout', 'desktopLayout2')\n    }\n}\n</script>"]}]}