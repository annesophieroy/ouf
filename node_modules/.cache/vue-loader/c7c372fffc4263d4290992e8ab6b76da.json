{"remainingRequest":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/components/panels/Timelapse/TimelapseFilesPanel.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/components/panels/Timelapse/TimelapseFilesPanel.vue","mtime":1644874918000},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js","mtime":1645990064605},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/thread-loader/dist/cjs.js","mtime":1645990064416},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/babel-loader/lib/index.js","mtime":1645990067759},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/ts-loader/index.js","mtime":1645990068168},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js","mtime":1645990064605},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1645990069130}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCmltcG9ydCB7Q29tcG9uZW50LCBNaXhpbnN9IGZyb20gJ3Z1ZS1wcm9wZXJ0eS1kZWNvcmF0b3InCmltcG9ydCBCYXNlTWl4aW4gZnJvbSAnQC9jb21wb25lbnRzL21peGlucy9iYXNlJwppbXBvcnQge2Zvcm1hdEZpbGVzaXplLCBmb3JtYXREYXRlLCBzb3J0RmlsZXN9IGZyb20gJ0AvcGx1Z2lucy9oZWxwZXJzJwppbXBvcnQge0ZpbGVTdGF0ZUZpbGV9IGZyb20gJ0Avc3RvcmUvZmlsZXMvdHlwZXMnCmltcG9ydCBQYW5lbCBmcm9tICdAL2NvbXBvbmVudHMvdWkvUGFuZWwudnVlJwoKaW50ZXJmYWNlIGRpYWxvZ1JlbmFtZU9iamVjdCB7CiAgICBzaG93OiBib29sZWFuCiAgICBuZXdOYW1lOiBzdHJpbmcKICAgIGl0ZW06IEZpbGVTdGF0ZUZpbGUKfQoKQENvbXBvbmVudCh7CiAgICBjb21wb25lbnRzOiB7UGFuZWx9Cn0pCmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRpbWVsYXBzZUZpbGVzUGFuZWwgZXh0ZW5kcyBNaXhpbnMoQmFzZU1peGluKSB7CiAgICBmb3JtYXREYXRlID0gZm9ybWF0RGF0ZQogICAgZm9ybWF0RmlsZXNpemUgPSBmb3JtYXRGaWxlc2l6ZQogICAgc29ydEZpbGVzID0gc29ydEZpbGVzCgogICAgJHJlZnMhOiB7CiAgICAgICAgaW5wdXRGaWVsZFJlbmFtZUZpbGU6IGFueSwKICAgICAgICBpbnB1dEZpZWxkQ3JlYXRlRGlyZWN0b3J5OiBhbnksCiAgICAgICAgaW5wdXRGaWVsZFJlbmFtZURpcmVjdG9yeTogYW55LAogICAgfQoKICAgIHByaXZhdGUgc2VhcmNoID0gJycKICAgIHByaXZhdGUgYm9vbFZpZGVvRGlhbG9nID0gZmFsc2UKICAgIHByaXZhdGUgdmlkZW9EaWFsb2dGaWxlbmFtZSA9ICcnCgogICAgcHJpdmF0ZSBkaWFsb2dDcmVhdGVEaXJlY3RvcnkgPSB7CiAgICAgICAgc2hvdzogZmFsc2UsCiAgICAgICAgbmFtZTogJycKICAgIH0KCiAgICBwcml2YXRlIGNvbnRleHRNZW51ID0gewogICAgICAgIHNob3duOiBmYWxzZSwKICAgICAgICBpc0RpcmVjdG9yeTogZmFsc2UsCiAgICAgICAgdG91Y2hUaW1lcjogdW5kZWZpbmVkLAogICAgICAgIHg6IDAsCiAgICAgICAgeTogMCwKICAgICAgICBpdGVtOiB7CiAgICAgICAgICAgIGlzRGlyZWN0b3J5OiBmYWxzZSwKICAgICAgICAgICAgZmlsZW5hbWU6ICcnLAogICAgICAgICAgICBwZXJtaXNzaW9uczogJycsCiAgICAgICAgICAgIG1vZGlmaWVkOiBuZXcgRGF0ZSgpCiAgICAgICAgfQogICAgfQoKICAgIHByaXZhdGUgZGlhbG9nUmVuYW1lRmlsZTogZGlhbG9nUmVuYW1lT2JqZWN0ID0gewogICAgICAgIHNob3c6IGZhbHNlLAogICAgICAgIG5ld05hbWU6ICcnLAogICAgICAgIGl0ZW06IHsKICAgICAgICAgICAgaXNEaXJlY3Rvcnk6IGZhbHNlLAogICAgICAgICAgICBmaWxlbmFtZTogJycsCiAgICAgICAgICAgIHBlcm1pc3Npb25zOiAnJywKICAgICAgICAgICAgbW9kaWZpZWQ6IG5ldyBEYXRlKCkKICAgICAgICB9CiAgICB9CgogICAgcHJpdmF0ZSBkaWFsb2dSZW5hbWVEaXJlY3Rvcnk6IGRpYWxvZ1JlbmFtZU9iamVjdCA9IHsKICAgICAgICBzaG93OiBmYWxzZSwKICAgICAgICBuZXdOYW1lOiAnJywKICAgICAgICBpdGVtOiB7CiAgICAgICAgICAgIGlzRGlyZWN0b3J5OiBmYWxzZSwKICAgICAgICAgICAgZmlsZW5hbWU6ICcnLAogICAgICAgICAgICBwZXJtaXNzaW9uczogJycsCiAgICAgICAgICAgIG1vZGlmaWVkOiBuZXcgRGF0ZSgpCiAgICAgICAgfQogICAgfQoKICAgIHByaXZhdGUgZGlhbG9nRGVsZXRlRGlyZWN0b3J5OiBkaWFsb2dSZW5hbWVPYmplY3QgPSB7CiAgICAgICAgc2hvdzogZmFsc2UsCiAgICAgICAgbmV3TmFtZTogJycsCiAgICAgICAgaXRlbTogewogICAgICAgICAgICBpc0RpcmVjdG9yeTogZmFsc2UsCiAgICAgICAgICAgIGZpbGVuYW1lOiAnJywKICAgICAgICAgICAgcGVybWlzc2lvbnM6ICcnLAogICAgICAgICAgICBtb2RpZmllZDogbmV3IERhdGUoKQogICAgICAgIH0KICAgIH0KCiAgICBwcml2YXRlIGlucHV0X3J1bGVzID0gWwogICAgICAgICh2YWx1ZTogc3RyaW5nKSA9PiB2YWx1ZS5pbmRleE9mKCcgJykgPT09IC0xIHx8ICdOYW1lIGNvbnRhaW5zIHNwYWNlcyEnCiAgICBdCgogICAgZ2V0IGhlYWRlcnMoKSB7CiAgICAgICAgcmV0dXJuIFsKICAgICAgICAgICAgeyB0ZXh0OiAnJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICcnLCAgICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ246ICdsZWZ0JywgIGNvbmZpZ2FibGU6IGZhbHNlLCAgdmlzaWJsZTogdHJ1ZSwgZmlsdGVyYWJsZTogZmFsc2UgfSwKICAgICAgICAgICAgeyB0ZXh0OiB0aGlzLiR0KCdUaW1lbGFwc2UuTmFtZScpLCAgICAgICAgICAgICAgdmFsdWU6ICdmaWxlbmFtZScsICAgICAgICAgICAgICAgICAgYWxpZ246ICdsZWZ0JywgIGNvbmZpZ2FibGU6IGZhbHNlLCAgdmlzaWJsZTogdHJ1ZSB9LAogICAgICAgICAgICB7IHRleHQ6IHRoaXMuJHQoJ1RpbWVsYXBzZS5GaWxlc2l6ZScpLCAgICAgICAgICB2YWx1ZTogJ3NpemUnLCAgICAgICAgICAgICAgICAgICAgICBhbGlnbjogJ3JpZ2h0JywgY29uZmlnYWJsZTogdHJ1ZSwgICB2aXNpYmxlOiB0cnVlIH0sCiAgICAgICAgICAgIHsgdGV4dDogdGhpcy4kdCgnVGltZWxhcHNlLkxhc3RNb2RpZmllZCcpLCAgICAgIHZhbHVlOiAnbW9kaWZpZWQnLCAgICAgICAgICAgICAgICAgIGFsaWduOiAncmlnaHQnLCBjb25maWdhYmxlOiB0cnVlLCAgIHZpc2libGU6IHRydWUgfSwKICAgICAgICBdCiAgICB9CgogICAgZ2V0IGRpcmVjdG9yeSgpIHsKICAgICAgICByZXR1cm4gdGhpcy4kc3RvcmUuZ2V0dGVyc1snZmlsZXMvZ2V0RGlyZWN0b3J5J10odGhpcy5jdXJyZW50UGF0aCkKICAgIH0KCiAgICBnZXQgZGlza191c2FnZSgpIHsKICAgICAgICByZXR1cm4gdGhpcy5kaXJlY3Rvcnk/LmRpc2tfdXNhZ2UgPz8geyB1c2VkOiAwLCBmcmVlOiAwLCB0b3RhbDogMH0KICAgIH0KCiAgICBnZXQgZGlyZWN0b3J5UGVybWlzc2lvbnMoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuZGlyZWN0b3J5Py5wZXJtaXNzaW9ucyA/PyAncicKICAgIH0KCiAgICBnZXQgZmlsZXMoKSB7CiAgICAgICAgcmV0dXJuIFsuLi50aGlzLmRpcmVjdG9yeT8uY2hpbGRyZW5zID8/IFtdXQogICAgfQoKICAgIGdldCBzb3J0QnkoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLmd1aS52aWV3Lmdjb2RlZmlsZXMuc29ydEJ5ID8/ICdtb2RpZmllZCcKICAgIH0KCiAgICBzZXQgc29ydEJ5KG5ld1ZhbCkgewogICAgICAgIGlmIChuZXdWYWwgPT09IHVuZGVmaW5lZCkgbmV3VmFsID0gJ21vZGlmaWVkJwoKICAgICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgnZ3VpL3NhdmVTZXR0aW5nJywgeyBuYW1lOiAndmlldy50aW1lbGFwc2Uuc29ydEJ5JywgdmFsdWU6IG5ld1ZhbCB9KQogICAgfQoKICAgIGdldCBzb3J0RGVzYygpIHsKICAgICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUuZ3VpLnZpZXcuZ2NvZGVmaWxlcy5zb3J0RGVzYyA/PyB0cnVlCiAgICB9CgogICAgc2V0IHNvcnREZXNjKG5ld1ZhbCkgewogICAgICAgIGlmIChuZXdWYWwgPT09IHVuZGVmaW5lZCkgbmV3VmFsID0gZmFsc2UKCiAgICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2d1aS9zYXZlU2V0dGluZycsIHsgbmFtZTogJ3ZpZXcudGltZWxhcHNlLnNvcnREZXNjJywgdmFsdWU6IG5ld1ZhbCB9KQogICAgfQoKICAgIGdldCBjb3VudFBlclBhZ2UoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLmd1aS52aWV3Lmdjb2RlZmlsZXM/LmNvdW50UGVyUGFnZSA/PyAxMAogICAgfQoKICAgIHNldCBjb3VudFBlclBhZ2UobmV3VmFsKSB7CiAgICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2d1aS9zYXZlU2V0dGluZycsIHsgbmFtZTogJ3ZpZXcudGltZWxhcHNlLmNvdW50UGVyUGFnZScsIHZhbHVlOiBuZXdWYWwgfSkKICAgIH0KCiAgICBnZXQgZGlzcGxheUZpbGVzKCkgewogICAgICAgIHJldHVybiB0aGlzLmZpbGVzPy5maWx0ZXIoKGZpbGUpID0+IHsKICAgICAgICAgICAgaWYgKGZpbGUuaXNEaXJlY3RvcnkpIHJldHVybiB0cnVlCgogICAgICAgICAgICByZXR1cm4gKGZpbGUuZmlsZW5hbWUuZW5kc1dpdGgoJ21wNCcpIHx8IGZpbGUuZmlsZW5hbWUuZW5kc1dpdGgoJ3ppcCcpKQogICAgICAgIH0pID8/IFtdCiAgICB9CgogICAgZ2V0IGN1cnJlbnRQYXRoKCkgewogICAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS5ndWkudmlldy50aW1lbGFwc2UuY3VycmVudFBhdGgKICAgIH0KCiAgICBzZXQgY3VycmVudFBhdGgobmV3VmFsKSB7CiAgICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2d1aS9zYXZlU2V0dGluZ1dpdGhvdXRVcGxvYWQnLCB7IG5hbWU6ICd2aWV3LnRpbWVsYXBzZS5jdXJyZW50UGF0aCcsIHZhbHVlOiBuZXdWYWwgfSkKICAgIH0KCiAgICBjcmVhdGVEaXJlY3RvcnkoKSB7CiAgICAgICAgdGhpcy5kaWFsb2dDcmVhdGVEaXJlY3RvcnkubmFtZSA9ICcnCiAgICAgICAgdGhpcy5kaWFsb2dDcmVhdGVEaXJlY3Rvcnkuc2hvdyA9IHRydWUKCiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7CiAgICAgICAgICAgIHRoaXMuJHJlZnMuaW5wdXRGaWVsZENyZWF0ZURpcmVjdG9yeT8uZm9jdXMoKQogICAgICAgIH0sIDIwMCkKICAgIH0KCiAgICBjcmVhdGVEaXJlY3RvcnlBY3Rpb24oKSB7CiAgICAgICAgaWYgKHRoaXMuZGlhbG9nQ3JlYXRlRGlyZWN0b3J5Lm5hbWUubGVuZ3RoICYmIHRoaXMuZGlhbG9nQ3JlYXRlRGlyZWN0b3J5Lm5hbWUuaW5kZXhPZignICcpID09PSAtMSkgewogICAgICAgICAgICB0aGlzLmRpYWxvZ0NyZWF0ZURpcmVjdG9yeS5zaG93ID0gZmFsc2UKICAgICAgICAgICAgdGhpcy4kc29ja2V0LmVtaXQoJ3NlcnZlci5maWxlcy5wb3N0X2RpcmVjdG9yeScsIHsgcGF0aDogdGhpcy5jdXJyZW50UGF0aCsnLycrdGhpcy5kaWFsb2dDcmVhdGVEaXJlY3RvcnkubmFtZSB9LCB7IGFjdGlvbjogJ2ZpbGVzL2dldENyZWF0ZURpcicgfSkKICAgICAgICB9CiAgICB9CgogICAgcmVmcmVzaEZpbGVMaXN0KCkgewogICAgICAgIHRoaXMuJHNvY2tldC5lbWl0KCdzZXJ2ZXIuZmlsZXMuZ2V0X2RpcmVjdG9yeScsIHsgcGF0aDogdGhpcy5jdXJyZW50UGF0aCB9LCB7IGFjdGlvbjogJ2ZpbGVzL2dldERpcmVjdG9yeScgfSkKICAgIH0KCiAgICBhZHZhbmNlZFNlYXJjaCh2YWx1ZTogc3RyaW5nIHwgbnVtYmVyLCBzZWFyY2g6IHN0cmluZykgewogICAgICAgIHJldHVybiB2YWx1ZSAhPSBudWxsICYmCiAgICAgICAgICAgIHNlYXJjaCAhPSBudWxsICYmCiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYKICAgICAgICAgICAgdmFsdWUudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpLmluZGV4T2Yoc2VhcmNoLnRvTG93ZXJDYXNlKCkpICE9PSAtMQogICAgfQoKICAgIGdldFRodW1ibmFpbChpdGVtOiBGaWxlU3RhdGVGaWxlKSB7CiAgICAgICAgY29uc3QgZmlsZW5hbWUgPSBpdGVtLmZpbGVuYW1lLnNsaWNlKDAsIGl0ZW0uZmlsZW5hbWUubGFzdEluZGV4T2YoJy4nKSkKICAgICAgICBjb25zdCBwcmV2aWV3ID0gdGhpcy5maWxlcz8uZmluZCgoZmlsZSkgPT4gZmlsZS5maWxlbmFtZSA9PT0gZmlsZW5hbWUrJy5qcGcnKQogICAgICAgIGlmIChwcmV2aWV3KSB7CiAgICAgICAgICAgIHJldHVybiBgJHt0aGlzLmFwaVVybH0vc2VydmVyL2ZpbGVzLyR7ZW5jb2RlVVJJKHRoaXMuY3VycmVudFBhdGgpfS8ke2VuY29kZVVSSShwcmV2aWV3LmZpbGVuYW1lKX0/dGltZXN0YW1wPSR7cHJldmlldy5tb2RpZmllZC5nZXRUaW1lKCl9YAogICAgICAgIH0KCiAgICAgICAgcmV0dXJuICcnCiAgICB9CgogICAgY2xpY2tSb3coaXRlbTogRmlsZVN0YXRlRmlsZSwgZm9yY2UgPSBmYWxzZSkgewogICAgICAgIGlmICghdGhpcy5jb250ZXh0TWVudS5zaG93biB8fCBmb3JjZSkgewogICAgICAgICAgICBpZiAoZm9yY2UpIHRoaXMuY29udGV4dE1lbnUuc2hvd24gPSBmYWxzZQoKICAgICAgICAgICAgaWYgKGl0ZW0uaXNEaXJlY3RvcnkpIHRoaXMuY3VycmVudFBhdGggKz0gJy8nICsgaXRlbS5maWxlbmFtZQogICAgICAgICAgICBlbHNlIGlmIChpdGVtLmZpbGVuYW1lLmVuZHNXaXRoKCd6aXAnKSkgewogICAgICAgICAgICAgICAgdGhpcy5kb3dubG9hZEZpbGUoaXRlbS5maWxlbmFtZSkKICAgICAgICAgICAgfSBlbHNlIGlmIChpdGVtLmZpbGVuYW1lLmVuZHNXaXRoKCdtcDQnKSkgewogICAgICAgICAgICAgICAgdGhpcy52aWRlb0RpYWxvZ0ZpbGVuYW1lID0gIGVuY29kZVVSSShgJHt0aGlzLmN1cnJlbnRQYXRofS8ke2l0ZW0uZmlsZW5hbWV9YCkKICAgICAgICAgICAgICAgIHRoaXMuYm9vbFZpZGVvRGlhbG9nID0gdHJ1ZQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIGNsaWNrUm93R29CYWNrKCkgewogICAgICAgIHRoaXMuY3VycmVudFBhdGggPSB0aGlzLmN1cnJlbnRQYXRoLnN1YnN0cigwLCB0aGlzLmN1cnJlbnRQYXRoLmxhc3RJbmRleE9mKCcvJykpCiAgICB9CgogICAgc2hvd0NvbnRleHRNZW51IChlOiBhbnksIGl0ZW06IEZpbGVTdGF0ZUZpbGUpIHsKICAgICAgICBpZiAoIXRoaXMuY29udGV4dE1lbnUuc2hvd24pIHsKICAgICAgICAgICAgZT8ucHJldmVudERlZmF1bHQoKQogICAgICAgICAgICB0aGlzLmNvbnRleHRNZW51LnNob3duID0gdHJ1ZQogICAgICAgICAgICB0aGlzLmNvbnRleHRNZW51LnggPSBlPy5jbGllbnRYIHx8IGU/LnBhZ2VYIHx8IHdpbmRvdy5zY3JlZW5YIC8gMgogICAgICAgICAgICB0aGlzLmNvbnRleHRNZW51LnkgPSBlPy5jbGllbnRZIHx8IGU/LnBhZ2VZIHx8IHdpbmRvdy5zY3JlZW5ZIC8gMgogICAgICAgICAgICB0aGlzLmNvbnRleHRNZW51Lml0ZW0gPSBpdGVtCiAgICAgICAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHsKICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dE1lbnUuc2hvd24gPSB0cnVlCiAgICAgICAgICAgIH0pCiAgICAgICAgfQogICAgfQoKICAgIGV4aXN0c0ZyYW1lc1ppcChpdGVtOiBGaWxlU3RhdGVGaWxlKSB7CiAgICAgICAgY29uc3QgcG9zTGFzdFBvaW50ID0gaXRlbS5maWxlbmFtZS5sYXN0SW5kZXhPZignLicpCiAgICAgICAgY29uc3QgemlwRmlsZW5hbWUgPSBpdGVtLmZpbGVuYW1lLnN1YnN0cigwLCBwb3NMYXN0UG9pbnQpKycuemlwJwoKICAgICAgICByZXR1cm4gKHRoaXMuZmlsZXMuZmluZEluZGV4KChmaWxlKSA9PiBmaWxlLmZpbGVuYW1lID09PSB6aXBGaWxlbmFtZSkgIT09IC0xKQogICAgfQoKICAgIGRvd25sb2FkRmlsZShmaWxlbmFtZTogc3RyaW5nKSB7CiAgICAgICAgY29uc3QgcGF0aCA9ICh0aGlzLmN1cnJlbnRQYXRoKycvJytmaWxlbmFtZSkKICAgICAgICBjb25zdCBocmVmID0gdGhpcy5hcGlVcmwgKyAnL3NlcnZlci9maWxlcy8nICsgZW5jb2RlVVJJKHBhdGgpCgogICAgICAgIHdpbmRvdy5vcGVuKGhyZWYpCiAgICB9CgogICAgcmVuYW1lRmlsZShpdGVtOiBGaWxlU3RhdGVGaWxlKSB7CiAgICAgICAgY29uc3QgcG9zTGFzdFBvaW50ID0gaXRlbS5maWxlbmFtZS5sYXN0SW5kZXhPZignLicpCiAgICAgICAgdGhpcy5kaWFsb2dSZW5hbWVGaWxlLm5ld05hbWUgPSBpdGVtLmZpbGVuYW1lLnN1YnN0cigwLCBwb3NMYXN0UG9pbnQpCgogICAgICAgIHRoaXMuZGlhbG9nUmVuYW1lRmlsZS5pdGVtID0gaXRlbQogICAgICAgIHRoaXMuZGlhbG9nUmVuYW1lRmlsZS5zaG93ID0gdHJ1ZQoKICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsKICAgICAgICAgICAgdGhpcy4kcmVmcy5pbnB1dEZpZWxkUmVuYW1lRmlsZT8uZm9jdXMoKQogICAgICAgIH0sIDIwMCkKICAgIH0KCiAgICByZW5hbWVGaWxlQWN0aW9uKCkgewogICAgICAgIGNvbnN0IHBvc0xhc3RQb2ludCA9IHRoaXMuZGlhbG9nUmVuYW1lRmlsZS5pdGVtLmZpbGVuYW1lLmxhc3RJbmRleE9mKCcuJykKICAgICAgICBjb25zdCBvbGROYW1lV2l0aG91dEV4dGVuc2lvbiA9IHRoaXMuZGlhbG9nUmVuYW1lRmlsZS5pdGVtLmZpbGVuYW1lLnN1YnN0cigwLCBwb3NMYXN0UG9pbnQpCgogICAgICAgIHRoaXMuZGlhbG9nUmVuYW1lRmlsZS5zaG93ID0gZmFsc2UKICAgICAgICB0aGlzLiRzb2NrZXQuZW1pdCgnc2VydmVyLmZpbGVzLm1vdmUnLCB7CiAgICAgICAgICAgIHNvdXJjZTogdGhpcy5jdXJyZW50UGF0aCsnLycrdGhpcy5kaWFsb2dSZW5hbWVGaWxlLml0ZW0uZmlsZW5hbWUsCiAgICAgICAgICAgIGRlc3Q6IHRoaXMuY3VycmVudFBhdGgrJy8nK3RoaXMuZGlhbG9nUmVuYW1lRmlsZS5uZXdOYW1lKycubXA0JwogICAgICAgIH0sIHsgYWN0aW9uOiAnZmlsZXMvZ2V0TW92ZScgfSkKCiAgICAgICAgY29uc3QgZmlsZUpwZyA9IHRoaXMuZmlsZXMuZmluZCgoZmlsZSkgPT4gZmlsZS5maWxlbmFtZSA9PT0gb2xkTmFtZVdpdGhvdXRFeHRlbnNpb24rJy5qcGcnKQogICAgICAgIGlmIChmaWxlSnBnKSB7CiAgICAgICAgICAgIHRoaXMuJHNvY2tldC5lbWl0KCdzZXJ2ZXIuZmlsZXMubW92ZScsIHsKICAgICAgICAgICAgICAgIHNvdXJjZTogdGhpcy5jdXJyZW50UGF0aCsnLycrb2xkTmFtZVdpdGhvdXRFeHRlbnNpb24rJy5qcGcnLAogICAgICAgICAgICAgICAgZGVzdDogdGhpcy5jdXJyZW50UGF0aCsnLycrdGhpcy5kaWFsb2dSZW5hbWVGaWxlLm5ld05hbWUrJy5qcGcnCiAgICAgICAgICAgIH0pCiAgICAgICAgfQogICAgfQoKICAgIHJlbmFtZURpcmVjdG9yeShpdGVtOiBGaWxlU3RhdGVGaWxlKSB7CiAgICAgICAgdGhpcy5kaWFsb2dSZW5hbWVEaXJlY3RvcnkuaXRlbSA9IGl0ZW0KICAgICAgICB0aGlzLmRpYWxvZ1JlbmFtZURpcmVjdG9yeS5uZXdOYW1lID0gaXRlbS5maWxlbmFtZQogICAgICAgIHRoaXMuZGlhbG9nUmVuYW1lRGlyZWN0b3J5LnNob3cgPSB0cnVlCgogICAgICAgIHNldFRpbWVvdXQoKCkgPT4gewogICAgICAgICAgICB0aGlzLiRyZWZzLmlucHV0RmllbGRSZW5hbWVEaXJlY3Rvcnk/LmZvY3VzKCkKICAgICAgICB9LCAyMDApCiAgICB9CgogICAgcmVuYW1lRGlyZWN0b3J5QWN0aW9uKCkgewogICAgICAgIHRoaXMuZGlhbG9nUmVuYW1lRGlyZWN0b3J5LnNob3cgPSBmYWxzZQogICAgICAgIHRoaXMuJHNvY2tldC5lbWl0KCdzZXJ2ZXIuZmlsZXMubW92ZScsIHsKICAgICAgICAgICAgc291cmNlOiB0aGlzLmN1cnJlbnRQYXRoKycvJyt0aGlzLmRpYWxvZ1JlbmFtZURpcmVjdG9yeS5pdGVtLmZpbGVuYW1lLAogICAgICAgICAgICBkZXN0OiB0aGlzLmN1cnJlbnRQYXRoKycvJyt0aGlzLmRpYWxvZ1JlbmFtZURpcmVjdG9yeS5uZXdOYW1lCiAgICAgICAgfSwgeyBhY3Rpb246ICdmaWxlcy9nZXRNb3ZlJyB9KQogICAgfQoKICAgIHJlbW92ZUZpbGUoKSB7CiAgICAgICAgY29uc3QgZmlsZW5hbWUgPSB0aGlzLmNvbnRleHRNZW51Lml0ZW0uZmlsZW5hbWUuc2xpY2UoMCwgdGhpcy5jb250ZXh0TWVudS5pdGVtLmZpbGVuYW1lLmxhc3RJbmRleE9mKCcuJykpCiAgICAgICAgY29uc3QgcHJldmlld0ZpbGVuYW1lID0gZmlsZW5hbWUrJy5qcGcnCiAgICAgICAgY29uc3QgcHJldmlld0V4aXN0cyA9ICh0aGlzLmZpbGVzLmZpbmRJbmRleCgoZmlsZSkgPT4gZmlsZS5maWxlbmFtZSA9PT0gcHJldmlld0ZpbGVuYW1lKSAhPT0gLTEpCgogICAgICAgIGlmKHByZXZpZXdFeGlzdHMpIHRoaXMuJHNvY2tldC5lbWl0KCdzZXJ2ZXIuZmlsZXMuZGVsZXRlX2ZpbGUnLCB7IHBhdGg6IHRoaXMuY3VycmVudFBhdGgrJy8nK3ByZXZpZXdGaWxlbmFtZSB9LCB7IGFjdGlvbjogJ2ZpbGVzL2dldERlbGV0ZUZpbGUnIH0pCiAgICAgICAgdGhpcy4kc29ja2V0LmVtaXQoJ3NlcnZlci5maWxlcy5kZWxldGVfZmlsZScsIHsgcGF0aDogdGhpcy5jdXJyZW50UGF0aCsnLycrdGhpcy5jb250ZXh0TWVudS5pdGVtLmZpbGVuYW1lIH0sIHsgYWN0aW9uOiAnZmlsZXMvZ2V0RGVsZXRlRmlsZScgfSkKICAgIH0KCiAgICBkZWxldGVEaXJlY3RvcnkoaXRlbTogRmlsZVN0YXRlRmlsZSkgewogICAgICAgIHRoaXMuZGlhbG9nRGVsZXRlRGlyZWN0b3J5Lml0ZW0gPSBpdGVtCiAgICAgICAgdGhpcy5kaWFsb2dEZWxldGVEaXJlY3Rvcnkuc2hvdyA9IHRydWUKICAgIH0KCiAgICBkZWxldGVEaXJlY3RvcnlBY3Rpb24oKSB7CiAgICAgICAgdGhpcy5kaWFsb2dEZWxldGVEaXJlY3Rvcnkuc2hvdyA9IGZhbHNlCiAgICAgICAgdGhpcy4kc29ja2V0LmVtaXQoJ3NlcnZlci5maWxlcy5kZWxldGVfZGlyZWN0b3J5JywgeyBwYXRoOiB0aGlzLmN1cnJlbnRQYXRoKycvJyt0aGlzLmNvbnRleHRNZW51Lml0ZW0uZmlsZW5hbWUsIGZvcmNlOiB0cnVlIH0sIHsgYWN0aW9uOiAnZmlsZXMvZ2V0RGVsZXRlRGlyJyB9KQogICAgfQp9Cg=="},null]}