{"remainingRequest":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/components/inputs/ToolInput.vue?vue&type=style&index=0&id=34b8025c&scoped=true&lang=css&","dependencies":[{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/components/inputs/ToolInput.vue","mtime":1644874918000},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1645990066541},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1645990070825},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/postcss-loader/src/index.js","mtime":1645990067674},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js","mtime":1645990064605},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1645990069130}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci50b29sLWlucHV0IHsKICAgIG1pbi13aWR0aDogNXJlbTsKICAgIG1hcmdpbi10b3A6IDA7CiAgICBwYWRkaW5nOiAwOwp9CgoudG9vbC1pbnB1dCAudi1pbnB1dF9fc2xvdCB7IG1hcmdpbi1ib3R0b206IDA7IH0KLnRvb2wtaW5wdXQgLnYtdGV4dC1maWVsZF9fZGV0YWlscyB7IGRpc3BsYXk6IG5vbmU7IH0KCi50b29sLWlucHV0IGlucHV0IHsKICAgIC1tb3otYXBwZWFyYW5jZTogdGV4dGZpZWxkOwp9Ci50b29sLWlucHV0IGlucHV0Ojotd2Via2l0LW91dGVyLXNwaW4tYnV0dG9uLAoudG9vbC1pbnB1dCBpbnB1dDo6LXdlYmtpdC1pbm5lci1zcGluLWJ1dHRvbiB7CiAgICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7CiAgICBtYXJnaW46IDA7Cn0K"},{"version":3,"sources":["ToolInput.vue"],"names":[],"mappings":";AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ToolInput.vue","sourceRoot":"src/components/inputs","sourcesContent":["<style scoped>\n    .tool-input {\n        min-width: 5rem;\n        margin-top: 0;\n        padding: 0;\n    }\n\n    .tool-input .v-input__slot { margin-bottom: 0; }\n    .tool-input .v-text-field__details { display: none; }\n\n    .tool-input input {\n        -moz-appearance: textfield;\n    }\n    .tool-input input::-webkit-outer-spin-button,\n    .tool-input input::-webkit-inner-spin-button {\n        -webkit-appearance: none;\n        margin: 0;\n    }\n</style>\n\n<template>\n    <v-combobox\n        dense\n        hide-details\n        v-model=\"value\"\n        :items=\"items\"\n        item-text=\"value\"\n        type=\"number\"\n        @keyup.enter=\"setTemps\"\n        @keydown.tab=\"setTemps\"\n        @change=\"changeValue\"\n        @blur=\"onBlur\"\n        hide-spin-buttons\n    >\n    </v-combobox>\n</template>\n\n<script lang=\"ts\">\nimport Component from 'vue-class-component'\nimport {Mixins, Prop, Watch} from 'vue-property-decorator'\nimport BaseMixin from '@/components/mixins/base'\n\n@Component\nexport default class ToolInput extends Mixins(BaseMixin) {\n    private value: any = 0\n\n    @Prop({ type: String, required: true }) readonly name!: string\n    @Prop({ type: Number, required: true, default: 0 }) readonly target!: number\n    @Prop({ type: Number, required: true }) readonly min_temp!: number\n    @Prop({ type: Number, required: true }) readonly max_temp!: number\n    @Prop({ type: String, required: true }) readonly command!: string\n    @Prop({ type: String, required: true }) readonly attributeName!: string\n    @Prop({ type: Array, default: [] }) items!: number[]\n\n    changeValue(newVal: any) {\n        if (typeof newVal === 'object') {\n            this.setTemps()\n        }\n    }\n\n    onBlur(event: any) {\n        if ('target' in event && event.target && 'value' in event.target) {\n            this.value = event.target.value ?? this.value\n            this.setTemps()\n        }\n    }\n\n    setTemps(): void {\n        if (typeof this.value === 'object') this.value = this.value.value ?? 0\n        if (this.value === null) this.value = 0\n\n        if (this.value > this.max_temp) {\n            this.value = { value: this.target, text: this.target }\n            this.$toast.error(this.$t('Panels.ToolsPanel.TempTooHigh', { name: this.name, max: this.max_temp })+'')\n        } else if (this.value < this.min_temp && this.value != 0) {\n            this.value = { value: this.target, text: this.target }\n            this.$toast.error(this.$t('Panels.ToolsPanel.TempTooLow', { name: this.name, min: this.min_temp })+'')\n        } else if (this.target !== parseFloat(this.value)) {\n            const gcode = this.command+' '+this.attributeName+'='+this.name+' TARGET='+this.value\n            this.$store.dispatch('server/addEvent', { message: gcode, type: 'command' })\n            this.$socket.emit('printer.gcode.script', { script: gcode })\n        }\n    }\n\n    mounted() {\n        this.value = this.target\n    }\n\n    @Watch('target')\n    targetChanged(newVal: number): void {\n        this.value = newVal\n    }\n\n}\n</script>"]}]}