{"remainingRequest":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/components/settings/SettingsDashboardTabWidescreen.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/components/settings/SettingsDashboardTabWidescreen.vue","mtime":1644874918000},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js","mtime":1645990064605},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/babel-loader/lib/index.js","mtime":1645990067759},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/ts-loader/index.js","mtime":1645990068168},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js","mtime":1645990064605},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1645990069130}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgppbXBvcnQgQ29tcG9uZW50IGZyb20gJ3Z1ZS1jbGFzcy1jb21wb25lbnQnCmltcG9ydCB7IE1peGlucyB9IGZyb20gJ3Z1ZS1wcm9wZXJ0eS1kZWNvcmF0b3InCmltcG9ydCBkcmFnZ2FibGUgZnJvbSAndnVlZHJhZ2dhYmxlJwppbXBvcnQge2NhcGl0YWxpemUsIGNvbnZlcnRQYW5lbG5hbWVUb0ljb259IGZyb20gJ0AvcGx1Z2lucy9oZWxwZXJzJwppbXBvcnQgRGFzaGJvYXJkTWl4aW4gZnJvbSAnQC9jb21wb25lbnRzL21peGlucy9kYXNoYm9hcmQnCkBDb21wb25lbnQoIHsKICAgIGNvbXBvbmVudHM6IHsKICAgICAgICBkcmFnZ2FibGUKICAgIH0KfQopCmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNldHRpbmdzRGFzaGJvYXJkVGFiV2lkZXNjcmVlbiBleHRlbmRzIE1peGlucyhEYXNoYm9hcmRNaXhpbikgewogICAgY2FwaXRhbGl6ZSA9IGNhcGl0YWxpemUKICAgIGNvbnZlcnRQYW5lbG5hbWVUb0ljb24gPSBjb252ZXJ0UGFuZWxuYW1lVG9JY29uCgogICAgZ2V0IHdpZGVzY3JlZW5MYXlvdXQxKCkgewogICAgICAgIGxldCBwYW5lbHMgPSB0aGlzLiRzdG9yZS5nZXR0ZXJzWydndWkvZ2V0UGFuZWxzJ10oJ3dpZGVzY3JlZW5MYXlvdXQxJykKICAgICAgICBwYW5lbHMgPSBwYW5lbHMuY29uY2F0KHRoaXMubWlzc2luZ1BhbmVsc1dpZGVzY3JlZW4pCgogICAgICAgIHJldHVybiBwYW5lbHMKICAgIH0KCiAgICBzZXQgd2lkZXNjcmVlbkxheW91dDEobmV3VmFsKSB7CiAgICAgICAgbmV3VmFsID0gbmV3VmFsLmZpbHRlcigoZWxlbWVudDogYW55KSA9PiBlbGVtZW50ICE9PSB1bmRlZmluZWQpCgogICAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdndWkvc2F2ZVNldHRpbmcnLCB7bmFtZTogJ2Rhc2hib2FyZC53aWRlc2NyZWVuTGF5b3V0MScsIHZhbHVlOiBuZXdWYWwgfSkKICAgIH0KCiAgICBnZXQgd2lkZXNjcmVlbkxheW91dDIoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLmdldHRlcnNbJ2d1aS9nZXRQYW5lbHMnXSgnd2lkZXNjcmVlbkxheW91dDInKQogICAgfQoKICAgIHNldCB3aWRlc2NyZWVuTGF5b3V0MihuZXdWYWwpIHsKICAgICAgICBuZXdWYWwgPSBuZXdWYWwuZmlsdGVyKChlbGVtZW50OiBhbnkpID0+IGVsZW1lbnQgIT09IHVuZGVmaW5lZCkKCiAgICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2d1aS9zYXZlU2V0dGluZycsIHtuYW1lOiAnZGFzaGJvYXJkLndpZGVzY3JlZW5MYXlvdXQyJywgdmFsdWU6IG5ld1ZhbCB9KQogICAgfQoKICAgIGdldCB3aWRlc2NyZWVuTGF5b3V0MygpIHsKICAgICAgICByZXR1cm4gdGhpcy4kc3RvcmUuZ2V0dGVyc1snZ3VpL2dldFBhbmVscyddKCd3aWRlc2NyZWVuTGF5b3V0MycpCiAgICB9CgogICAgc2V0IHdpZGVzY3JlZW5MYXlvdXQzKG5ld1ZhbCkgewogICAgICAgIG5ld1ZhbCA9IG5ld1ZhbC5maWx0ZXIoKGVsZW1lbnQ6IGFueSkgPT4gZWxlbWVudCAhPT0gdW5kZWZpbmVkKQoKICAgICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgnZ3VpL3NhdmVTZXR0aW5nJywge25hbWU6ICdkYXNoYm9hcmQud2lkZXNjcmVlbkxheW91dDMnLCB2YWx1ZTogbmV3VmFsIH0pCiAgICB9CgogICAgY2hhbmdlU3RhdGUxKG5hbWU6IHN0cmluZywgbmV3VmFsOiBib29sZWFuKSB7CiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLndpZGVzY3JlZW5MYXlvdXQxLmZpbmRJbmRleCgoZWxlbWVudDogYW55KSA9PiBlbGVtZW50Lm5hbWUgPT09IG5hbWUpCiAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkgewogICAgICAgICAgICB0aGlzLndpZGVzY3JlZW5MYXlvdXQxW2luZGV4XS52aXNpYmxlID0gbmV3VmFsCiAgICAgICAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdndWkvc2F2ZVNldHRpbmcnLCB7bmFtZTogJ2Rhc2hib2FyZC53aWRlc2NyZWVuTGF5b3V0MScsIHZhbHVlOiB0aGlzLndpZGVzY3JlZW5MYXlvdXQxIH0pCiAgICAgICAgfQogICAgfQoKICAgIGNoYW5nZVN0YXRlMihuYW1lOiBzdHJpbmcsIG5ld1ZhbDogYm9vbGVhbikgewogICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy53aWRlc2NyZWVuTGF5b3V0Mi5maW5kSW5kZXgoKGVsZW1lbnQ6IGFueSkgPT4gZWxlbWVudC5uYW1lID09PSBuYW1lKQogICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHsKICAgICAgICAgICAgdGhpcy53aWRlc2NyZWVuTGF5b3V0MltpbmRleF0udmlzaWJsZSA9IG5ld1ZhbAogICAgICAgICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgnZ3VpL3NhdmVTZXR0aW5nJywge25hbWU6ICdkYXNoYm9hcmQud2lkZXNjcmVlbkxheW91dDInLCB2YWx1ZTogdGhpcy53aWRlc2NyZWVuTGF5b3V0MiB9KQogICAgICAgIH0KICAgIH0KCiAgICBjaGFuZ2VTdGF0ZTMobmFtZTogc3RyaW5nLCBuZXdWYWw6IGJvb2xlYW4pIHsKICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMud2lkZXNjcmVlbkxheW91dDMuZmluZEluZGV4KChlbGVtZW50OiBhbnkpID0+IGVsZW1lbnQubmFtZSA9PT0gbmFtZSkKICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7CiAgICAgICAgICAgIHRoaXMud2lkZXNjcmVlbkxheW91dDNbaW5kZXhdLnZpc2libGUgPSBuZXdWYWwKICAgICAgICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2d1aS9zYXZlU2V0dGluZycsIHtuYW1lOiAnZGFzaGJvYXJkLndpZGVzY3JlZW5MYXlvdXQzJywgdmFsdWU6IHRoaXMud2lkZXNjcmVlbkxheW91dDMgfSkKICAgICAgICB9CiAgICB9CgogICAgcmVzZXRMYXlvdXQoKSB7CiAgICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2d1aS9yZXNldExheW91dCcsICd3aWRlc2NyZWVuTGF5b3V0MScpCiAgICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2d1aS9yZXNldExheW91dCcsICd3aWRlc2NyZWVuTGF5b3V0MicpCiAgICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2d1aS9yZXNldExheW91dCcsICd3aWRlc2NyZWVuTGF5b3V0MycpCiAgICB9Cn0K"},{"version":3,"sources":["SettingsDashboardTabWidescreen.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"SettingsDashboardTabWidescreen.vue","sourceRoot":"src/components/settings","sourcesContent":["<style scoped>\n    .ghost {\n        opacity: 0.5;\n        background: #c8ebfb;\n    }\n</style>\n\n<template>\n    <v-card flat>\n        <v-card-text>\n            <v-row>\n                <v-col class=\"col-12 col-md-4\">\n                    <v-card class=\"mx-auto\" max-width=\"300\" tile >\n                        <v-list dense>\n                            <v-list-item>\n                                <v-row>\n                                    <v-col class=\"col-auto pr-0\">\n                                        <v-icon>mdi-information</v-icon>\n                                    </v-col>\n                                    <v-col>\n                                        {{ $t('Panels.StatusPanel.Headline') }}\n                                    </v-col>\n                                    <v-col class=\"col-auto\">\n                                        <v-icon color=\"grey lighten-1\">mdi-lock</v-icon>\n                                    </v-col>\n                                </v-row>\n                            </v-list-item>\n                            <draggable v-model=\"widescreenLayout1\" :handle=\"isMobile ? '.handle' : ''\" class=\"v-list-item-group\" ghost-class=\"ghost\" group=\"widescreenViewport\">\n                                <template v-for=\"(element) in widescreenLayout1\">\n                                    <v-list-item :key=\"'item-widescreen-'+element.name\" link>\n                                        <v-row>\n                                            <v-col class=\"col-auto pr-0\">\n                                                <v-icon v-if=\"isMobile\" class=\"handle\">mdi-arrow-up-down</v-icon>\n                                                <v-icon v-else v-text=\"convertPanelnameToIcon(element.name)\"></v-icon>\n                                            </v-col>\n                                            <v-col class=\"pr-0\">\n                                                {{ getPanelName(element.name) }}\n                                            </v-col>\n                                            <v-col class=\"col-auto pl-0\">\n                                                <v-icon v-if=\"!element.visible\" color=\"grey lighten-1\" @click.stop=\"changeState1(element.name,true)\">mdi-checkbox-blank-outline</v-icon>\n                                                <v-icon v-else color=\"primary\" @click.stop=\"changeState1(element.name,false)\">mdi-checkbox-marked</v-icon>\n                                            </v-col>\n                                        </v-row>\n                                    </v-list-item>\n                                </template>\n                            </draggable>\n                        </v-list>\n                    </v-card>\n                </v-col>\n                <v-col class=\"col-12 col-md-4\">\n                    <v-card class=\"mx-auto\" max-width=\"300\" tile >\n                        <v-list dense>\n                            <draggable v-model=\"widescreenLayout2\" :handle=\"isMobile ? '.handle' : ''\" class=\"v-list-item-group\" ghost-class=\"ghost\" group=\"widescreenViewport\">\n                                <template v-for=\"(element) in widescreenLayout2\">\n                                    <v-list-item :key=\"'item-widescreen-'+element.name\" link>\n                                        <v-row>\n                                            <v-col class=\"col-auto pr-0\">\n                                                <v-icon v-if=\"isMobile\" class=\"handle\">mdi-arrow-up-down</v-icon>\n                                                <v-icon v-else v-text=\"convertPanelnameToIcon(element.name)\"></v-icon>\n                                            </v-col>\n                                            <v-col class=\"pr-0\">\n                                                {{ getPanelName(element.name) }}\n                                            </v-col>\n                                            <v-col class=\"col-auto pl-0\">\n                                                <v-icon v-if=\"!element.visible\" color=\"grey lighten-1\" @click.stop=\"changeState2(element.name,true)\">mdi-checkbox-blank-outline</v-icon>\n                                                <v-icon v-else color=\"primary\" @click.stop=\"changeState2(element.name,false)\">mdi-checkbox-marked</v-icon>\n                                            </v-col>\n                                        </v-row>\n                                    </v-list-item>\n                                </template>\n                            </draggable>\n                        </v-list>\n                    </v-card>\n                </v-col>\n                <v-col class=\"col-12 col-md-4\">\n                    <v-card class=\"mx-auto\" max-width=\"300\" tile >\n                        <v-list dense>\n                            <draggable v-model=\"widescreenLayout3\" :handle=\"isMobile ? '.handle' : ''\" class=\"v-list-item-group\" ghost-class=\"ghost\" group=\"widescreenViewport\">\n                                <template v-for=\"(element) in widescreenLayout3\">\n                                    <v-list-item :key=\"'item-widescreen-'+element.name\" link>\n                                        <v-row>\n                                            <v-col class=\"col-auto pr-0\">\n                                                <v-icon v-if=\"isMobile\" class=\"handle\">mdi-arrow-up-down</v-icon>\n                                                <v-icon v-else v-text=\"convertPanelnameToIcon(element.name)\"></v-icon>\n                                            </v-col>\n                                            <v-col class=\"pr-0\">\n                                                {{ getPanelName(element.name) }}\n                                            </v-col>\n                                            <v-col class=\"col-auto pl-0\">\n                                                <v-icon v-if=\"!element.visible\" color=\"grey lighten-1\" @click.stop=\"changeState3(element.name,true)\">mdi-checkbox-blank-outline</v-icon>\n                                                <v-icon v-else color=\"primary\" @click.stop=\"changeState3(element.name,false)\">mdi-checkbox-marked</v-icon>\n                                            </v-col>\n                                        </v-row>\n                                    </v-list-item>\n                                </template>\n                            </draggable>\n                        </v-list>\n                    </v-card>\n                </v-col>\n            </v-row>\n            <v-row>\n                <v-col class=\"text-center\">\n                    <v-btn color=\"error\" @click=\"resetLayout\">{{ $t('Settings.DashboardTab.ResetLayout') }}</v-btn>\n                </v-col>\n            </v-row>\n        </v-card-text>\n    </v-card>\n</template>\n\n<script lang=\"ts\">\nimport Component from 'vue-class-component'\nimport { Mixins } from 'vue-property-decorator'\nimport draggable from 'vuedraggable'\nimport {capitalize, convertPanelnameToIcon} from '@/plugins/helpers'\nimport DashboardMixin from '@/components/mixins/dashboard'\n@Component( {\n    components: {\n        draggable\n    }\n}\n)\nexport default class SettingsDashboardTabWidescreen extends Mixins(DashboardMixin) {\n    capitalize = capitalize\n    convertPanelnameToIcon = convertPanelnameToIcon\n\n    get widescreenLayout1() {\n        let panels = this.$store.getters['gui/getPanels']('widescreenLayout1')\n        panels = panels.concat(this.missingPanelsWidescreen)\n\n        return panels\n    }\n\n    set widescreenLayout1(newVal) {\n        newVal = newVal.filter((element: any) => element !== undefined)\n\n        this.$store.dispatch('gui/saveSetting', {name: 'dashboard.widescreenLayout1', value: newVal })\n    }\n\n    get widescreenLayout2() {\n        return this.$store.getters['gui/getPanels']('widescreenLayout2')\n    }\n\n    set widescreenLayout2(newVal) {\n        newVal = newVal.filter((element: any) => element !== undefined)\n\n        this.$store.dispatch('gui/saveSetting', {name: 'dashboard.widescreenLayout2', value: newVal })\n    }\n\n    get widescreenLayout3() {\n        return this.$store.getters['gui/getPanels']('widescreenLayout3')\n    }\n\n    set widescreenLayout3(newVal) {\n        newVal = newVal.filter((element: any) => element !== undefined)\n\n        this.$store.dispatch('gui/saveSetting', {name: 'dashboard.widescreenLayout3', value: newVal })\n    }\n\n    changeState1(name: string, newVal: boolean) {\n        const index = this.widescreenLayout1.findIndex((element: any) => element.name === name)\n        if (index !== -1) {\n            this.widescreenLayout1[index].visible = newVal\n            this.$store.dispatch('gui/saveSetting', {name: 'dashboard.widescreenLayout1', value: this.widescreenLayout1 })\n        }\n    }\n\n    changeState2(name: string, newVal: boolean) {\n        const index = this.widescreenLayout2.findIndex((element: any) => element.name === name)\n        if (index !== -1) {\n            this.widescreenLayout2[index].visible = newVal\n            this.$store.dispatch('gui/saveSetting', {name: 'dashboard.widescreenLayout2', value: this.widescreenLayout2 })\n        }\n    }\n\n    changeState3(name: string, newVal: boolean) {\n        const index = this.widescreenLayout3.findIndex((element: any) => element.name === name)\n        if (index !== -1) {\n            this.widescreenLayout3[index].visible = newVal\n            this.$store.dispatch('gui/saveSetting', {name: 'dashboard.widescreenLayout3', value: this.widescreenLayout3 })\n        }\n    }\n\n    resetLayout() {\n        this.$store.dispatch('gui/resetLayout', 'widescreenLayout1')\n        this.$store.dispatch('gui/resetLayout', 'widescreenLayout2')\n        this.$store.dispatch('gui/resetLayout', 'widescreenLayout3')\n    }\n}\n</script>"]}]}