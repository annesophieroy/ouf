{"remainingRequest":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/App.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/App.vue","mtime":1644874918000},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1645990066541},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1645990070825},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/postcss-loader/src/index.js","mtime":1645990067674},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js","mtime":1645990064605},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1645990069130}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CkBpbXBvcnQgJy4vYXNzZXRzL3N0eWxlcy9mb250cy5jc3MnOwpAaW1wb3J0ICcuL2Fzc2V0cy9zdHlsZXMvdG9hc3RyLmNzcyc7CkBpbXBvcnQgJy4vYXNzZXRzL3N0eWxlcy9wYWdlLnNjc3MnOwpAaW1wb3J0ICcuL2Fzc2V0cy9zdHlsZXMvc2lkZWJhci5zY3NzJzsKQGltcG9ydCAnLi9hc3NldHMvc3R5bGVzL3V0aWxzLnNjc3MnOwpAaW1wb3J0ICcuL2Fzc2V0cy9zdHlsZXMvdXBkYXRlTWFuYWdlci5zY3NzJzsKCjpyb290IHsKICAgIC0tYXBwLWhlaWdodDogMTAwJTsKfQoKI2NvbnRlbnQgewogICAgYmFja2dyb3VuZC1hdHRhY2htZW50OiBmaXhlZDsKICAgIGJhY2tncm91bmQtc2l6ZTogY292ZXI7CiAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0Owp9Cgoudi1idG46bm90KC52LWJ0bi0tb3V0bGluZWQpLnByaW1hcnkgewogICAgY29sb3I6IHZhcigtLXYtYnRuLXRleHQtcHJpbWFyeSkKfQoKLm1haW4tY29udGVudC1zY3JvbGxiYXIgewogICAgaGVpZ2h0OiBjYWxjKHZhcigtLWFwcC1oZWlnaHQpIC0gNDhweCk7Cn0K"},{"version":3,"sources":["App.vue"],"names":[],"mappings":";AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<style>\n    @import './assets/styles/fonts.css';\n    @import './assets/styles/toastr.css';\n    @import './assets/styles/page.scss';\n    @import './assets/styles/sidebar.scss';\n    @import './assets/styles/utils.scss';\n    @import './assets/styles/updateManager.scss';\n\n    :root {\n        --app-height: 100%;\n    }\n\n    #content {\n        background-attachment: fixed;\n        background-size: cover;\n        background-repeat: no-repeat;\n    }\n\n    .v-btn:not(.v-btn--outlined).primary {\n        color: var(--v-btn-text-primary)\n    }\n\n    .main-content-scrollbar {\n        height: calc(var(--app-height) - 48px);\n    }\n</style>\n\n<template>\n    <v-app dark :style=\"cssVars\">\n        <vue-headful :title=\"title\" />\n        <the-sidebar></the-sidebar>\n        <the-topbar></the-topbar>\n\n        <v-main id=\"content\" :style=\"mainStyle\">\n            <overlay-scrollbars class=\"main-content-scrollbar\">\n                <v-container fluid id=\"page-container\" class=\"container px-3 px-sm-6 py-sm-6 mx-auto\">\n                    <router-view></router-view>\n                </v-container>\n            </overlay-scrollbars>\n        </v-main>\n        <the-select-printer-dialog v-if=\"remoteMode\"></the-select-printer-dialog>\n        <the-connecting-dialog v-else></the-connecting-dialog>\n        <the-update-dialog></the-update-dialog>\n        <the-editor></the-editor>\n        <the-timelapse-rendering-snackbar>-</the-timelapse-rendering-snackbar>\n    </v-app>\n</template>\n\n<script lang=\"ts\">\nimport Component from 'vue-class-component'\nimport TheSidebar from '@/components/TheSidebar.vue'\nimport BaseMixin from '@/components/mixins/base'\nimport TheTopbar from '@/components/TheTopbar.vue'\nimport {Mixins, Watch} from 'vue-property-decorator'\nimport TheUpdateDialog from '@/components/TheUpdateDialog.vue'\nimport TheConnectingDialog from '@/components/TheConnectingDialog.vue'\nimport TheSelectPrinterDialog from '@/components/TheSelectPrinterDialog.vue'\nimport TheEditor from '@/components/TheEditor.vue'\nimport {panelToolbarHeight, topbarHeight, navigationItemHeight} from '@/store/variables'\nimport TheTimelapseRenderingSnackbar from '@/components/TheTimelapseRenderingSnackbar.vue'\n\n@Component({\n    components: {\n        TheTimelapseRenderingSnackbar,\n        TheEditor,\n        TheSelectPrinterDialog,\n        TheConnectingDialog,\n        TheUpdateDialog,\n        TheTopbar,\n        TheSidebar,\n    }\n})\nexport default class App extends Mixins(BaseMixin) {\n    panelToolbarHeight = panelToolbarHeight\n    topbarHeight = topbarHeight\n    navigationItemHeight = navigationItemHeight\n\n    get title(): string {\n        return this.$store.getters['getTitle']\n    }\n\n    get remoteMode(): boolean {\n        return this.$store.state.socket.remoteMode ?? false\n    }\n\n    get mainBackground(): string {\n        return this.$store.getters['files/getMainBackground']\n    }\n\n    get mainStyle() {\n        let style = ''\n\n        if (this.mainBackground !== null) {\n            style = 'background-image: url('+this.mainBackground+');'\n        }\n\n        return style\n    }\n\n    get customStylesheet () {\n        return this.$store.getters['files/getCustomStylesheet']\n    }\n\n    get customFavicons(): string | null {\n        return this.$store.getters['files/getCustomFavicons'] ?? null\n    }\n\n    get language(): string {\n        return this.$store.state.gui.general.language\n    }\n\n    get current_file(): string {\n        return this.$store.state.printer.print_stats?.filename ?? ''\n    }\n\n    get logoColor(): string {\n        return this.$store.state.gui.uiSettings.logo\n    }\n\n    get primaryColor(): string {\n        return this.$store.state.gui.uiSettings.primary\n    }\n\n    get warningColor(): string {\n        return this.$vuetify?.theme?.currentTheme?.warning?.toString() ?? '#ff8300'\n    }\n\n    get primaryTextColor(): string {\n        let splits = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(this.primaryColor)\n        if (splits) {\n            const r = parseInt(splits[1], 16) * 0.2126\n            const g = parseInt(splits[2], 16) * 0.7152\n            const b = parseInt(splits[3], 16) * 0.0722\n            const perceivedLightness = (r + g + b) / 255\n\n            return perceivedLightness > 0.7 ? '#222' : '#fff'\n        }\n\n        return '#ffffff'\n    }\n\n    get cssVars(): { [key: string]: string } {\n        return {\n            '--v-btn-text-primary': this.primaryTextColor,\n            '--color-primary': this.primaryColor,\n            '--color-warning': this.warningColor,\n            '--panel-toolbar-icon-btn-width': panelToolbarHeight + 'px',\n            '--panel-toolbar-text-btn-height': panelToolbarHeight + 'px',\n            '--topbar-icon-btn-width': topbarHeight + 'px',\n            '--sidebar-menu-item-height': navigationItemHeight + 'px'\n        }\n    }\n\n    get print_percent(): number {\n        return Math.round(this.$store.getters['printer/getPrintPercent'] * 100)\n    }\n\n    @Watch('language')\n    languageChanged(newVal: string): void {\n        this.$i18n.locale = newVal\n    }\n\n    @Watch('customStylesheet')\n    customStylesheetChanged(newVal: string | null): void {\n        const style = document.getElementById('customStylesheet')\n        if (newVal !== null && style === null) {\n            const newStyle = document.createElement('link')\n            newStyle.id = 'customStylesheet'\n            newStyle.type = 'text/css'\n            newStyle.rel = 'stylesheet'\n            newStyle.href = newVal\n            document.head.appendChild(newStyle)\n        } else if (newVal !== null && style) {\n            style.setAttribute('href', newVal)\n        } else if (style) style.remove()\n    }\n\n    @Watch('current_file')\n    current_fileChanged(newVal: string): void {\n        if (newVal !== '') this.$socket.emit('server.files.metadata', { filename: newVal }, { action: 'files/getMetadataCurrentFile' })\n    }\n\n    @Watch('primaryColor')\n    primaryColorChanged(newVal: string): void {\n        this.$nextTick(() => {\n            this.$vuetify.theme.currentTheme.primary = newVal\n        })\n    }\n\n    drawFavicon(val: number): void {\n        const favicon16: HTMLLinkElement | null = document.querySelector('link[rel*=\\'icon\\'][sizes=\\'16x16\\']')\n        const favicon32: HTMLLinkElement | null = document.querySelector('link[rel*=\\'icon\\'][sizes=\\'32x32\\']')\n\n        if (favicon16 && favicon32) {\n            if (this.printerIsPrinting) {\n                let faviconSize = 64\n\n                let canvas = document.createElement('canvas')\n                canvas.width = faviconSize\n                canvas.height = faviconSize\n                const context = canvas.getContext('2d')\n                const centerX = canvas.width / 2\n                const centerY = canvas.height / 2\n                const radius = 32\n\n                // draw the grey circle\n                if (context) {\n                    context.beginPath()\n                    context.moveTo(centerX, centerY)\n                    context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false)\n                    context.closePath()\n                    context.fillStyle = '#ddd'\n                    context.fill()\n                    context.strokeStyle = 'rgba(200, 208, 218, 0.66)'\n                    context.stroke()\n\n                    // draw the green circle based on percentage\n                    let startAngle = 1.5 * Math.PI\n                    let endAngle = 0\n                    let unitValue = (Math.PI - 0.5 * Math.PI) / 25\n                    if (val >= 0 && val <= 25) endAngle = startAngle + (val * unitValue)\n                    else if (val > 25 && val <= 50) endAngle = startAngle + (val * unitValue)\n                    else if (val > 50 && val <= 75) endAngle = startAngle + (val * unitValue)\n                    else if (val > 75 && val <= 100) endAngle = startAngle + (val * unitValue)\n\n                    context.beginPath()\n                    context.moveTo(centerX, centerY)\n                    context.arc(centerX, centerY, radius, startAngle, endAngle, false)\n                    context.closePath()\n                    context.fillStyle = this.logoColor\n                    context.fill()\n\n                    favicon16.href = canvas.toDataURL('image/png')\n                    favicon32.href = canvas.toDataURL('image/png')\n                }\n            } else if (this.customFavicons) {\n                const [favicon16Path, favicon32Path] = this.customFavicons\n                favicon16.href = favicon16Path\n                favicon32.href = favicon32Path\n            } else {\n                const favicon = 'data:image/svg+xml;base64,' + btoa(\n                    '<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 599.38 523.11\" xml:space=\"preserve\">' +\n                        '<g>' +\n                            '<path style=\"fill:'+this.logoColor+';\" d=\"M382.29,142.98L132.98,522.82L0,522.68L344.3,0l0,0C352.18,49.06,365.2,97.68,382.29,142.98\"/>' +\n                            '<path style=\"fill:'+this.logoColor+';\" d=\"M413.28,213.54L208.5,522.92l132.94,0.19l135.03-206.33l0,0C452.69,284.29,431.53,249.77,413.28,213.54 L413.28,213.54\"/>' +\n                            '<path style=\"fill:'+this.logoColor+';\" d=\"M599.38,447.69l-49.25,75.42L417,522.82l101.6-153.67l0,0C543.48,397.35,570.49,423.61,599.38,447.69 L599.38,447.69z\"/>' +\n                        '</g>' +\n                    '</svg>'\n                )\n\n                favicon16.href = favicon\n                favicon32.href = favicon\n            }\n        }\n    }\n\n    @Watch('customFavicons')\n    customFaviconsChanged(): void {\n        this.drawFavicon(this.print_percent)\n    }\n\n    @Watch('logoColor')\n    logoColorChanged(): void {\n        this.drawFavicon(this.print_percent)\n    }\n\n    @Watch('print_percent')\n    print_percentChanged(newVal: number): void {\n        this.drawFavicon(newVal)\n    }\n\n    @Watch('printerIsPrinting')\n    printerIsPrintingChanged(): void {\n        this.drawFavicon(this.print_percent)\n    }\n\n    appHeight() {\n        this.$nextTick(() => {\n            const doc = document.documentElement\n            doc.style.setProperty('--app-height', window.innerHeight+'px')\n        })\n    }\n\n    mounted(): void {\n        this.drawFavicon(this.print_percent)\n        this.appHeight()\n        window.addEventListener('resize', this.appHeight)\n        window.addEventListener('orientationchange', this.appHeight)\n    }\n}\n</script>\n"]}]}