{"remainingRequest":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/components/gcodeviewer/Viewer.vue?vue&type=style&index=1&id=d53f29ea&scoped=true&lang=css&","dependencies":[{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/src/components/gcodeviewer/Viewer.vue","mtime":1644874918000},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1645990066541},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1645990070825},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/postcss-loader/src/index.js","mtime":1645990067674},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/cache-loader/dist/cjs.js","mtime":1645990064605},{"path":"/Users/anne-sophieroy/Downloads/Mainsail/mainsail-maintenance/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1645990069130}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5wcm9ncmVzcy10ZXh0IHsKICAgIGZvbnQtc2l6ZTogc21hbGw7Cn0KCi5wcm9ncmVzcy1jb250YWluZXIgewogICAgcG9zaXRpb246IGFic29sdXRlOwogICAgd2lkdGg6IDgwLjUlOwp9CgouZGlzYWJsZS10cmFuc2l0aW9uIHsKICAgIHRyYW5zaXRpb246IG5vbmUgIWltcG9ydGFudDsKfQoK"},{"version":3,"sources":["Viewer.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"Viewer.vue","sourceRoot":"src/components/gcodeviewer","sourcesContent":["<!-- Because the viewer lives outside of the components DOM it can't be scoped -->\n<style>\n.viewer {\n    width: 100%;\n    height: calc(var(--app-height) - 266px);\n    border: 1px solid #3f3f3f;\n}\n\n.slider-autoheight,\n.slider-autoheight .v-slider {\n    height: calc(var(--app-height) - 286px);\n}\n\n@media (min-width: 600px) and (max-width: 959px) {\n    .viewer {\n        height: calc(var(--app-height) - 318px);\n    }\n    .slider-autoheight,\n    .slider-autoheight .v-slider {\n        height: calc(var(--app-height) - 338px);\n    }\n}\n\n@media (max-width: 599px) {\n    .viewer {\n        height: calc(var(--app-height) - 356px);\n    }\n    .slider-autoheight,\n    .slider-autoheight .v-slider {\n        height: calc(var(--app-height) - 376px);\n    }\n}\n\n.slider-autoheight .v-slider {\n    margin-top: 0;\n    margin-bottom: 0;\n}\n.slider-autoheight .v-input__slot {\n    height: 100%;\n}\n</style>\n\n<style scoped>\n.progress-text {\n    font-size: small;\n}\n\n.progress-container {\n    position: absolute;\n    width: 80.5%;\n}\n\n.disable-transition {\n    transition: none !important;\n}\n\n</style>\n\n<template>\n    <div>\n        <panel :title=\"$t('GCodeViewer.Title')\" icon=\"mdi-video-3d\" card-class=\"gcode-viewer-panel\">\n            <template v-slot:buttons>\n                <v-btn \n                    :icon=\"$vuetify.breakpoint.xs\"\n                    :text=\"$vuetify.breakpoint.smAndUp\"\n                    tile\n                    @click=\"reloadViewer\"\n                    color=\"info\"\n                    class=\"ml-3\"\n                    v-show=\"reloadRequired\"\n                >\n                    <span class=\"d-none d-sm-block\">{{$t(\"GCodeViewer.ReloadRequired\")}}</span>\n                    <v-icon class=\"d-sm-none\">mdi-reload-alert</v-icon>\n                </v-btn>\n                <v-btn icon tile @click=\"resetCamera\"><v-icon>mdi-camera-retake</v-icon></v-btn>\n            </template>\n            <v-card-text>\n                <v-row>\n                    <v-col>\n                        <div ref=\"viewerCanvasContainer\"></div>\n                    </v-col>\n                    <v-col class=\"col-auto pr-6\">\n                        <v-slider\n                            vertical\n                            :disabled=\"loading || !loadedFile\"\n                            :max=\"maxZSlider\"\n                            :min=\"0\"\n                            :value=\"zSlider\"\n                            class=\"slider-autoheight mt-3\"\n                            @input=\"updateZSlider\"\n                        ></v-slider>\n                    </v-col>\n                </v-row>\n                <v-row class=\"mt-0 d-flex align-top\">\n                    <v-col>\n                        <v-row>\n                            <v-col order-md=\"2\" class=\"d-flex align-content-space-around justify-center flex-wrap flex-md-nowrap col-12 col-md-4\"> \n                                <template v-if=\"loadedFile === null\">\n                                    <v-btn @click=\"loadCurrentFile\" class=\"mr-3\" v-if=\"sdCardFilePath !== '' && sdCardFilePath !== loadedFile\">{{ $t(\"GCodeViewer.LoadCurrentFile\")}}</v-btn>\n                                    <v-btn @click=\"chooseFile\">{{ $t(\"GCodeViewer.LoadLocal\") }}</v-btn>\n                                </template>\n                                <template v-else>\n                                    <v-btn @click=\"tracking=!tracking\" class=\"mr-3\" v-if=\"showTrackingButton\"><v-icon v-html=\"tracking ? 'mdi-toggle-switch' : 'mdi-toggle-switch-off-outline'\" class=\"mr-2\"></v-icon>{{ $t(\"GCodeViewer.Tracking\") }}</v-btn>\n                                    <v-btn @click=\"clearLoadedFile\">{{ $t(\"GCodeViewer.ClearLoadedFile\") }}</v-btn>\n                                </template>\n                            </v-col>\n                            <v-col class=\"col-12 col-sm-6 col-md-4\">\n                                <v-select :items=\"colorModes\" :label=\"$t('GCodeViewer.ColorMode')\" item-text=\"text\" dense v-model=\"colorMode\" hide-details outlined></v-select>\n                            </v-col>\n                            <v-col order-md=\"3\" class=\"col-12 col-sm-6 col-md-4\">\n                                <v-select :items=\"renderQualities\" :label=\"$t('GCodeViewer.RenderQuality')\" item-text=\"label\" dense v-model=\"renderQuality\" hide-details outlined></v-select>\n                            </v-col>\n                        </v-row>\n                    </v-col>\n                        <v-menu :offset-y=\"true\" :offset-x=\"true\" top :close-on-content-click=\"false\" :title=\"$t('Files.SetupCurrentList')\">\n                            <template v-slot:activator=\"{ on, attrs }\">\n                                <v-btn class=\"minwidth-0 px-2 mr-3 mt-3\" v-bind=\"attrs\" v-on=\"on\"><v-icon>mdi-cog</v-icon></v-btn>\n                            </template>\n                            <v-list>\n                                <v-list-item class=\"minHeight36\">\n                                    <v-checkbox class=\"mt-0\" hide-details v-model=\"showCursor\"  :label=\"$t('GCodeViewer.ShowToolhead')\"></v-checkbox>\n                                </v-list-item>\n                                <v-list-item class=\"minHeight36\">\n                                    <v-checkbox class=\"mt-0\" hide-details v-model=\"showTravelMoves\"  :label=\"$t('GCodeViewer.ShowTravelMoves')\"></v-checkbox>\n                                </v-list-item>\n                                <v-list-item class=\"minHeight36\" v-if=\"loadedFile === sdCardFilePath && printing_objects.length > 1\">\n                                    <v-checkbox class=\"mt-0\" hide-details v-model=\"showObjectSelection\"  :label=\"$t('GCodeViewer.ShowObjectSelection')\"></v-checkbox>\n                                </v-list-item>\n                                <v-divider></v-divider>\n                                <v-list-item class=\"minHeight36\">\n                                    <v-checkbox class=\"mt-0\" hide-details v-model=\"hdRendering\" :label=\"$t('GCodeViewer.HDRendering')\"></v-checkbox>\n                                </v-list-item>\n                                <v-list-item class=\"minHeight36\">\n                                    <v-checkbox class=\"mt-0\" hide-details v-model=\"forceLineRendering\" :label=\"$t('GCodeViewer.ForceLineRendering')\"></v-checkbox>\n                                </v-list-item>\n                                <v-list-item class=\"minHeight36\">\n                                    <v-checkbox class=\"mt-0\" hide-details v-model=\"transparency\" :label=\"$t('GCodeViewer.Transparency')\"></v-checkbox>\n                                </v-list-item>\n                                <v-list-item class=\"minHeight36\">\n                                    <v-checkbox class=\"mt-0\" hide-details v-model=\"voxelMode\" :label=\"$t('GCodeViewer.VoxelMode')\"></v-checkbox>\n                                </v-list-item>\n                                <v-list-item class=\"minHeight36\">\n                                    <v-checkbox class=\"mt-0\" hide-details v-model=\"specularLighting\" :label=\"$t('GCodeViewer.SpecularLighting')\"></v-checkbox>\n                                </v-list-item>\n                            </v-list>\n                        </v-menu>\n                </v-row>\n                <input :accept=\"'.g,.gcode,.gc,.gco,.nc,.ngc,.tap'\" @change=\"fileSelected\" hidden multiple ref=\"fileInput\" type=\"file\" />\n            </v-card-text>\n        </panel>\n        <v-snackbar v-model=\"loading\" :timeout=\"-1\" :value=\"true\" fixed right bottom dark>\n            <div>\n                {{ $t('GCodeViewer.Rendering') }} - {{ loadingPercent }}%<br />\n                <strong>{{ this.loadedFile }}</strong>\n            </div>\n            <v-progress-linear class=\"mt-2\" :value=\"loadingPercent\"></v-progress-linear>\n            <template v-slot:action=\"{ attrs }\">\n                <v-btn color=\"red\" text v-bind=\"attrs\" style=\"min-width: auto;\" @click=\"cancelRendering()\">\n                    <v-icon class=\"0\">mdi-close</v-icon>\n                </v-btn>\n            </template>\n        </v-snackbar>\n        <v-snackbar v-model=\"downloadSnackbar.status\" :timeout=\"-1\" :value=\"true\" fixed right bottom dark>\n            <template v-if=\"downloadSnackbar.total > 0\">\n                <div>\n                    {{ $t('GCodeViewer.Downloading') }} - {{ Math.round(downloadSnackbar.percent) }} % @ {{ formatFilesize(Math.round(downloadSnackbar.speed)) }}/s<br />\n                    <strong>{{ downloadSnackbar.filename }}</strong>\n                </div>\n                <v-progress-linear class=\"mt-2\" :value=\"downloadSnackbar.percent\"></v-progress-linear>\n            </template>\n            <template v-else>\n                <div>\n                    {{ $t('GCodeViewer.Downloading') }}<br />\n                    <strong>{{ downloadSnackbar.filename }}</strong>\n                </div>\n                <v-progress-linear class=\"mt-2\" indeterminate></v-progress-linear>\n            </template>\n            <template v-slot:action=\"{ attrs }\">\n                <v-btn color=\"red\" text v-bind=\"attrs\" @click=\"cancelDownload\" style=\"min-width: auto;\" >\n                    <v-icon class=\"0\">mdi-close</v-icon>\n                </v-btn>\n            </template>\n        </v-snackbar>\n    </div>\n</template>\n\n<script lang=\"ts\">\nimport {Component, Mixins, Prop, Ref, Watch} from 'vue-property-decorator'\nimport BaseMixin from '../mixins/base'\n// @ts-ignore\nimport GCodeViewer from '@sindarius/gcodeviewer'\nimport axios from 'axios'\nimport {formatFilesize} from '@/plugins/helpers'\nimport Panel from '@/components/ui/Panel.vue'\n\ninterface downloadSnackbar {\n    status: boolean\n    filename: string\n    percent: number\n    speed: number\n    total: number\n    cancelTokenSource: any\n    lastProgress: {\n        time: number\n        loaded: number\n    }\n}\n\nlet viewer: any = null\n@Component({\n    components: {Panel}\n})\nexport default class Viewer extends Mixins(BaseMixin) {\n    formatFilesize = formatFilesize\n\n    private isBusy = false\n    private loading = false\n    private loadingPercent = 0\n\n    private tracking = false\n    private loadedFile: string | null = null\n\n    private reloadRequired = false\n    private fileSize = 0\n    private maxZSlider = 100000\n    private zSlider = this.maxZSlider\n    private zSlicerHeight = 100\n    private renderQuality = this.renderQualities[2]\n\n    private downloadSnackbar: downloadSnackbar = {\n        status: false,\n        filename: '',\n        percent: 0,\n        speed: 0,\n        total: 0,\n        cancelTokenSource: {},\n        lastProgress: {\n            time: 0,\n            loaded: 0\n        }\n    }\n\n    @Prop({type: String, default: '', required: false}) filename!: string\n    @Ref('fileInput') fileInput!: HTMLInputElement\n    //@Ref('viewerCanvasContainer') viewerCanvasContainer!: HTMLElement\n\n    $refs!: {\n        viewerCanvasContainer: HTMLElement\n    }\n\n    get renderQualities() {\n        return [\n            { label: this.$t('GCodeViewer.Low'),    value: 2 },\n            { label: this.$t('GCodeViewer.Medium'), value: 3 },\n            { label: this.$t('GCodeViewer.High'),   value: 4 },\n            { label: this.$t('GCodeViewer.Ultra'),  value: 5 },\n            { label: this.$t('GCodeViewer.Max'),    value: 6 },\n        ]\n    }\n\n    async mounted() {\n        this.loadedFile = this.$store.state.gcodeviewer?.loadedFileBackup ?? null\n        viewer = this.$store.state.gcodeviewer?.viewerBackup ?? null\n\n        await this.init()\n\n        window.addEventListener('resize', this.eventListenerResize)\n    }\n\n    beforeDestroy() {\n        if (viewer) {\n            viewer.gcodeProcessor.loadingProgressCallback = null\n            this.$store.dispatch('gcodeviewer/setLoadedFileBackup', this.loadedFile)\n            this.$store.dispatch('gcodeviewer/setViewerBackup', viewer)\n        }\n\n        window.removeEventListener('resize', this.eventListenerResize)\n    }\n\n    eventListenerResize() {\n        viewer?.resize()\n    }\n\n    get filePosition() {\n        return this.printerIsPrinting ? this.$store.state.printer.virtual_sdcard.file_position : 0\n    }\n\n    get sdCardFilePath() {\n        return this.$store.state.printer.print_stats?.filename ?? ''\n    }\n\n    get currentPosition() {\n        return this.$store.state.printer.motion_report?.live_position ?? [0, 0, 0, 0]\n    }\n\n    get showTrackingButton() {\n        return this.printerIsPrinting && this.sdCardFilePath === this.loadedFile\n    }\n\n    get printing_objects() {\n        return this.$store.state.printer.exclude_object?.objects ?? []\n    }\n\n    get excluded_objects() {\n        return this.$store.state.printer.exclude_object?.excluded_objects ?? []\n    }\n\n    get nozzle_diameter() {\n        return this.$store.state.printer.configfile?.settings?.extruder?.nozzle_diameter ?? 0.4\n    }\n\n    async init() {\n        let canvasElement = this.$store.state.gcodeviewer?.canvasBackup ?? null\n\n        if (canvasElement === null) {\n            canvasElement = document.createElement('canvas')\n            canvasElement.className = 'viewer'\n            this.$refs.viewerCanvasContainer.appendChild(canvasElement)\n            await this.$store.dispatch('gcodeviewer/setCanvasBackup', canvasElement)\n        } else {\n            this.$refs.viewerCanvasContainer.appendChild(canvasElement)\n            if (viewer?.gcodeProcessor) {\n                viewer.gcodeProcessor.updateFilePosition(viewer?.fileSize)\n            }\n        }\n\n        if (viewer === null) {\n            await this.viewerInit(canvasElement)\n        }\n\n        this.registerProgressCallback()\n\n        if (this.$route.query?.filename && this.loadedFile !== this.$route.query?.filename?.toString()) {\n            //TODO: test without sleep\n            await this.sleep(1000) //Give the store a chance to initializ before loading the file.\n            await this.loadFile(this.$route.query.filename.toString())\n        }\n    }\n\n    viewerInit(element: HTMLCanvasElement) {\n        viewer = new GCodeViewer(element)\n        viewer.init()\n        viewer.setBackgroundColor(this.backgroundColor)\n        viewer.bed.setBedColor(this.gridColor)\n        viewer.setCursorVisiblity(this.showCursor)\n        viewer.setZClipPlane(1000000, -1000000)\n        viewer.axes.show(this.showAxes)\n        viewer.bed.setDelta(this.kinematics.includes('delta'))\n\n        if (this.bedMaxSize !== null) {\n            viewer.bed.buildVolume['x'].max = this.bedMaxSize[0]\n            viewer.bed.buildVolume['y'].max = this.bedMaxSize[1]\n            viewer.bed.buildVolume['z'].max = this.bedMaxSize[2]\n        }\n\n        if (this.bedMinSize !== null) {\n            viewer.bed.buildVolume['x'].min = this.bedMinSize[0]\n            viewer.bed.buildVolume['y'].min = this.bedMinSize[1]\n            viewer.bed.buildVolume['z'].min = this.bedMinSize[2]\n        }\n\n        viewer.gcodeProcessor.useHighQualityExtrusion(this.hdRendering)\n        viewer.gcodeProcessor.updateForceWireMode(this.forceLineRendering)\n        viewer.gcodeProcessor.setAlpha(this.transparency)\n        viewer.gcodeProcessor.setVoxelMode(this.voxelMode)\n        viewer.gcodeProcessor.voxelWidth = this.voxelWidth\n        viewer.gcodeProcessor.voxelHeight = this.voxelHeight\n        viewer.gcodeProcessor.useSpecularColor(this.specularLighting)\n        viewer.gcodeProcessor.setLiveTracking(false)\n\n        this.loadToolColors(this.extruderColors)\n\n        if (viewer.lastLoadFailed()) {\n            this.renderQuality = this.renderQualities[0]\n            viewer.updateRenderQuality(1)\n            viewer.clearLoadFlag()\n        }\n    }\n\n    registerProgressCallback() {\n        if (viewer) {\n            viewer.gcodeProcessor.loadingProgressCallback = (progress: number) => {\n                this.loadingPercent = Math.ceil(progress * 100)\n                this.loading = this.loadingPercent <= 99\n            }\n        }\n    }\n    \n    async cancelRendering() {\n        if (viewer) {\n            viewer.gcodeProcessor.cancelLoad = true\n            await this.sleep(1000)\n        }\n    }\n\n    clearLoadedFile() {\n        if (viewer) {\n            viewer.clearScene(true)\n            this.loadedFile = null\n            this.tracking = false\n        }\n    }\n\n    chooseFile() {\n        if (!this.isBusy) {\n            this.fileInput.click()\n        }\n    }\n\n    finishLoad() {\n        this.maxZSlider = viewer.getMaxHeight() + 1\n        this.zSlider = this.maxZSlider\n        this.loading = false\n        viewer.setCursorVisiblity(this.showCursor)\n\n        if (this.loadedFile === this.sdCardFilePath && this.printing_objects.length) {\n            let objects: any = []\n\n            this.printing_objects.forEach((object: any) => {\n                const xValues = object.polygon.map((point: number[]) => point[0])\n                const yValues = object.polygon.map((point: number[]) => point[1])\n\n                objects.push({\n                    cancelled: this.excluded_objects.includes(object.name),\n                    name: object.name,\n                    x: [Math.min(...xValues), Math.max(...xValues)],\n                    y: [Math.min(...yValues), Math.max(...yValues)],\n                })\n            })\n\n            viewer.buildObjects.loadObjectBoundaries(objects)\n            viewer.buildObjects.showObjectSelection(this.showObjectSelection)\n        }\n\n        viewer.gcodeProcessor.updateFilePosition(viewer.fileSize)\n    }\n\n    async fileSelected(e: any) {\n        const reader = new FileReader()\n        reader.addEventListener('load', async (event) => {\n            if (!event || !event.target) return\n            const blob = event.target.result\n            if (typeof blob === 'string') {\n                this.fileSize = blob.length\n                // Do something with result\n                await viewer.processFile(blob)\n            }\n            this.finishLoad()\n        })\n        this.tracking = false\n        if (e.target.files?.length) {\n            this.loadedFile = e?.target?.files[0].name\n            reader.readAsText(e.target.files[0])\n        }\n        e.target.value = ''\n    }\n\n    async loadFile(filename: string) {\n        this.downloadSnackbar.status = true\n        this.downloadSnackbar.speed = 0\n        this.downloadSnackbar.lastProgress.time = 0\n        this.downloadSnackbar.filename = filename.startsWith('gcodes/') ? filename.slice(7) : filename\n        const CancelToken = axios.CancelToken\n        this.downloadSnackbar.cancelTokenSource = CancelToken.source()\n        const text = await axios.get(this.apiUrl + '/server/files/' + encodeURI(filename), {\n            cancelToken: this.downloadSnackbar.cancelTokenSource.token,\n            responseType: 'blob',\n            onDownloadProgress: (progressEvent) => {\n                this.downloadSnackbar.percent = (progressEvent.loaded * 100) / progressEvent.total\n                if (this.downloadSnackbar.lastProgress.time) {\n                    const time = progressEvent.timeStamp - this.downloadSnackbar.lastProgress.time\n                    const data = progressEvent.loaded - this.downloadSnackbar.lastProgress.loaded\n\n                    if (time > 1000 || this.downloadSnackbar.speed === 0) {\n                        this.downloadSnackbar.speed = data / (time / 1000)\n                        this.downloadSnackbar.lastProgress.time = progressEvent.timeStamp\n                        this.downloadSnackbar.lastProgress.loaded = progressEvent.loaded\n                    }\n                } else this.downloadSnackbar.lastProgress.time = progressEvent.timeStamp\n\n                this.downloadSnackbar.total = progressEvent.total\n            }\n        }).then(res => res.data.text()).catch((e) => {\n            window.console.error(e.message)\n        })\n        this.downloadSnackbar.status = false\n        this.loadedFile = this.downloadSnackbar.filename\n\n        viewer.updateRenderQuality(this.renderQuality.value)\n        await viewer.processFile(text)\n        this.loadingPercent = 100\n        this.finishLoad()\n    }\n\n    cancelDownload() {\n        this.downloadSnackbar.cancelTokenSource.cancel('User canceled download gcode file')\n    }\n\n    async sleep(ms: number) {\n        await new Promise((resolve) => setTimeout(resolve, ms))\n    }\n\n    async loadCurrentFile() {\n        await this.loadFile('gcodes/' + this.sdCardFilePath)\n        this.loadedFile = this.sdCardFilePath\n    }\n\n    async reloadViewer() {\n        if (this.loading) {\n            //if we are actively loading signal a cancel and wait a second\n            //This prevents a timing issue that can happen if a user changes settings and then\n            //hits the reload viewer button. Will eventually move this to api\n            viewer.gcodeProcessor.cancelLoad = true\n            await this.sleep(1000)\n        }\n\n        this.reloadRequired = false\n        this.loading = true\n        this.loadingPercent = 0\n        await viewer.reload()\n        this.loadingPercent = 100\n        this.finishLoad()\n    }\n\n    resetCamera() {\n        viewer.resetCamera()\n    }\n\n    setReloadRequiredFlag() {\n        if (this.loadedFile && this.loadedFile != '') {\n            this.reloadRequired = true\n        }\n    }\n\n    @Watch('renderQuality')\n    async renderQualityChanged(newVal: number) {\n        if (viewer && viewer.renderQuality !== newVal) {\n            viewer.updateRenderQuality(newVal)\n            await this.reloadViewer()\n        }\n    }\n\n    @Watch('currentPosition')\n    currentPositionChanged(newVal: number[]) {\n        if (viewer) {\n            const position = [\n                {axes: 'X', position: newVal[0]},\n                {axes: 'Y', position: newVal[1]},\n                {axes: 'Z', position: newVal[2]},\n            ]\n\n            viewer.updateToolPosition(position)\n        }\n    }\n\n    @Watch('filePosition')\n    filePositionChanged(newVal: number) {\n        if (!viewer) return\n\n        const offset = 350\n        if (newVal > 0 && this.printerIsPrinting && this.tracking && newVal > offset) {\n            viewer.gcodeProcessor.updateFilePosition(newVal - offset)\n        } else {\n            viewer.gcodeProcessor.updateFilePosition(viewer.fileSize)\n        }\n    }\n\n    @Watch('tracking')\n    async trackingChanged(newVal: boolean) {\n        if (!viewer) return\n        if (newVal) {\n            //Set zSlider to max value\n            this.zSlider = this.maxZSlider\n            //Force renderers reload.\n            viewer.gcodeProcessor.updateFilePosition(0)\n            viewer?.forceRender()\n        } else {\n            viewer.gcodeProcessor.setLiveTracking(false)\n            await this.reloadViewer()\n        }\n    }\n\n    @Watch('printerIsPrinting')\n    printerIsPrintingChanged() {\n        this.tracking = false\n    }\n\n    get showCursor(): boolean {\n        return this.$store.state.gui.gcodeViewer.showCursor ?? false\n    }\n\n    set showCursor(newVal: boolean) {\n        this.$store.dispatch('gui/saveSetting', {name: 'gcodeViewer.showCursor', value: newVal})\n    }\n\n    @Watch('showCursor')\n    showCursorChanged(newVal: boolean) {\n        viewer?.setCursorVisiblity(newVal)\n    }\n\n    get showTravelMoves(): boolean {\n        return this.$store.state.gui.gcodeViewer.showTravelMoves ?? false\n    }\n\n    set showTravelMoves(newVal: boolean) {\n        this.$store.dispatch('gui/saveSetting', {name: 'gcodeViewer.showTravelMoves', value: newVal})\n    }\n\n    @Watch('showTravelMoves')\n    showTravelMovesChanged(newVal: boolean) {\n        viewer?.toggleTravels(newVal)\n    }\n\n    get showObjectSelection(): boolean {\n        return this.$store.state.gui.gcodeViewer.showObjectSelection ?? false\n    }\n\n    set showObjectSelection(newVal: boolean) {\n        this.$store.dispatch('gui/saveSetting', {name: 'gcodeViewer.showObjectSelection', value: newVal})\n    }\n\n    @Watch('showObjectSelection')\n    showObjectSelectionChanged(newVal: boolean) {\n        viewer?.buildObjects.showObjectSelection(newVal)\n    }\n\n    get hdRendering() {\n        return this.$store.state.gui.gcodeViewer.hdRendering\n    }\n\n    set hdRendering(newVal) {\n        this.$store.dispatch('gui/saveSetting', {name: 'gcodeViewer.hdRendering', value: newVal})\n    }\n\n    @Watch('hdRendering')\n    async hdRenderingChanged(newVal: boolean) {\n        if (viewer) {\n            viewer.gcodeProcessor.useHighQualityExtrusion(newVal)\n            await this.reloadViewer()\n        }\n    }\n\n    get forceLineRendering() {\n        return this.$store.state.gui.gcodeViewer.forceLineRendering\n    }\n\n    set forceLineRendering(newVal) {\n        this.$store.dispatch('gui/saveSetting', {name: 'gcodeViewer.forceLineRendering', value: newVal})\n    }\n\n    @Watch('forceLineRendering')\n    async forceLineRenderingChanged(newVal: boolean) {\n        if (viewer) {\n            viewer.gcodeProcessor.updateForceWireMode(newVal)\n            await this.reloadViewer()\n        }\n    }\n\n    get transparency() {\n        return this.$store.state.gui.gcodeViewer.transparency\n    }\n\n    set transparency(newVal) {\n        this.$store.dispatch('gui/saveSetting', {name: 'gcodeViewer.transparency', value: newVal})\n    }\n\n    @Watch('transparency')\n    async transparencyChanged(newVal: boolean) {\n        if (viewer) {\n            viewer.gcodeProcessor.setAlpha(newVal)\n            await this.reloadViewer()\n        }\n    }\n\n    get voxelMode() {\n        return this.$store.state.gui.gcodeViewer.voxelMode\n    }\n\n    set voxelMode(newVal) {\n        this.$store.dispatch('gui/saveSetting', {name: 'gcodeViewer.voxelMode', value: newVal})\n    }\n\n    @Watch('voxelMode')\n    async voxelModeChanged(newVal: boolean) {\n        if (viewer) {\n            viewer.gcodeProcessor.setVoxelMode(newVal)\n            viewer.gcodeProcessor.voxelWidth = this.voxelWidth\n            viewer.gcodeProcessor.voxelHeight = this.voxelHeight\n            await this.reloadViewer()\n        }\n    }\n\n    get voxelWidth() {\n        return this.$store.state.gui.gcodeViewer.voxelWidth ?? 1\n    }\n\n    set voxelWidth(newVal) {\n        this.$store.dispatch('gui/saveSetting', {name: 'gcodeViewer.voxelWidth', value: newVal})\n    }\n\n    get voxelHeight() {\n        return this.$store.state.gui.gcodeViewer.voxelHeight ?? 1\n    }\n\n    set voxelHeight(newVal) {\n        this.$store.dispatch('gui/saveSetting', {name: 'gcodeViewer.voxelHeight', value: newVal})\n    }\n\n    get specularLighting() {\n        return this.$store.state.gui.gcodeViewer.specularLighting\n    }\n\n    set specularLighting(newVal) {\n        this.$store.dispatch('gui/saveSetting', {name: 'gcodeViewer.specularLighting', value: newVal})\n    }\n\n    @Watch('specularLighting')\n    async specularLightingChanged(newVal: boolean) {\n        if (viewer) {\n            viewer.gcodeProcessor.useSpecularColor(newVal)\n            //await this.reloadViewer()\n        }\n    }\n\n    get extruderColors() {\n        return this.$store.state.gui.gcodeViewer?.extruderColors ?? false\n    }\n\n    loadToolColors(colors: string[]) {\n        if (viewer && colors.length) {\n            viewer.gcodeProcessor.resetTools()\n            colors.forEach((color: string) => {\n                viewer.gcodeProcessor.addTool(color, this.nozzle_diameter)\n            })\n            this.setReloadRequiredFlag()\n        }\n    }\n\n    @Watch('extruderColors')\n    extruderColorsChanged(newVal: string[]) {\n        if (viewer && newVal && newVal.length) {\n            this.loadToolColors(newVal)\n            this.setReloadRequiredFlag()\n        }\n    }\n\n    private colorModes = [\n        {text: 'Extruder', value: 0},\n        {text: 'Feed Rate', value: 1},\n        {text: 'Feature', value: 2},\n    ]\n\n    get colorMode(): number {\n        return this.$store.state.gui.gcodeViewer?.colorMode ?? 2\n    }\n\n    set colorMode(newVal: number) {\n        this.$store.dispatch('gui/saveSetting', {name: 'gcodeViewer.colorMode', value: newVal})\n\n        if (viewer) {\n            if (viewer.gcodeProcessor.colorMode !== newVal) {\n                viewer.gcodeProcessor.setColorMode(newVal)\n                this.reloadViewer()\n            }\n        }\n    }\n\n    get backgroundColor() {\n        return this.$store.state.gui.gcodeViewer?.backgroundColor ?? '#121212'\n    }\n\n    @Watch('backgroundColor')\n    backgroundColorChanged(newVal: string) {\n        if (!viewer) return\n        viewer.setBackgroundColor(newVal)\n    }\n\n    get gridColor() {\n        return this.$store.state.gui.gcodeViewer?.gridColor ?? '#B3B3B3'\n    }\n\n    @Watch('gridColor')\n    gridColorChanged(newVal: string) {\n        if (!viewer) return\n        viewer.bed.setBedColor(newVal)\n    }\n\n    get showAxes() {\n        return this.$store.state.gui.gcodeViewer?.showAxes ?? true\n    }\n\n    @Watch('showAxes')\n    showAxesChanged(newVal: boolean) {\n        if (!viewer) return\n        viewer.axes.show(newVal)\n    }\n\n    get minFeed() {\n        return this.$store.state.gui.gcodeViewer?.minFeed ?? 20\n    }\n\n    @Watch('minFeed')\n    minFeedChanged(newVal: number) {\n        if (!viewer) return\n        viewer.gcodeProcessor.updateColorRate(newVal * 60, this.maxFeed * 60)\n    }\n\n    get maxFeed() {\n        return this.$store.state.gui.gcodeViewer?.maxFeed ?? 100\n    }\n\n    @Watch('maxFeed')\n    maxFeedChanged(newVal: number) {\n        if (!viewer) return\n        viewer.gcodeProcessor.updateColorRate(this.minFeed * 60, newVal * 60)\n    }\n\n    get minFeedColor() {\n        return this.$store.state.gui.gcodeViewer?.minFeedColor ?? '#0000FF'\n    }\n\n    @Watch('minFeedColor')\n    minFeedColorUpdated(newVal: string) {\n        if (!viewer) return\n        viewer.gcodeProcessor.updateMinFeedColor(newVal)\n        this.setReloadRequiredFlag()\n    }\n\n    get maxFeedColor() {\n        return this.$store.state.gui.gcodeViewer?.maxFeedColor ?? '#FF0000'\n    }\n\n    @Watch('maxFeedColor')\n    maxFeedColorUpdated(newVal: string) {\n        if (!viewer) return\n        viewer.gcodeProcessor.updateMaxFeedColor(newVal)\n        this.setReloadRequiredFlag()\n    }\n\n    get kinematics() {\n        return this.$store.state.printer.configfile?.settings?.printer?.kinematics ?? ''\n    }\n\n    @Watch('kinematics')\n    kinematicsChanged(newVal: string) {\n        if (viewer && newVal) {\n            viewer.bed.setDelta(newVal.includes('delta'))\n        }\n    }\n\n    get bedMinSize() {\n        return this.$store.state.printer.toolhead?.axis_minimum ?? null\n    }\n\n    @Watch('bedMinSize', {deep: true})\n    bedMinSizeChanged(newVal: number[] | null) {\n        if (viewer && newVal) {\n            viewer.bed.buildVolume['x'].min = newVal[0]\n            viewer.bed.buildVolume['y'].min = newVal[1]\n            viewer.bed.buildVolume['z'].min = newVal[2]\n        }\n    }\n\n    get bedMaxSize() {\n        return this.$store.state.printer.toolhead?.axis_maximum ?? null\n    }\n\n    @Watch('bedMaxSize', {deep: true})\n    bedMaxSizeChanged(newVal: number[] | null) {\n        if (newVal && viewer) {\n            viewer.bed.buildVolume['x'].max = newVal[0]\n            viewer.bed.buildVolume['y'].max = newVal[1]\n            viewer.bed.buildVolume['z'].max = newVal[2]\n        }\n    }\n\n    @Watch('zSlider')\n    zSliderChanged(newVal: number) {\n        viewer?.setZClipPlane(newVal, -1)\n        viewer?.forceRender()\n    }\n\n    get progressColor() {\n        return this.$store.state.gui.gcodeViewer?.progressColor ?? '#FFFFFF'\n    }\n\n    @Watch('progressColor')\n    progressColorChanged(newVal: string) {\n        viewer?.setProgressColor(newVal)\n    }\n\n    updateZSlider(newVal: any) {\n        this.zSlider = newVal\n    }\n}\n</script>\n\n"]}]}